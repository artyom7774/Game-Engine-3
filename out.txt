
##### engine\application.py #####
1     from engine.classes.getUsingObjects import GetUsingObjects
2     
3     from PIL import Image
4     
5     from engine.variables import *
6     
7     import engine
8     import pygame
9     import typing
10     import ctypes
11    import sys
12    import os
13    
14    os.environ["SDL_VIDEO_CENTERED"] = "1"
15    
16    try:
17        ctypes.windll.shcore.SetProcessDpiAwareness(True)
18    
19    except AttributeError:
20        pass
21    
22    pygame.init()
23    
24    
25    class Application:
26        def __init__(
27            self, usingWidth: int = 700, usingHeight: int = 700, displayWidth: int = 700, displayHeight: int = 700,
28            fps: int = 60, tps: int = 20, name: str = "GE3 project", icon: str = "", flags: typing.Dict[str, typing.Any] = None,
29            variables: typing.Dict[str, typing.Any] = None, visiable: bool = True, debug: bool = False,
30            autoUpdateScreen: bool = True, collision: str = "", forcedViewObject: bool = False
31        ) -> None:
32            if flags is None:
33                flags = {}
34    
35            if variables is None:
36                variables = {}
37    
38            self.particles = engine.ParticleGroup(self)
39            self.objects = engine.ObjectGroup(self)
40    
41            self.objects.collisions = engine.Collision(collision)
42    
43            self.camera = engine.camera.StaticCamera(self, 0, 0)
44    
45            self.functions = None
46    
47            self.debug = debug
48    
49            self.autoUpdateScreen = autoUpdateScreen
50            self.forcedViewObject = forcedViewObject
51    
52            self.usingWidth = usingWidth
53            self.usingHeight = usingHeight
54    
55            self.displayWidth = displayWidth
56            self.displayHeight = displayHeight
57    
58            self.fps = fps
59            self.tps = tps
60    
61            self.dt = 1
62    
63            self.mouse = pygame.mouse.get_pos()
64            self.click = [0, 0, 0, 0, 0]
65    
66            self.name = name
67            self.icon = icon
68    
69            self.cash = {
70                "collisions": {},
71                "object_sorted_by_distance": []
72            }
73    
74            self.focus = None
75    
76            self.variables = variables
77            self.flags = flags
78    
79            self.fpsc = 0
80    
81            self.events = {
82                "PRESS": {}
83            }
84    
85            self.doCollisionsUpdate = False
86    
87            self.surface = None
88    
89            self.screen = None
90            self.clock = None
91    
92            self.play = True
93    
94            self.visiable = visiable
95    
96            self.lastDrawing = []
97            self.afterDrawing = []
98    
99            self.init()
100    
101       def init(self) -> None:
102           if self.visiable:
103               self.surface = pygame.display.set_mode((self.displayWidth, self.displayHeight))
104   
105           else:
106               self.surface = pygame.display.set_mode((self.displayWidth, self.displayHeight), pygame.HIDDEN)
107   
108           self.screen = pygame.Surface((self.usingWidth, self.usingHeight))
109           self.clock = pygame.time.Clock()
110   
111       def setName(self, name: str) -> None:
112           self.name = name
113   
114       def setIcon(self, icon: str) -> None:
115           self.icon = icon
116   
117       def updateCaption(self) -> None:
118           pygame.display.set_caption(self.name, self.icon)
119   
120       def updateCustonCaption(self, text: str) -> None:
121           pygame.display.set_caption(text)
122   
123       def setDebug(self, debug: bool) -> None:
124           self.debug = debug
125   
126       def setFps(self, fps: int) -> None:
127           self.fps = fps
128   
129       def setTps(self, tps: int) -> None:
130           self.tps = tps
131   
132       def setSize(self, width: int = None, height: int = None) -> None:
133           self.setDisplaySize(width, height)
134           self.setUsingSize(width, height)
135   
136           self.init()
137   
138       def setUsingSize(self, width: int = None, height: int = None) -> None:
139           self.usingWidth = width if width is not None else self.usingWidth
140           self.usingHeight = height if height is not None else self.usingHeight
141   
142           self.init()
143   
144       def setDisplaySize(self, width: int = None, height: int = None) -> None:
145           self.displayWidth = width if width is not None else self.displayWidth
146           self.displayHeight = height if height is not None else self.displayHeight
147   
148           self.init()
149   
150       def setCamera(self, cameraClass: VCamera) -> None:
151           self.camera = cameraClass
152   
153       def setFunctionClass(self, functionClass) -> None:
154           self.functions = functionClass
155   
156       def setKeyEvent(self, event: typing.List[str], func: typing.Callable) -> None:
157           # setKeyEvent(["KEYDOWN", "r"], self.place)
158   
159           try:
160               event[0] = getattr(pygame, event[0])
161               event[1] = getattr(pygame, "K_" + event[1])
162   
163           except AttributeError:
164               event[0] = event[0]
165   
166               try:
167                   event[1] = getattr(pygame, "K_" + event[1])
168   
169               except AttributeError:
170                   event[1] = getattr(pygame, "K_" + event[1].upper())
171   
172           if event[0] not in self.events:
173               self.events[event[0]] = {}
174   
175           if event[1] not in self.events[event[0]]:
176               self.events[event[0]][event[1]] = []
177   
178           self.events[event[0]][event[1]].append(func)
179   
180       def setMouseEvent(self, mouse: int, func: typing.Callable) -> None:
181           if f"MOUSE_{mouse}" not in self.events:
182               self.events[f"MOUSE_{mouse}"] = []
183   
184           self.events[f"MOUSE_{mouse}"].append(func)
185   
186       def getScreenImage(self):
187           return Image.frombytes("RGBA", self.screen.get_size(), pygame.image.tostring(self.screen, "RGBA"))
188   
189       def render(self) -> None:
190           self.particles.draw()
191           self.objects.draw()
192   
193       def update(self) -> None:
194           self.doCollisionsUpdate = True
195   
196           self.mouse = pygame.mouse.get_pos()
197   
198           self.camera.update()
199   
200           self.particles.update()
201           self.objects.update()
202   
203           self.click = [0] * 5
204   
205           # if self.debug:
206           #     pygame.display.set_caption(str(round(self.clock.get_fps())))
207   
208           if self.doCollisionsUpdate:
209               engine.classes.getUsingObjects.GetUsingObjects.getUsingObjectsSquare(self, self.objects)
210   
211       def logic(self) -> None:
212           for event in pygame.event.get():
213               if event.type == pygame.QUIT:
214                   self.play = False
215   
216               if event.type in self.events:
217                   if event.key in self.events[event.type]:
218                       for func in self.events[event.type][event.key]:
219                           func()
220   
221                   else:
222                       pass
223   
224               if event.type == pygame.MOUSEBUTTONUP:
225                   self.click[event.button - 1] = True
226   
227           keys = pygame.key.get_pressed()
228   
229           for key, value in self.events.get("PRESS").items():
230               if keys[key]:
231                   for element in value:
232                       element()
233   
234           for i, element in enumerate(self.click):
235               if element and f"MOUSE_{i}" in self.events:
236                   for event in self.events[f"MOUSE_{i}"]:
237                       event()
238   
239       def frame(
240           self, image: bool = False, screenFillColor: typing.Any = None,
241           lastDrawing: typing.List[typing.Union[typing.List[typing.Any], typing.Callable]] = None,
242           afterDrawing: typing.List[typing.Union[typing.List[typing.Any], typing.Callable]] = None
243       ) -> typing.Union[Image.Image, None]:
244           if lastDrawing is None:
245               lastDrawing = self.lastDrawing
246   
247           if afterDrawing is None:
248               afterDrawing = self.afterDrawing
249   
250           self.logic()
251   
252           self.update()
253   
254           self.screen.fill((0, 0, 0) if screenFillColor is None else screenFillColor)
255   
256           for element in lastDrawing:
257               if type(element) == list:
258                   getattr(pygame.draw, element[0])(*element[1])
259   
260               else:
261                   element()
262   
263           self.render()
264   
265           for element in afterDrawing:
266               if type(element) == list:
267                   getattr(pygame.draw, element[0])(*element[1])
268   
269               else:
270                   element()
271   
272           if self.displayWidth == self.usingWidth and self.displayHeight == self.usingHeight:
273               self.surface.blit(self.screen, (0, 0))
274   
275           else:
276               self.surface.blit(pygame.transform.scale(self.screen, (self.displayWidth, self.displayHeight)), (0, 0))
277   
278           if self.autoUpdateScreen:
279               pygame.display.update()
280   
281           self.fpsc += 1
282   
283           self.dt = self.clock.tick(self.fps) / 1000
284   
285           self.lastDrawing = []
286           self.afterDrawing = []
287   
288           if image:
289               return self.getScreenImage()
290   
291           return
292   
293       def start(self) -> None:
294           pygame.display.set_caption(self.name, self.icon)
295   
296           while self.play:
297               self.frame()
298   
299           pygame.quit()
300   
301           sys.exit()
302   
303       def exit(self) -> None:
304           self.play = False
305   
##### engine\classes\animator.py #####
1     from engine.classes.sprite import Sprite
2     from engine.variables import *
3     import typing
4     
5     
6     class Animator:
7         def __init__(self, game, obj: "VObject", data: typing.Dict[str, typing.Any]) -> None:
8             self.game = game
9             self.obj = obj
10     
11            self.groups = {}
12    
13            self.horizontal = False
14            self.vertical = False
15    
16            self.standardSprite = None
17            self.standardGroup = None
18    
19            self.data = data
20    
21            self.animation = None
22    
23        def init(self):
24            self.standardSprite = self.obj.sprite.copy() if self.obj.sprite is not None else None
25            self.standardGroup = None
26    
27            for name, group in self.data["groups"].items():
28                self.groups[name] = {
29                    "settings": group["settings"],
30                    "sprites": group["sprites"],
31    
32                    "nowSprite": 0,
33                    "fpsc": 0
34                }
35                self.groups[name]["settings"]["fpsPerFrame"] = int(self.groups[name]["settings"]["fpsPerFrame"])
36    
37                if group["settings"]["standard"]:
38                    self.standardGroup = name
39    
40            self.animation = self.standardGroup
41    
42            self.updateSpriteAnimation()
43    
44        def updateSpriteAnimation(self):
45            if self.animation is None:
46                return
47    
48            group = self.groups[self.animation]
49    
50            data = group["sprites"][group["nowSprite"]]
51    
52            self.obj.sprite = Sprite(self.game, self.obj, data, *self.obj.sprite.pos.get(), *self.obj.sprite.size.get())
53    
54            self.obj.sprite.flip(self.horizontal, self.vertical)
55    
56        def setAnimation(self, value):
57            if self.animation == value:
58                return
59    
60            self.animation = value
61    
62            if self.animation is not None:
63                self.groups[self.animation]["nowSprite"] = 0
64                self.groups[self.animation]["fpsc"] = 0
65    
66                self.updateSpriteAnimation()
67    
68            else:
69                self.obj.sprite = self.standardSprite.copy() if self.standardSprite is not None else None
70    
71                if self.obj.sprite is not None:
72                    self.obj.sprite.flip(self.horizontal, self.vertical)
73    
74        def runAnimation(self, animation):
75            self.setAnimation(animation)
76    
77        def flipAnimation(self, horizontal, vertical):
78            self.horizontal = horizontal
79            self.vertical = vertical
80    
81        def stopAnimation(self):
82            self.setAnimation(self.standardGroup)
83    
84        def update(self) -> None:
85            if self.animation is None:
86                if self.obj.sprite != self.standardSprite:
87                    self.obj.sprite = self.standardSprite.copy() if self.standardSprite is not None else None
88    
89                    if self.obj.sprite is not None:
90                        self.obj.sprite.flip(self.horizontal, self.vertical)
91    
92                return
93    
94            group = self.groups[self.animation]
95            group["fpsc"] += 1
96    
97            if group["fpsc"] >= group["settings"]["fpsPerFrame"]:
98                max_sprite = len(group["sprites"]) - 1
99    
100                if group["nowSprite"] < max_sprite:
101                   group["nowSprite"] += 1
102   
103               elif group["settings"]["repeat"]:
104                   group["nowSprite"] = 0
105   
106               else:
107                   pass
108   
109               self.updateSpriteAnimation()
110   
111               group["fpsc"] = 0
112   
##### engine\classes\camera.py #####
1     from engine.vector.float import Vec2f
2     
3     from engine.variables import *
4     
5     import math
6     
7     
8     class StaticCamera:
9         def __init__(self, game, x: float, y: float) -> None:
10             self.game = game
11    
12            self.pos = Vec2f(x, y)
13    
14        def __str__(self) -> None:
15            return f"StaticCamera(pos = {self.pos})"
16    
17        def update(self, x: float = None, y: float = None) -> None:
18            self.pos.x = x if x is not None else self.pos.x
19            self.pos.y = y if y is not None else self.pos.y
20    
21        def get(self) -> Vec2f:
22            return self.pos
23    
24        def x(self) -> float:
25            return -self.pos.x
26    
27        def y(self) -> float:
28            return self.pos.y
29    
30    
31    class FocusCamera(StaticCamera):
32        def __init__(self, game, obj: VObject) -> None:
33            StaticCamera.__init__(self, game, 0, 0)
34    
35            self.obj = obj
36    
37            self.update()
38    
39        def __str__(self):
40            return f"FocusCamera(object = {self.obj})"
41    
42        def setFocus(self, obj: VObject):
43            self.obj = obj
44    
45            self.update()
46    
47        def update(self, *args, **kwargs) -> None:
48            # print(self)
49    
50            super().update(
51                self.obj.pos.x + self.obj.hitbox.x + self.obj.hitbox.width // 2 - self.game.usingWidth // 2,
52                -(self.obj.pos.y + self.obj.hitbox.y + self.obj.hitbox.height // 2 - self.game.usingHeight // 2)
53            )
54    
55        def get(self) -> VObject:
56            return self.obj
57    
58    
59    class SmoothingCamera(FocusCamera):
60        pass
61    
##### engine\classes\collision.py #####
1     from engine.functions.loads import loadCollisionFile
2     
3     from engine.functions.cache import cache
4     
5     import pygame
6     
7     
8     class Collision:
9         @staticmethod
10         def rect(x1: float, y1: float, w1: float, h1: float, x2: float, y2: float, w2: float, h2: float) -> bool:
11            return pygame.Rect(x1, y1, w1, h1).colliderect(pygame.Rect(x2, y2, w2, h2))
12    
13        @cache
14        def get(self, group: str) -> dict:
15            out = {}
16    
17            if "Any" in self.collision:
18                for key, value in self.collision["Any"].items():
19                    out[key] = value
20    
21            if group in self.collision:
22                for key, value in self.collision[group].items():
23                    out[key] = value
24    
25            return out
26    
27        def __init__(self, path: str = "") -> None:
28            if path == "":
29                self.collision = {}
30    
31            else:
32                self.collision = loadCollisionFile(path)
33    
##### engine\classes\getUsingObjects.pyx #####
1     from engine.classes.collision import Collision
2     from engine.classes.objects import DynamicObject
3     from engine.variables import *
4     
5     import typing
6     
7     
8     if typing.TYPE_CHECKING:
9         from engine.classes.group import ObjectGroup
10     
11    else:
12        pass
13    
14    
15    cdef class GetUsingObjects:
16        @staticmethod
17        def getUsingObjectsBase(game, group) -> None:
18            dynamics = [obj for obj in group.objects if type(obj) == DynamicObject]
19    
20            for obj in dynamics:
21                GetUsingObjects.getUsingObjectsIteration(game, group.objects, obj)
22    
23        @staticmethod
24        def getUsingObjectsCircle(game, group) -> None:
25            def binaryLeft(objects, distance: float) -> int:
26                cdef int left = 0
27                cdef int right = len(objects) - 1
28                cdef int mid
29    
30                while left < right:
31                    mid = (left + right) // 2
32                    if objects[mid].distance < distance:
33                        left = mid + 1
34    
35                    else:
36                        right = mid
37    
38                return left if objects[left].distance >= distance else 0
39    
40            def binaryRight(objects, distance: float) -> int:
41                cdef int left = 0
42                cdef int right = len(objects) - 1
43                cdef int mid
44    
45                while left < right:
46                    mid = (left + right + 1) // 2
47                    if objects[mid].distance > distance:
48                        right = mid - 1
49    
50                    else:
51                        left = mid
52    
53                return right if objects[right].distance <= distance else len(objects) - 1
54    
55            cdef list dynamicsObjects = []
56    
57            for obj in group.objects:
58                if type(obj) == DynamicObject:
59                    dynamicsObjects.append(obj)
60    
61            game.cash["object_sorted_by_distance"] = sorted(group.objects, key=lambda obj: obj.distance)
62    
63            for obj in dynamicsObjects:
64                l = binaryLeft(game.cash["object_sorted_by_distance"], obj.distance - group.maxLenghtObject)
65                r = binaryRight(game.cash["object_sorted_by_distance"], obj.distance + group.maxLenghtObject) + 1
66    
67                GetUsingObjects.getUsingObjectsIteration(game, game.cash["object_sorted_by_distance"][l:r], obj)
68    
69        @staticmethod
70        def getUsingObjectsSquare(game, group) -> None:
71            def binaryLeft(objects, x: float) -> int:
72                cdef int left = 0
73                cdef int right = len(objects) - 1
74                cdef int mid
75    
76                while left < right:
77                    mid = (left + right) // 2
78                    if objects[mid].pos.x < x:
79                        left = mid + 1
80    
81                    else:
82                        right = mid
83    
84                return left if objects[left].pos.x >= x else 0
85    
86            def binaryRight(objects, x: float) -> int:
87                cdef int left = 0
88                cdef int right = len(objects) - 1
89                cdef int mid
90    
91                while left < right:
92                    mid = (left + right + 1) // 2
93                    if objects[mid].pos.x > x:
94                        right = mid - 1
95    
96                    else:
97                        left = mid
98    
99                return right if objects[right].pos.x <= x else len(objects) - 1
100    
101           cdef list dynamicsObjects = []
102   
103           for obj in group.objects:
104               if type(obj) == DynamicObject:
105                   dynamicsObjects.append(obj)
106   
107           game.cash["object_sorted_by_distance"] = sorted(group.objects, key=lambda obj: obj.pos.x)
108   
109           for obj in dynamicsObjects:
110               resulting = obj.getVectorsPower()
111   
112               l = binaryLeft(game.cash["object_sorted_by_distance"], obj.pos.x - resulting.x - group.maxLenghtObject)
113               r = binaryRight(game.cash["object_sorted_by_distance"], obj.pos.x + resulting.x + group.maxLenghtObject) + 1
114   
115               objectsBefore = game.cash["object_sorted_by_distance"][l:r]
116               objectsAfter = []
117   
118               for before in objectsBefore:
119                   if not (obj.pos.y + obj.hitbox.y + obj.hitbox.height + group.maxLenghtObject < before.pos.y + before.hitbox.y or before.pos.y + before.hitbox.y + before.hitbox.height + group.maxLenghtObject < obj.pos.y + obj.hitbox.y):
120                       objectsAfter.append(before)
121   
122               GetUsingObjects.getUsingObjectsIterationSquare(game, objectsAfter, obj)
123   
124       @staticmethod
125       def getUsingObjectsIteration(game, objects, obj) -> None:
126           game.cash["collisions"][obj.id] = []
127   
128           hitbox = obj.hitbox.copy()
129   
130           hitbox.x -= hitbox.width
131           hitbox.y -= hitbox.height
132   
133           hitbox.width *= 3
134           hitbox.height *= 3
135   
136           for j, second in enumerate(objects):
137               if obj.id == second.id:
138                   continue
139   
140               var = obj.collisions.get(second.group)
141   
142               if var is not None or True:
143                   if True or Collision.rect(second.pos.x + second.hitbox.x, second.pos.y + second.hitbox.y, second.hitbox.width, second.hitbox.height, obj.pos.x + hitbox.x, obj.pos.y + hitbox.y, hitbox.width, hitbox.height):
144                       game.cash["collisions"][obj.id].append({"object": second, "functions": var})
145   
146   
147       @staticmethod
148       def getUsingObjectsIterationSquare(game, objects, obj) -> None:
149           game.cash["collisions"][obj.id] = []
150   
151           for j, second in enumerate(objects):
152               if obj.id == second.id:
153                   continue
154   
155               game.cash["collisions"][obj.id].append({"object": second, "functions": obj.collisions.get(second.group)})
156   
157   
##### engine\classes\group.py #####
1     from engine.classes.objects import DynamicObject
2     
3     from engine.classes.collision import Collision
4     
5     from engine.classes.hitbox import SquareHitbox
6     
7     from engine.classes.sprite import Sprite
8     
9     from engine.functions.alpha import alphaRect
10     
11    from engine.variables import *
12    
13    import typing
14    import pygame
15    import types
16    import math
17    
18    
19    class ParticleGroup:
20        def __init__(self, game, particles: typing.List[VParticle] = None) -> None:
21            if particles is None:
22                particles = []
23    
24            self.game = game
25    
26            self.particles = particles
27    
28        def __len__(self) -> int:
29            return len(self.particles)
30    
31        def add(self, particle: VParticle) -> None:
32            self.particles.append(particle.copy())
33    
34        def remove(self, particle: VObject) -> None:
35            self.particles.remove(particle)
36    
37        def getById(self, id: int) -> VParticle:
38            for particle in self.particles:
39                if particle.id == id:
40                    return particle
41    
42            raise NameError(f"id {id} isn't found")
43    
44        def removeById(self, id: int) -> None:
45            for particle in self.particles:
46                if particle.id == id:
47                    self.particles.remove(particle)
48                    return 0
49    
50            raise IndexError(f"id {id} not found in group")
51    
52        def getByGroup(self, group: str) -> typing.List[VParticle]:
53            return [particle for particle in self.particles if particle.group == group]
54    
55        def update(self):
56            for particle in self.particles:
57                particle.update()
58    
59        def draw(self):
60            px = self.game.camera.x()
61            py = self.game.camera.y()
62    
63            for particle in self.particles:
64                if self.game.width + particle.sprite.width > particle.pos.x + px > -particle.sprite.width and self.game.height + particle.sprite.height > particle.pos.y + py > -particle.sprite.height:
65                    particle.draw(px, py)
66    
67    
68    class ObjectGroup:
69        def __init__(self, game, objects: typing.List[VObject] = None) -> None:
70            if objects is None:
71                objects = []
72    
73            self.game = game
74    
75            self.collisions = Collision()
76    
77            self.objects = []
78    
79            for obj in self.objects:
80                self.add(obj)
81    
82            self.objectById = {}
83            self.objectByGroup = {}
84    
85            self.maxLenghtObject = -INF
86            self.minLenghtObject = +INF
87    
88        def empty(self):
89            self.maxLenghtObject = -INF
90            self.minLenghtObject = +INF
91    
92            for obj in self.objects:
93                self.remove(obj)
94    
95        def add(self, obj: VObject) -> None:
96            self.updateMinLenghtObject(obj)
97            self.updateMaxLenghtObject(obj)
98    
99            if isinstance(obj, DynamicObject):
100                self.objects.insert(0, obj)
101   
102           else:
103               self.objects.append(obj)
104   
105           self.objectById[obj.id] = obj
106   
107           if obj.group not in self.objectByGroup:
108               self.objectByGroup[obj.group] = {}
109   
110           self.objectByGroup[obj.group][obj.id] = obj
111   
112       def remove(self, obj: VObject) -> None:
113           self.objects.remove(obj)
114   
115           if obj.id in self.objectById:
116               self.objectById.pop(obj.id)
117   
118           if obj.id in self.objectByGroup[obj.group]:
119               self.objectByGroup[obj.group].pop(obj.id)
120   
121       def getById(self, id: int) -> VObject:
122           return self.objectById.get(id)
123   
124       def removeByGroup(self, group: str) -> None:
125           if group not in self.objectByGroup:
126               return
127   
128           objects = list(self.objectByGroup[group].values())
129   
130           for obj in objects:
131               self.remove(obj)
132   
133       def removeById(self, id: int) -> None:
134           if id not in self.objectById:
135               return
136   
137           self.remove(self.objectById[id])
138   
139       def getByGroup(self, group) -> typing.List[VObject]:
140           return [element for element in self.objectByGroup[group].values()]
141   
142       def updateMinLenghtObject(self, obj: VObject) -> None:
143           self.minLenghtObject = min(self.minLenghtObject, obj.hitbox.width + obj.hitbox.height)
144   
145       def updateMaxLenghtObject(self, obj: VObject) -> None:
146           self.maxLenghtObject = max(self.maxLenghtObject, obj.hitbox.width + obj.hitbox.height)
147   
148       def update(self) -> None:
149           right = [obj for obj in self.objects if not hasattr(obj, "getVectorsPower") or obj.getVectorsPower().x >= 0]
150           left = [obj for obj in self.objects if hasattr(obj, "getVectorsPower") and obj.getVectorsPower().x < 0]
151   
152           right.sort(key=lambda x: x.pos.y)
153           left.sort(key=lambda x: x.pos.y)
154   
155           for obj in right + left:
156               obj.update()
157   
158       def draw(self) -> None:
159           self.game.camera.update()
160   
161           px = self.game.camera.x()
162           py = self.game.camera.y()
163   
164           for obj in sorted(self.objects, key=lambda x: x.layer):
165               obj.draw(px, py)
166   
167               """
168               sprite = None
169   
170               if obj.sprite is not None:
171                   if type(obj.sprite) == Sprite:
172                       sprite = obj.sprite.get()
173   
174                   elif type(obj.sprite) == list:
175                       alphaRect(self.game.screen, obj.sprite, SquareHitbox([obj.pos.x, obj.pos.y, obj.hitbox.width, obj.hitbox.height]))
176   
177                       continue
178   
179                   elif type(obj.sprite) == types.FunctionType:
180                       obj.sprite()
181   
182                       continue
183   
184                   else:
185                       sprite = obj.sprite.get(obj)
186   
187               if not obj.invisible or self.game.forcedViewObject:
188                   if obj.sprite is not None and sprite is not None and type(obj.sprite) != list:
189                       # obj.sprite.pos.x = 0
190                       # obj.sprite.pos.y = 0
191   
192                       # print(obj.sprite.pos)
193   
194                       if self.game.usingWidth + 200 > obj.pos.x + obj.sprite.pos.x + px > -200 and self.game.usingHeight + 200 > obj.pos.y + obj.sprite.pos.y + py > -200:
195                           self.game.screen.blit(sprite, (obj.pos.x + obj.sprite.pos.x + px, obj.pos.y + obj.sprite.pos.y + py))
196   
197               if self.game.debug or (obj.group.startswith("__") and obj.group.endswith("__") and not obj.group == "__debug_unvisiable__"):
198                   pygame.draw.rect(
199                       self.game.screen, (255, 0, 0) if "debug_color" not in obj.specials else obj.specials["debug_color"],
200                       (math.trunc(obj.pos.x) + obj.hitbox.x + px, math.trunc(obj.pos.y) + obj.hitbox.y + py, obj.hitbox.width, obj.hitbox.height), 1
201                   )
202   
203               if self.game.debug and type(obj) == DynamicObject:
204                   moving = obj.getVectorsPower() * 6
205   
206                   # print(moving)
207   
208                   pygame.draw.line(
209                       self.game.screen, (255, 0, 0) if "debug_color" not in obj.specials else obj.specials["debug_color"],
210                       (px + obj.pos.x + obj.hitbox.x + obj.hitbox.width / 2, py + obj.pos.y + obj.hitbox.y + obj.hitbox.height / 2), (px + obj.pos.x + obj.hitbox.x + obj.hitbox.width / 2 + moving.x, py + obj.pos.y + obj.hitbox.y + obj.hitbox.height / 2 + moving.y), 1
211                   )
212               """
213   
##### engine\classes\hitbox.pyx #####
1     from engine.vector.float import Vec4f
2     from engine.vector.int import Vec4i
3     
4     import typing
5     
6     
7     cdef class SquareHitbox:
8         cdef public int x, y, width, height
9     
10         def __init__(self, hitbox: Union[list, tuple, Vec4f, Vec4i]):
11            if isinstance(hitbox, (list, tuple)):
12                pass
13    
14            else:
15                hitbox = hitbox.get()
16    
17            self.x = int(hitbox[0])
18            self.y = int(hitbox[1])
19            self.width = int(hitbox[2])
20            self.height = int(hitbox[3])
21    
22        def __str__(self) -> str:
23            return f"SquareHitbox({self.x}, {self.y}, {self.width}, {self.height})"
24    
25        def __repr__(self) -> str:
26            return f"SquareHitbox({self.x}, {self.y}, {self.width}, {self.height})"
27    
28        def __getattr__(self, name):
29            if name == "x":
30                return int(self.x)
31    
32            elif name == "y":
33                return int(self.y)
34    
35            if name == "width":
36                return int(self.width)
37    
38            elif name == "height":
39                return int(self.height)
40    
41            else:
42                return super().__getattr__(name)
43    
44        def contains(self, obj: "SquareHitbox") -> bool:
45            return self.x <= obj.x < self.x + self.width and self.y <= obj.y < self.y + self.height
46    
47        def get(self) -> list:
48            return [int(self.x), int(self.y), int(self.width), int(self.height)]
49    
50        def copy(self) -> "SquareHitbox":
51            return SquareHitbox(self.get())
52    
##### engine\classes\objects.pyx #####
1     from libc.math cimport sqrt, sin, cos
2     
3     from engine.classes.collision import Collision
4     
5     from engine.classes.hitbox import SquareHitbox
6     
7     from engine.classes.sprite import Sprite
8     
9     from engine.vector.angle import AngleVector
10     
11    from engine.vector.float import Vec2f, Vec4f
12    from engine.vector.int import Vec2i, Vec4i
13    
14    from engine.functions.alpha import alphaRect
15    from engine.ui.text import print_text, get_font, get_ttf
16    
17    from engine.variables import *
18    
19    import pygame
20    import typing
21    import random
22    import typing
23    import math
24    
25    
26    def hex_to_rgb(color: str) -> typing.List[int]:
27        color = color.lstrip('#')
28        return list(int(color[i:i+2], 16) for i in (0, 2, 4))
29    
30    
31    cdef class StaticObject:
32        cdef public object game
33        cdef public object procesionPos
34        cdef public object pos
35        cdef public object hitbox
36        cdef public int layer
37        cdef public object sprite
38        cdef public float distance
39        cdef public int mass
40        cdef public int id
41        cdef public str group
42        cdef public dict variables
43        cdef public dict specials
44        cdef public object collisions
45        cdef public bint invisible
46        cdef public object animator
47    
48        def __init__(
49            self, game: object,
50            pos: typing.Union[typing.List[float], Vec2f, Vec2i],
51            hitbox: typing.Union[SquareHitbox, typing.List[float], Vec4f, Vec4i],
52            sprite: VSprite = None,
53            group: str = None,
54            mass: int = 1000,
55            layer: int = 0,
56            id: int = None,
57            invisible: bool = False,
58            animator: typing.Any = None,
59            variables: typing.Dict[str, typing.Any] = None,
60            specials: typing.Dict[str, typing.Any] = None,
61            *args, **kwargs
62        ) -> None:
63            if variables is not None:
64                self.variables = variables
65    
66            else:
67                self.variables = {}
68    
69            if specials is not None:
70                self.specials = specials
71    
72            else:
73                self.specials = {}
74    
75            self.game = game
76            self.collisions = self.game.objects.collisions.get(group)
77    
78            if id is None:
79                self.id = random.randint(1, 1000000000)
80    
81            else:
82                self.id = id
83    
84            self.group = group
85            self.procesionPos = Vec2f(0, 0)
86            self.pos = pos if type(pos) == Vec2f else Vec2f(*pos)
87            self.hitbox = hitbox if type(hitbox) == SquareHitbox else SquareHitbox(hitbox)
88            self.mass = mass
89            self.layer = layer
90            self.invisible = invisible
91            self.sprite = sprite if type(sprite) != list else Sprite(self.game, self, *sprite)
92            self.distance = sqrt(self.pos.x ** 2 + self.pos.y ** 2)
93            self.animator = animator
94    
95        def __str__(self):
96            return f"StaticObject(id = {self.id} pos = {self.pos})"
97    
98        def __repr__(self):
99            return f"StaticObject(id = {self.id} pos = {self.pos})"
100    
101       def update(self, collisions: typing.List["VObject"] = None) -> None:
102           if self.animator is not None:
103               self.animator.update()
104   
105           self.collision(0, 0, True)
106   
107       def move(self, x: float = 0, y: float = 0):
108           y = 0 if abs(y) < FLOAT_PRECISION else y
109           x = 0 if abs(x) < FLOAT_PRECISION else x
110   
111           self.procesionPos.x += x
112           self.procesionPos.y += y
113   
114           x = int(self.procesionPos.x)
115           y = int(self.procesionPos.y)
116   
117           self.procesionPos.x -= x
118           self.procesionPos.y -= y
119   
120           if x == 0 and y == 0:
121               return 0
122   
123           self.game.doCollisionsUpdate = max(self.game.doCollisionsUpdate, x != 0 or y != 0)
124   
125           collisions = self.game.cash["collisions"][self.id] if self.id in self.game.cash["collisions"] else []
126   
127           step = math.ceil(abs(x) + abs(y))
128   
129           hitbox = self.getEditHitbox(x, y)
130   
131           useX = True
132           useY = True
133   
134           for _ in range(step):
135               for i, obj in enumerate(collisions):
136                   if obj["functions"] is not None and "collision" in obj["functions"]["types"]:
137                       if self.collision(x, 0):
138                           useX = False
139   
140                       if self.collision(0, y):
141                           useY = False
142   
143               else:
144                   self.pos.x += (abs(x) / step) * (1 if x >= 0 else -1) * useX
145                   self.pos.y += (abs(y) / step) * (1 if y >= 0 else -1) * useY
146   
147           self.pos.x = round(self.pos.x)
148           self.pos.y = round(self.pos.y)
149   
150           self.distance = sqrt(self.pos.x ** 2 + self.pos.y ** 2)
151   
152       def draw(self, px, py):
153           if self.sprite is not None:
154               if self.game.usingWidth + self.sprite.pos.x + self.sprite.size.x > self.pos.x + px > -self.sprite.pos.x - self.sprite.size.x and self.game.usingHeight + self.sprite.pos.y + self.sprite.size.y > self.pos.y + py > -self.sprite.pos.y - self.sprite.size.y:
155                   sprite = self.sprite.get()
156   
157                   if not self.invisible or self.game.forcedViewObject:
158                       if sprite is not None:
159                           if self.game.usingWidth + 200 > self.pos.x + self.sprite.pos.x + px > -200 and self.game.usingHeight + 200 > self.pos.y + self.sprite.pos.y + py > -200:
160                               self.game.screen.blit(sprite, (self.pos.x + self.sprite.pos.x + px, self.pos.y + self.sprite.pos.y + py))
161   
162           if self.game.debug or (self.group.startswith("__") and self.group.endswith("__") and not self.group == "__debug_unvisiable__"):
163               pygame.draw.rect(
164                   self.game.screen, (255, 0, 0) if "debug_color" not in self.specials else self.specials["debug_color"],
165                   (math.trunc(self.pos.x) + self.hitbox.x + px, math.trunc(self.pos.y) + self.hitbox.y + py, self.hitbox.width, self.hitbox.height), 1
166               )
167   
168       def collision(self, x: float = 0, y: float = 0, allowFunctions: bool = False, append: bool = False, filter: typing.Callable = None) -> bool:
169           hitbox = self.getEditHitbox(x, y, append)
170   
171           if self.id not in self.game.cash["collisions"]:
172               return False
173   
174           flag = False
175   
176           for obj in self.game.cash["collisions"][self.id]:
177               if Collision.rect(self.pos.x + hitbox.x, self.pos.y + hitbox.y, hitbox.width, hitbox.height, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height) and (filter is None or filter(obj["object"])):
178                   if allowFunctions:
179                       if obj["functions"] is not None:
180                           for element in obj["functions"]["functions"]:
181                               getattr(self.game.functions, element.replace("function::", "").replace("()", ""))(self.game, self, obj)
182   
183                   if obj["functions"] is not None and "collision" in obj["functions"]["types"]:
184                       if allowFunctions:
185                           flag = True
186   
187                       else:
188                           return True
189   
190           return flag
191   
192       def collisionGetID(self, x: float = 0, y: float = 0, append: bool = False, group: str = None) -> typing.Any:
193           hitbox = self.getEditHitbox(x, y, append)
194   
195           if self.id not in self.game.cash["collisions"]:
196               return [False, -1]
197   
198           for obj in self.game.cash["collisions"][self.id]:
199               if obj["object"].group == group or group is None:
200                   if Collision.rect(self.pos.x + hitbox.x, self.pos.y + hitbox.y, hitbox.width, hitbox.height, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height):
201                       return [True, obj["object"]]
202   
203           return [False, -1]
204   
205       def getEditHitbox(self, x: float = 0, y: float = 0, append: bool = False) -> SquareHitbox:
206           hitbox = self.hitbox.copy()
207   
208           if append:
209               hitbox.x -= 1
210               hitbox.width += 2
211               hitbox.y -= 1
212               hitbox.height += 2
213   
214           if x > 0:
215               hitbox.x += 1
216   
217           elif x < 0:
218               hitbox.x -= 1
219   
220           if y < 0:
221               hitbox.y -= 1
222   
223           elif y > 0:
224               hitbox.y += 1
225   
226           return hitbox
227   
228       def getParameter(self, name: str) -> None:
229           if name == "hitbox":
230               return self.hitbox.get()
231   
232           return getattr(self, name)
233   
234       def setParameter(self, name: str, value: typing.Any) -> None:
235           if name == "hitbox":
236               self.hitbox = SquareHitbox(value)
237   
238           setattr(self, name, value)
239   
240   
241   cdef class DynamicObject(StaticObject):
242       cdef public dict vectors
243       cdef public float gravity
244       cdef public float slidingStep
245   
246       def __init__(
247           self, game: object,
248           pos: typing.Union[typing.List[float], Vec2f],
249           hitbox: typing.Union[SquareHitbox, typing.List[float], Vec4f],
250           sprite: VSprite = None,
251           group: str = None,
252           mass: int = 1000,
253           layer: int = 0,
254           id: int = None,
255           invisible: bool = False,
256           animator: typing.Any = None,
257           gravity: float = 300,
258           slidingStep: float = INF,
259           variables: typing.Dict[str, typing.Any] = None,
260           specials: typing.Dict[str, typing.Any] = None,
261           *args, **kwargs
262       ) -> None:
263           StaticObject.__init__(self, game, pos, hitbox, sprite, group, mass, layer, id, invisible, animator, variables, specials)
264   
265           self.vectors = {
266               "__fall__": AngleVector(0, 0)
267           }
268   
269           self.gravity = gravity
270           self.slidingStep = slidingStep
271   
272       def __str__(self):
273           return f"DynamicObject(id = {self.id} pos = {self.pos})"
274   
275       def __repr__(self):
276           return f"DynamicObject(id = {self.id} pos = {self.pos})"
277   
278       def update(self, collisions: list = None):
279           if collisions is None:
280               collisions = []
281   
282           super().update(collisions)
283   
284           if self.collision(0, -1):
285               pass
286   
287           if self.collision(0, 1):
288               if self.vectors["__fall__"].power > 0:
289                   self.vectors["__fall__"].power = 0
290   
291           else:
292               self.vectors["__fall__"].power += self.gravity / 1000
293   
294           pos = Vec2f()
295           rem = []
296   
297           for name, vector in self.vectors.items():
298               x = vector.power * sin(math.radians(vector.angle))
299               y = vector.power * cos(math.radians(vector.angle))
300   
301               pos.x += x
302               pos.y += y
303   
304               vector.power -= vector.decreaseSpeed
305   
306               # x = max(0, abs(x) - self.slidingStep) * (1 if x >= 0 else -1)
307               # y = max(0, abs(y) - self.gravity / 1000) * (1 if y >= 0 else -1)
308   
309               # vector.power = sqrt(x ** 2 + y ** 2)
310               # vector.angle = math.atan2(y, x)
311   
312               if vector.power <= FLOAT_PRECISION and name != "__fall__":
313                   rem.append(name)
314   
315           for name in rem:
316               self.vectors.pop(name)
317   
318           self.move(pos.x, pos.y)
319   
320       def getObjectStructure(self, x, y, append, phitbox: typing.List[int], now: VObject, visited: typing.Optional[set] = None) -> typing.List[VObject]:
321           if visited is None:
322               visited = set()
323   
324           if now.id in visited:
325               return []
326   
327           visited.add(now.id)
328   
329           hitbox = now.getEditHitbox(x, y, append)
330   
331           objects = []
332   
333           for obj in self.game.cash["collisions"][now.id]:
334               if obj is None or obj["functions"] is None:
335                   continue
336   
337               if (isinstance(obj["object"], DynamicObject) and "collision" in obj["functions"]["types"]):
338                   if Collision.rect(now.pos.x + hitbox.x + phitbox[0], now.pos.y + hitbox.y + phitbox[1], hitbox.width + phitbox[2], hitbox.height + phitbox[3], obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height):
339                       objects.append(obj["object"])
340   
341                       objects.extend(
342                           self.getObjectStructure(
343                               x, y, append, phitbox,
344                               obj["object"], visited
345                           )
346                       )
347   
348           return objects
349   
350       def draw(self, px, py):
351           super().draw(px, py)
352   
353           if self.game.debug:
354               moving = self.getVectorsPower() * 6
355   
356               # print(moving)
357   
358               pygame.draw.line(
359                   self.game.screen, (255, 0, 0) if "debug_color" not in self.specials else self.specials["debug_color"],
360                   (px + self.pos.x + self.hitbox.x + self.hitbox.width / 2, py + self.pos.y + self.hitbox.y + self.hitbox.height / 2), (px + self.pos.x + self.hitbox.x + self.hitbox.width / 2 + moving.x, py + self.pos.y + self.hitbox.y + self.hitbox.height / 2 + moving.y), 1
361               )
362   
363       def collision(self, x: float = 0, y: float = 0, allowFunctions: bool = False, append: bool = False, filter: typing.Callable = None) -> bool:
364           hitbox = self.getEditHitbox(x, y, append)
365   
366           if self.id not in self.game.cash["collisions"]:
367               return False
368   
369           flag = False
370   
371           for obj in self.game.cash["collisions"][self.id]:
372               if Collision.rect(self.pos.x + hitbox.x, self.pos.y + hitbox.y, hitbox.width, hitbox.height, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height) and (filter is None or filter(obj["object"])):
373                   if allowFunctions:
374                       if obj["functions"] is not None:
375                           for element in obj["functions"]["functions"]:
376                               getattr(self.game.functions, element.replace("function::", "").replace("()", ""))(self.game, self, obj)
377   
378                   if obj["functions"] is not None and "collision" in obj["functions"]["types"]:
379                       if isinstance(obj["object"], DynamicObject) and isinstance(self, DynamicObject) and self.group == "player":
380                           right = self.getObjectStructure(x, y, append, [1, 1, 0, -2], self)
381                           left = self.getObjectStructure(x, y, append, [-1, 1, 0, -2], self)
382                           up = self.getObjectStructure(x, y, append, [1, -1, -2, 0], self)
383   
384                           if x > 0 and len(right) >= 1:
385                               right.append(self)
386   
387                               speedX = sum([obj.mass * obj.getVectorsPower().x for obj in right]) / sum([obj.mass for obj in right])
388   
389                               for obj in right:
390                                   obj.moveByAngle(90, speedX - obj.getVectorsPower().x, float(INF))
391   
392                           if x < 0 and len(left) >= 1:
393                               left.append(self)
394   
395                               speedX = sum([obj.mass * obj.getVectorsPower().x for obj in left]) / sum([obj.mass for obj in left])
396   
397                               for obj in left:
398                                   obj.moveByAngle(90, speedX - obj.getVectorsPower().x, float(INF))
399   
400                           if abs(self.getVectorsPower().y) > FLOAT_PRECISION and len(up) >= 1:
401                               up.append(self)
402   
403                               speedY = sum([obj.mass * obj.getVectorsPower().y for obj in up]) / sum([obj.mass for obj in up])
404   
405                               for obj in up:
406                                   if obj.id == self.id:
407                                       continue
408   
409                                   obj.vectors["__fall__"].power = speedY - obj.getVectorsPower().y
410   
411                           """
412                           speedX = (self.mass * self.getVectorsPower().x + obj["object"].mass * obj["object"].getVectorsPower().x) / (self.mass + obj["object"].mass)
413                           speedY = (self.mass * self.getVectorsPower().y + obj["object"].mass * obj["object"].getVectorsPower().y) / (self.mass + obj["object"].mass)
414   
415                           if Collision.rect(self.pos.x + hitbox.x + 1, self.pos.y + hitbox.y + 1, hitbox.width, hitbox.height - 2, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height):
416                               self.moveByAngle(90, speedX - self.getVectorsPower().x)
417                               obj["object"].moveByAngle(90, speedX - obj["object"].getVectorsPower().x)
418   
419                           if Collision.rect(self.pos.x + hitbox.x - 1, self.pos.y + hitbox.y + 1, hitbox.width, hitbox.height - 2, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height):
420                               self.moveByAngle(90, speedX - self.getVectorsPower().x)
421                               obj["object"].moveByAngle(90, speedX - obj["object"].getVectorsPower().x)
422   
423                           if y > 0:
424                               pass
425   
426                           if abs(self.getVectorsPower().y) > FLOAT_PRECISION and Collision.rect(self.pos.x + hitbox.x + 1, self.pos.y + hitbox.y - 1, hitbox.width - 2, hitbox.height, obj["object"].pos.x + obj["object"].hitbox.x, obj["object"].pos.y + obj["object"].hitbox.y, obj["object"].hitbox.width, obj["object"].hitbox.height):
427                               obj["object"].vectors["__fall__"].power = speedY - obj["object"].getVectorsPower().y
428                           """
429   
430                       if allowFunctions:
431                           flag = True
432   
433                       else:
434                           return True
435   
436           return flag
437   
438       def moveByAngle(self, angle: float, speed: float = None, slidingStep: float = None, name: str = "vector", specifical: int = None):
439           id = random.randint(1, 1000000000) if specifical is None else int(specifical)
440   
441           self.vectors[f"{name} ({id})"] = AngleVector(180 - angle, self.speed if speed is None else speed, self.slidingStep if slidingStep is None else slidingStep)
442   
443       def moveByType(self, move: str, power: float = None) -> None:
444           if move == "jump":
445               self.vectors["__fall__"].power = -self.jumpPower if power is None else power
446   
447           else:
448               raise NameError(f"move type {move} is not defined")
449   
450       def getVectorsPower(self) -> Vec2i:
451           pos = Vec2f(0, 0)
452   
453           for name, vector in self.vectors.items():
454               if name.startswith("__") and name.endswith("__"):
455                   continue
456   
457               pos.x += vector.power * sin(math.radians(vector.angle))
458               pos.y += vector.power * cos(math.radians(vector.angle))
459   
460           if pos.y <= FLOAT_PRECISION:
461               pos.x += self.vectors["__fall__"].power * sin(math.radians(self.vectors["__fall__"].angle))
462               pos.y += self.vectors["__fall__"].power * cos(math.radians(self.vectors["__fall__"].angle))
463   
464           pos.x = 0 if abs(pos.x) < FLOAT_PRECISION else pos.x
465           pos.y = 0 if abs(pos.y) < FLOAT_PRECISION else pos.y
466   
467           return pos
468   
469   
470   cdef class Text(StaticObject):
471       cdef public str font
472       cdef public str message
473       cdef public int fontSize
474       cdef public int alpha
475       cdef public str fontColor
476       cdef public object alignment
477       cdef public str vertical
478       cdef public str horizontal
479       cdef public int tx
480       cdef public int ty
481       cdef public int hstep
482       cdef public object fontClass
483   
484       def __init__(
485           self, game: object,
486           pos: typing.Union[typing.List[float], Vec2f, Vec2i],
487           hitbox: typing.Union[SquareHitbox, typing.List[float], Vec4f, Vec4i],
488           group: str = None,
489           layer: int = 0,
490           id: int = None,
491           invisible: bool = False,
492           font: str = "Arial",
493           message: str = "Text",
494           fontSize: int = 13,
495           alpha: int = 255,
496           fontColor: str = "#FFFFFF",
497           alignment: typing.List[bool] = None,
498           variables: typing.Dict[str, typing.Any] = None,
499           specials: typing.Dict[str, typing.Any] = None,
500           *args, **kwargs
501       ) -> None:
502           StaticObject.__init__(self, game, pos, hitbox, None, group, 0, layer, id, invisible, None, variables, specials)
503   
504           if alignment is not None:
505               self.alignment = alignment
506   
507           else:
508               self.alignment = ["center", "center"]
509   
510           self.font = font
511           self.message = message
512           self.fontSize = fontSize
513           self.alpha = alpha
514           self.fontColor = fontColor
515           self.alignment = alignment
516   
517           self.fontClass = get_font(self.font, self.fontSize)
518   
519           self.vertical = alignment[0]
520           self.horizontal = alignment[1]
521   
522           self.hstep = self.fontClass.size("Ag")[1]
523   
524           self.tx = 0
525           self.ty = 0
526   
527       def draw(self, px, py):
528           width, height = self.fontClass.size(self.message)
529   
530           if self.game.usingWidth + width > self.pos.x + px > -width and self.game.usingHeight + height > self.pos.y + py > -height:
531               if not self.invisible or self.game.forcedViewObject:
532                   if self.horizontal == "center":
533                       self.tx = self.hitbox.width / 2 - width / 2
534   
535                   if self.horizontal == "left":
536                       self.tx = 4
537   
538                   if self.horizontal == "right":
539                       self.tx = self.hitbox.width - width - 4
540   
541                   if self.vertical == "center":
542                       self.ty = (self.hitbox.height - self.hstep) / 2
543   
544                   if self.vertical == "up":
545                       self.ty = 2
546   
547                   if self.vertical == "down":
548                       self.ty = self.hitbox.height - self.hstep - 2
549   
550                   print_text(self.game.screen, self.pos.x + self.tx + px, self.pos.y + self.ty + py, self.message, self.fontSize, self.font, self.fontColor, self.alpha)
551   
552           if self.game.debug or (self.group.startswith("__") and self.group.endswith("__") and not self.group == "__debug_unvisiable__"):
553               pygame.draw.rect(
554                   self.game.screen, (255, 0, 0) if "debug_color" not in self.specials else self.specials["debug_color"],
555                   (math.trunc(self.pos.x) + self.hitbox.x + px, math.trunc(self.pos.y) + self.hitbox.y + py, self.hitbox.width, self.hitbox.height), 1
556               )
557   
558   
559   cdef class Field(Text):
560       cdef object out
561       cdef object text
562       cdef str splitSymbol
563   
564       def __init__(
565           self, game: object,
566           pos: typing.Union[typing.List[float], Vec2f, Vec2i],
567           hitbox: typing.Union[SquareHitbox, typing.List[float], Vec4f, Vec4i],
568           group: str = None,
569           layer: int = 0,
570           id: int = None,
571           invisible: bool = False,
572           font: str = "Arial",
573           message: str = "Text",
574           fontSize: int = 13,
575           fontColor: str = "#FFFFFF",
576           alignment: typing.List[bool] = None,
577           variables: typing.Dict[str, typing.Any] = None,
578           specials: typing.Dict[str, typing.Any] = None,
579           *args, **kwargs
580       ) -> None:
581           Text.__init__(self, game, pos, hitbox, group, layer, id, invisible, font, message, fontSize, fontColor, alignment, variables, specials)
582   
583           self.splitSymbol = "ꙮ"
584   
585           self.text = list(self.message)
586   
587           for i in range(len(self.text)):
588               if self.text[i] == " " and self.text[i - 1] not in (" ", "~") and i > 0:
589                   self.text[i] = self.splitSymbol
590   
591           self.text = ("".join(self.text)).split(self.splitSymbol)
592   
593           self.hstep = self.fontClass.size("Ag")[1]
594   
595           self.out = []
596   
597       def draw(self, px, py):
598           if not self.invisible or self.game.forcedViewObject:
599               self.init()
600   
601               if self.vertical == "center":
602                   ty = (self.hitbox.height - len(self.out) * self.hstep) / 2
603   
604               elif self.vertical == "up":
605                   ty = 2
606   
607               elif self.vertical == "down":
608                   ty = self.hitbox.height - len(self.out) * self.hstep - 2
609   
610               else:
611                   raise NameError(f"horizontal {self.horizontal} is not difined")
612   
613               for i, element in enumerate(self.out):
614                   if self.horizontal == "center":
615                       print_text(self.game.screen, self.pos.x + (self.hitbox.width / 2 - self.fontClass.size(element)[0] / 2) + px, self.pos.y + i * self.hstep + ty + py, element, self.fontSize, self.font, self.fontColor, self.alpha)
616   
617                   elif self.horizontal == "left":
618                       print_text(self.game.screen, self.pos.x + 4 + px, self.pos.y + i * self.hstep + ty + py, element, self.fontSize, self.font, self.fontColor, self.alpha)
619   
620                   elif self.horizontal == "right":
621                       print_text(self.game.screen, (self.pos.x + self.hitbox.width) - self.fontClass.size(element)[0] - 4 + px, self.pos.y + i * self.hstep + ty + py, element, self.fontSize, self.font, self.fontColor, self.alpha)
622   
623                   else:
624                       raise NameError(f"horizontal {self.horizontal} is not difined")
625   
626           if self.game.debug or (self.group.startswith("__") and self.group.endswith("__") and not self.group == "__debug_unvisiable__"):
627               pygame.draw.rect(
628                   self.game.screen, (255, 0, 0) if "debug_color" not in self.specials else self.specials["debug_color"],
629                   (math.trunc(self.pos.x) + self.hitbox.x + px, math.trunc(self.pos.y) + self.hitbox.y + py, self.hitbox.width, self.hitbox.height), 1
630               )
631   
632       def init(self) -> None:
633           self.text = list(self.message)
634   
635           for i in range(len(self.text)):
636               if self.text[i] == " " and self.text[i - 1] not in (" ", "~") and i > 0:
637                   self.text[i] = self.splitSymbol
638   
639           self.text = ("".join(self.text)).split(self.splitSymbol)
640   
641           l = 0
642           r = len(self.text) - 1
643   
644           if self.text[0] == "/t":
645               self.out = [" " * 4]
646   
647           else:
648               self.out = [self.text[0]]
649   
650           while l < r:
651               if self.fontClass.size(self.out[-1] + self.text[l + 1] + " ")[0] < self.hitbox.width:
652                   if self.text[l + 1] == "/n":
653                       self.out.append("")
654   
655                   elif self.text[l + 1] == "/t":
656                       self.out[len(self.out) - 1] += " " * 4
657   
658                   elif len(self.out[len(self.out) - 1]) == 0:
659                       self.out[len(self.out) - 1] += f"{self.text[l + 1]}"
660   
661                   else:
662                       self.out[len(self.out) - 1] += f" {self.text[l + 1]}"
663   
664                   l += 1
665   
666               else:
667                   self.out.append("")
668   
669           # self.ay = self.hitbox.height / 2 - (self.fontClass.size("Ag")[1] / 2 * len(self.out))
670   
671           var = (len(self.out) - self.hitbox.height // self.hstep) * self.hstep
672   
673           return var if var > 0 else 0
674   
675   
676   cdef class Button(StaticObject):
677       cdef public str font
678       cdef public str message
679       cdef public int fontSize
680       cdef public int alpha
681       cdef public object fontColor
682       cdef public object ramaColor
683       cdef public object backgroundColor
684       cdef public object alignment
685       cdef public str vertical
686       cdef public str horizontal
687       cdef public int tx
688       cdef public int ty
689       cdef public int hstep
690       cdef public object fontClass
691   
692       def __init__(
693           self, game: object,
694           pos: typing.Union[typing.List[float], Vec2f, Vec2i],
695           hitbox: typing.Union[SquareHitbox, typing.List[float], Vec4f, Vec4i],
696           group: str = None,
697           layer: int = 0,
698           id: int = None,
699           invisible: bool = False,
700           font: str = "Arial",
701           message: str = "Text",
702           fontSize: int = 13,
703           alpha: int = 255,
704           ramaColor: typing.List[str] = ["#000000", "#000000", "#000000"],
705           fontColor: typing.List[str] = ["#FFFFFF", "#FFFFFF", "#FFFFFF"],
706           backgroundColor: typing.List[str] = ["#AAAAAA", "#888888", "#444444"],
707           alignment: typing.List[bool] = None,
708           variables: typing.Dict[str, typing.Any] = None,
709           specials: typing.Dict[str, typing.Any] = None,
710           *args, **kwargs
711       ) -> None:
712           StaticObject.__init__(self, game, pos, hitbox, None, group, 0, layer, id, invisible, None, variables, specials)
713   
714           if alignment is not None:
715               self.alignment = alignment
716   
717           else:
718               self.alignment = ["center", "center"]
719   
720           self.font = font
721           self.message = message
722           self.fontSize = fontSize
723           self.alpha = alpha
724           self.alignment = alignment
725   
726           self.ramaColor = ramaColor
727           self.fontColor = fontColor
728           self.backgroundColor = backgroundColor
729   
730           self.fontClass = get_font(self.font, self.fontSize)
731   
732           self.vertical = alignment[0]
733           self.horizontal = alignment[1]
734   
735           self.hstep = self.fontClass.size("Ag")[1]
736   
737           self.tx = 0
738           self.ty = 0
739   
740       def draw(self, px, py):
741           width, height = self.fontClass.size(self.message)
742   
743           if self.pos.x + px < self.game.mouse[0] < self.pos.x + px + self.hitbox.width:
744               if self.pos.y + py < self.game.mouse[1] < self.pos.y + py + self.hitbox.height:
745                   if pygame.mouse.get_pressed()[0]:
746                       active = 2
747   
748                   else:
749                       active = 1
750   
751               else:
752                   active = 0
753   
754           else:
755               active = 0
756   
757           if not self.invisible or self.game.forcedViewObject:
758               alphaRect(self.game.screen, hex_to_rgb(self.backgroundColor[active]) + [self.alpha], SquareHitbox([self.pos.x + px, self.pos.y + py, self.hitbox.width, self.hitbox.height]))
759               alphaRect(self.game.screen, hex_to_rgb(self.ramaColor[active]) + [self.alpha], SquareHitbox([self.pos.x + px, self.pos.y + py, self.hitbox.width, self.hitbox.height]), 1)
760   
761           if self.game.usingWidth + width > self.pos.x + px > -width and self.game.usingHeight + height > self.pos.y + py > -height:
762               if not self.invisible or self.game.forcedViewObject:
763                   if self.horizontal == "center":
764                       self.tx = self.hitbox.width / 2 - width / 2
765   
766                   if self.horizontal == "left":
767                       self.tx = 4
768   
769                   if self.horizontal == "right":
770                       self.tx = self.hitbox.width - width - 4
771   
772                   if self.vertical == "center":
773                       self.ty = (self.hitbox.height - self.hstep) / 2
774   
775                   if self.vertical == "up":
776                       self.ty = 2
777   
778                   if self.vertical == "down":
779                       self.ty = self.hitbox.height - self.hstep - 2
780   
781                   print_text(self.game.screen, self.pos.x + self.tx + px, self.pos.y + self.ty + py, self.message, self.fontSize, self.font, self.fontColor[active], self.alpha)
782   
783           if self.game.debug or (self.group.startswith("__") and self.group.endswith("__") and not self.group == "__debug_unvisiable__"):
784               pygame.draw.rect(
785                   self.game.screen, (255, 0, 0) if "debug_color" not in self.specials else self.specials["debug_color"],
786                   (math.trunc(self.pos.x) + self.hitbox.x + px, math.trunc(self.pos.y) + self.hitbox.y + py, self.hitbox.width, self.hitbox.height), 1
787               )
788   
##### engine\classes\particles.py #####
1     from engine.classes.sprite import Sprite
2     
3     from engine.vector.float import Vec2f
4     
5     from engine.variables import *
6     from math import *
7     
8     import random
9     import typing
10     
11    
12    class ParticleFunction:
13        """
14        x:      lambda variables, pos, step: x + px (x + add to x (int))
15        y:      lambda variables, pos, step: y + py (y + add to y (int))
16    
17        death:  lambda variables, pos, step: flag (do kill (True or False))
18        resize: lambda variables, pos, step: flag, width, height (do resize (True or False), new image width (int), new image height (int))
19        """
20    
21        def __init__(self, game, functions: typing.Dict[str, typing.Callable] = None, variables: typing.Dict[str, typing.Any] = None) -> None:
22            if functions is None:
23                self.functions = {}
24    
25            else:
26                self.functions = functions
27    
28            if variables is None:
29                self.variables = {}
30    
31            else:
32                self.variables = variables
33    
34            self.game = game
35    
36            if "x" not in self.functions:
37                self.functions["x"] = lambda variables, pos, step: pos.x
38    
39            if "y" not in self.functions:
40                self.functions["y"] = lambda variables, pos, step: pos.y
41    
42            if "death" not in self.functions:
43                self.functions["death"] = lambda variables, pos, step: False
44    
45            if "resize" not in self.functions:
46                self.functions["resize"] = lambda variables, pos, step: (False, 0, 0)
47    
48        def update(self, particle: VParticle) -> None:
49            particle.pos.x = self.functions["x"](self.variables, particle.pos, particle.step)
50            particle.pos.y = self.functions["y"](self.variables, particle.pos, particle.step)
51    
52            if self.functions["death"](self.variables, particle.pos, particle.step):
53                self.game.particles.pop(particle)
54    
55            var = self.functions["resize"](self.variables, particle.pos, particle.step)
56    
57            if var[0]:
58                particle.sprite.resize(var[1], var[2])
59    
60    
61    class ImageParticle:
62        def __init__(
63                self, game, pos: typing.Union[Vec2f, typing.List[float]],
64                sprite: VSprite, function: ParticleFunction, group: str = None
65        ) -> None:
66            self.game = game
67    
68            self.id = random.randint(1, 1000000000)
69    
70            self.pos = pos if type(pos) == Vec2f else Vec2f(*pos)
71    
72            self.function = function
73            self.sprite = sprite
74    
75            self.group = group
76    
77            self.step = 1
78    
79        def copy(self) -> "ImageParticle":
80            return ImageParticle(self.game, Vec2f(*self.pos), self.sprite.copy(), self.function, self.group)
81    
82        def update(self) -> None:
83            self.function.update(self)
84    
85            self.step += 1
86    
87        def draw(self, px: float = 0, py: float = 0) -> None:
88            self.game.screen.blit(self.sprite.get(), (self.pos.x + px, self.pos.y + py))
89    
##### engine\classes\sprite.py #####
1     from engine.vector.float import Vec2f
2     from engine.vector.int import Vec2i
3     
4     import typing
5     import pygame
6     
7     
8     class Sprite:
9         cache = {}
10     
11        def __init__(self, game, obj, *args) -> None:
12            """
13            :param args: path: str,
14                         pos: typing.Union[typing.List[int], typing.Tuple[int], Vec2f] = Vec2f(0, 0),
15                         size: typing.Union[typing.List[int], typing.Tuple[int], Vec2i] = None
16    
17            :param agrs: path: str, x_offset: int, y_offset: int, width: int, height: int
18            """
19    
20            self.game = game
21            self.obj = obj
22    
23            if 0 < len(args) <= 3:
24                path = args[0]
25                pos  = args[1] if len(args) > 1 else Vec2i(0, 0)
26                size = args[2] if len(args) > 2 else None
27    
28            elif len(args) == 5:
29                path = args[0]
30                pos  = Vec2f(args[1], args[2])
31                size = Vec2i(args[3], args[4])
32    
33            else:
34                raise ValueError("invalid number of arguments")
35    
36            try:
37                if type(path) == str:
38                    if path not in self.cache:
39                        self.cache[path] = pygame.image.load(path).convert_alpha()
40    
41                    self.image = self.cache[path]
42    
43                else:
44                    self.image = path
45    
46            except FileNotFoundError:
47                self.image = None
48    
49            self.size = size if type(size) == Vec2i else (Vec2i(*size) if size is not None else None)
50            self.pos = pos if type(pos) == Vec2i else Vec2i(*pos)
51    
52            # print(self.pos)
53    
54            if self.image is not None and self.size is not None:
55                self.width = size.x
56                self.height = size.y
57    
58            else:
59                self.width = -1
60                self.height = -1
61    
62            if self.size is not None and self.image is not None:
63                self.image = pygame.transform.scale(self.image, (
64                    self.width if self.width > 0 else self.image.get_width(),
65                    self.height if self.height > 0 else self.image.get_height()
66                ))
67    
68        def copy(self) -> "Sprite":
69            return Sprite(self.game, self.obj, self.image, self.pos, self.size)
70    
71        def resize(self, width: int, height: int) -> None:
72            self.width, self.height = width, height
73    
74            self.image = pygame.transform.scale(self.image, (self.width, self.height))
75    
76        def flip(self, horizontal: bool = False, vertical: bool = False) -> None:
77            if self.image is None:
78                return
79    
80            self.image = pygame.transform.flip(self.image, horizontal, vertical)
81    
82        def get(self) -> pygame.Surface:
83            return self.image
84    
##### engine\classes\texture.py #####
1     from engine.classes.sprite import Sprite
2     
3     from engine.vector.int import Vec2i
4     
5     from PIL import Image
6     
7     import typing
8     import pygame
9     import math
10     
11    
12    class Texture:
13        def __init__(
14                self, game, path: str,
15                size: typing.Union[typing.List[int], typing.Tuple[int], Vec2i] = None
16        ) -> None:
17            self.game = game
18    
19            self.image = Image.open(path).convert("RGBA")
20    
21            self.size = size if type(size) == Vec2i else (Vec2i(*size) if size is not None else None)
22    
23            if self.size is not None:
24                self.image = self.image.resize((self.size.x, self.size.y))
25    
26            self.width = self.image.width
27            self.height = self.image.height
28    
29        def sprite(self, width: int, height: int) -> Sprite:
30            surface = pygame.Surface((width, height))
31    
32            image = pygame.image.frombytes(
33                self.image.tobytes(), self.image.size, "RGBA"
34            )
35    
36            for i in range(math.ceil(width / self.width)):
37                for j in range(math.ceil(height / self.height)):
38                    surface.blit(image, (i * self.width, j * self.height))
39    
40            return Sprite(self.game, surface)
41    
42        def get(self) -> pygame.sprite.Sprite:
43            return self.image
44    
##### engine\functions\alpha.py #####
1     from engine.classes.hitbox import SquareHitbox
2     from engine.vector.int import Vec4i, Vec3i
3     
4     import typing
5     import pygame
6     
7     
8     def alphaRect(screen, color: typing.Union[Vec4i, Vec3i, typing.List[int]], rect: SquareHitbox, border: int = 0):
9         if type(color) == list and len(color) == 3:
10             color = Vec3i(*color)
11    
12        if type(color) == list and len(color) == 4:
13            color = Vec4i(*color)
14    
15        surface = pygame.Surface((rect.width, rect.height), pygame.SRCALPHA)
16        pygame.draw.rect(surface, color.get(), (0, 0, rect.width, rect.height), border)
17    
18        screen.blit(surface, (rect.x, rect.y))
19    
##### engine\functions\cache.py #####
1     import functools
2     
3     
4     def cache(func):
5         cache = {}
6     
7         @functools.wraps(func)
8         def wrapper(*args, **kwargs):
9             key = args + tuple(kwargs.items())
10             if key not in cache:
11                cache[key] = func(*args, **kwargs)
12    
13            return cache[key]
14    
15        return wrapper
16    
17    
##### engine\functions\loads.py #####
1     import json
2     import ast
3     
4     
5     def loadAnimationFile(path: str) -> dict:
6         out = []
7     
8         using_focus = False
9     
10         with open(path, "r") as file:
11            for line in file.read().split("\n"):
12                if line == "@ focus = True":
13                    using_focus = True
14    
15                    continue
16    
17                if line == "@ focus = False":
18                    using_focus = False
19    
20                    continue
21    
22                if len(line.split()) == 0:
23                    continue
24    
25                var = line.split(" -> ")
26    
27                animation = var[1]
28                condition = var[0]
29    
30                out.append([condition, animation])
31    
32        return using_focus, out
33    
34    
35    def loadSettingFile(game, path: str) -> None:
36        if path == "":
37            return 0
38    
39        with open(path, "r") as file:
40            settings = file.read().split("\n")
41    
42        i = 0
43        while i < len(settings):
44            if settings[i] == "":
45                pass
46    
47            elif settings[i].startswith("project::debug = "):
48                setattr(game, "debug", ast.literal_eval(settings[i].replace("project::debug = ", "")))
49    
50            elif settings[i].startswith("project::width = "):
51                setattr(game, "width", int(settings[i].replace("project::width = ", "")))
52    
53            elif settings[i].startswith("project::height = "):
54                setattr(game, "height", int(settings[i].replace("project::height = ", "")))
55    
56            elif settings[i].startswith("project::fps = "):
57                setattr(game, "fps", int(settings[i].replace("project::fps = ", "")))
58    
59            elif settings[i].startswith("project::name = "):
60                setattr(game, "name", str(settings[i].replace("project::name = ", "")).replace("\"", "").replace("\"", ""))
61    
62            elif settings[i].startswith("project::icon = "):
63                setattr(game, "icon", str(settings[i].replace("project::icon = ", "")).replace("\"", "").replace("\"", ""))
64    
65            elif settings[i].startswith("project::flags = "):
66                end = i
67    
68                var = settings[i].replace("project::flags = ", "")
69    
70                while settings[end].find("}") == -1:
71                    end += 1
72    
73                    var += settings[end]
74    
75                for key, value in json.loads(var):
76                    game.variables[key] = value
77    
78            elif settings[i].startswith("project::variables = "):
79                end = i
80    
81                var = settings[i].replace("project::variables = ", "")
82    
83                while settings[end].find("}") == -1:
84                    end += 1
85    
86                    var += settings[end]
87    
88                for key, value in json.loads(var):
89                    game.variables[key] = value
90    
91            else:
92                pass
93    
94            i += 1
95    
96    
97    def loadCollisionFile(path: str) -> dict:
98        out = {}
99    
100        with open(path, "r") as file:
101           text = (file.read() + "\n").split("\n")
102   
103           for line in text:
104               if len(line.split()) == 0:
105                   continue
106   
107               if line.startswith("$") and line.endswith("$"):
108                   continue
109   
110               first, separator, second, _, *collisions = line.split()
111   
112               collisions = " ".join(collisions)
113               collisions = collisions.replace("{", "").replace("}", "")
114               collisions = collisions.split(", ")
115   
116               if first not in out:
117                   out[first] = {}
118   
119               if second not in out:
120                   out[second] = {}
121   
122               if first not in out[second] and separator in ["<-", "<->"]:
123                   out[second][first] = {"types": [], "functions": []}
124   
125               if second not in out[first] and separator in ["->", "<->"]:
126                   out[first][second] = {"types": [], "functions": []}
127   
128               if separator == "->":
129                   var = []
130   
131                   for element in collisions:
132                       if not element.startswith("function::"):
133                           out[first][second]["types"].append(element)
134   
135                       else:
136                           var.append(element)
137   
138                   out[first][second]["functions"] = var
139   
140               elif separator == "<-":
141                   var = []
142   
143                   for element in collisions:
144                       if not element.startswith("function::"):
145                           out[second][first]["types"].append(element)
146   
147                       else:
148                           var.append(element)
149   
150                   out[second][first]["functions"] = var
151   
152               elif separator == "<->":
153                   var = []
154   
155                   for element in collisions:
156                       if not element.startswith("function::"):
157                           out[second][first]["types"].append(element)
158                           out[first][second]["types"].append(element)
159   
160                       else:
161                           var.append(element)
162   
163                   out[second][first]["functions"] = var
164                   out[first][second]["functions"] = var
165   
166               else:
167                   raise NameError(f"not found separator {separator}")
168   
169       return out
170   
##### engine\profiler.py #####
1     import functools
2     import time
3     import sys
4     
5     PROFILER = {}
6     
7     TIME = time.time()
8     
9     
10     def profile():
11        def decorator(func):
12            @functools.wraps(func)
13            def wrapper(*args, **kwargs):
14                start = time.perf_counter()
15                result = func(*args, **kwargs)
16                end = time.perf_counter()
17    
18                second = int(time.time() - TIME) + 1
19    
20                caller = sys._getframe(1)
21    
22                if func.__name__ not in PROFILER:
23                    PROFILER[func.__name__] = {
24                        "name": func.__name__,
25                        "display": caller.f_code.co_name,
26                        "calls": {
27    
28                        }
29                    }
30    
31                if str(second) not in PROFILER[func.__name__]["calls"]:
32                    PROFILER[func.__name__]["calls"][str(second)] = []
33    
34                PROFILER[func.__name__]["calls"][str(second)].append(f"{end - start:.6f}")
35    
36                return result
37    
38            return wrapper
39    
40        return decorator
41    
42    
43    @profile()
44    def a(a):
45        x = 0
46    
47        for i in range(int(a)):
48            x += 1
49    
50        return x
51    
52    
53    # print(a(1e7))
54    # print(a(3e7))
55    # print(a(1e6))
56    # print(PROFILER)
57    
##### engine\special\console.py #####
1     from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTextEdit, QLineEdit
2     from PyQt5.Qt import QFont
3     from prettytable import PrettyTable
4     
5     import sys
6     import csv
7     
8     
9     class Table:
10         def __init__(self):
11            self.file = "../../profile/out.csv"
12    
13            self.data = []
14            self.now = []
15    
16            self.line = []
17    
18            self.variables = {}
19    
20            self.load()
21    
22            self.clear()
23    
24        def cls(self):
25            for i in range(50):
26                print()
27    
28        def open(self, file):
29            self.file = file
30    
31            self.load()
32    
33        def get_var(self, var):
34            return self.variables[var]
35    
36        def set_var(self, name, value):
37            self.variables[name] = value
38    
39        def add_var(self, name, value):
40            self.variables[name] += value
41    
42        def log_var(self):
43            for item, value in self.variables.items():
44                print(f"{item}: {value} ({type(value)})")
45    
46        def command(self):
47            text = ""
48    
49            while not text.endswith("END"):
50                text += "\n" + input()
51    
52            text = text.replace("END", "")
53    
54            exec(text)
55    
56        def load(self):
57            if self.file is not None:
58                with open(self.file, "r", encoding="utf-8") as file:
59                    reader = csv.reader(file)
60                    for i, row in enumerate(reader):
61    
62                        if i != 0 and len(row) > 3 and row[3].find("e") != -1:
63                            row[3] = "0"
64    
65                        if i != 0 and len(row) > 4 and row[4].find("e") != -1:
66                            row[4] = "0"
67    
68                        try:
69                            row[1] = int(row[1])
70                            row[2] = int(row[2])
71    
72                            row[3] = float(row[3])
73                            row[4] = float(row[4])
74    
75                        except BaseException:
76                            pass
77    
78                        if i == 0:
79                            out = [row[0], "Type", "Effectivity"]
80                            out += row[1:]
81    
82                        else:
83                            out = [row[0], "", 0]
84                            out += row[1:]
85    
86                            if out[0].find("pygame") != -1:
87                                out[1] = "Pygame"
88    
89                            elif out[0].startswith("{") or out[0].startswith("<"):
90                                out[1] = "Python"
91    
92                            elif out[0].find("engine") != -1:
93                                out[1] = "Game Engine 3"
94    
95                            else:
96                                out[1] = "Application"
97    
98                            out[2] = round(1 / (out[5] * 10000), 5) if out[5] > 0.000001 else 10e9
99    
100                        if out[1] != "Python":
101                           self.data.append(out)
102   
103               self.line = list(self.data[0])
104   
105               self.data.pop(0)
106   
107               self.clear()
108   
109       def write(self):
110           table = PrettyTable(self.line)
111   
112           for element in self.now:
113               out = list(element)
114   
115               out[2] = "INF" if out[2] == 10e9 else str(out[2])
116   
117               while len(out) > len(self.line):
118                   out[-2] = out[-2] + " " + out[-1]
119                   out.pop(-1)
120   
121               while len(out) < len(self.line):
122                   out.append("")
123   
124               table.add_row(out)
125   
126           return table.get_string()
127   
128       def clear(self):
129           self.now = list(self.data)
130   
131       def func(self, function):
132           out = []
133   
134           for element in self.now:
135               if function(element):
136                   out.append(element)
137   
138           self.now = list(out)
139   
140       def sort(self, function):
141           self.now.sort(key=function)
142   
143   
144   class Console(QWidget):
145       def __init__(self):
146           super().__init__()
147           self.initUI()
148   
149           self.table = Table()
150   
151           self.console.setFont(QFont("courier", 11))
152           self.command_line.setFont(QFont("courier", 11))
153   
154           self.console.setLineWrapMode(QTextEdit.NoWrap)
155           self.console.setText(self.table.write())
156   
157       def initUI(self):
158           self.command_line = QLineEdit()
159           self.console = QTextEdit()
160   
161           self.layout = QVBoxLayout()
162           self.layout.addWidget(self.console)
163           self.layout.addWidget(self.command_line)
164   
165           self.setLayout(self.layout)
166   
167           self.command_line.returnPressed.connect(self.on_return_pressed)
168   
169       def on_return_pressed(self):
170           command = self.command_line.text()
171           self.command_line.clear()
172   
173           if command.startswith("data.sort"):
174               try:
175                   exec(f"self.table.sort({command.replace('data.sort(', '').replace(')', '')})")
176   
177               except Exception as exc:
178                   print(exc)
179   
180               self.console.setText(self.table.write())
181   
182           if command.startswith("data.function"):
183               try:
184                   exec(f"self.table.sort({command.replace('data.function(', '').replace(')', '')})")
185   
186               except Exception as exc:
187                   print(exc)
188   
189               self.console.setText(self.table.write())
190   
191   
192   def main():
193       app = QApplication(sys.argv)
194   
195       console = Console()
196       console.show()
197   
198       sys.exit(app.exec_())
199   
200   
201   if __name__ == '__main__':
202       main()
203   
##### engine\special\table.py #####
1     from prettytable import PrettyTable
2     
3     import csv
4     
5     
6     class Table:
7         def __init__(self):
8             self.file = None
9     
10             self.data = []
11            self.now = []
12    
13            self.line = []
14    
15            self.variables = {}
16    
17            self.clear()
18    
19        def cls(self):
20            for i in range(50):
21                print()
22    
23        def open(self, file):
24            self.file = file
25    
26            self.load()
27    
28        def get_var(self, var):
29            return self.variables[var]
30    
31        def set_var(self, name, value):
32            self.variables[name] = value
33    
34        def add_var(self, name, value):
35            self.variables[name] += value
36    
37        def log_var(self):
38            for item, value in self.variables.items():
39                print(f"{item}: {value} ({type(value)})")
40    
41        def command(self):
42            text = ""
43    
44            while not text.endswith("END"):
45                text += "\n" + input()
46    
47            text = text.replace("END", "")
48    
49            exec(text)
50    
51        def load(self):
52            if self.file is not None:
53                with open(self.file, "r", encoding="utf-8") as file:
54                    reader = csv.reader(file)
55                    for row in reader:
56                        self.data.append(row)
57    
58                self.line = list(self.data[0])
59    
60                self.data.pop(0)
61    
62                self.clear()
63    
64        def write(self):
65            table = PrettyTable(self.line)
66    
67            for element in self.now:
68                out = list(element)
69    
70                while len(out) > len(self.line):
71                    out[-2] = out[-2] + " " + out[-1]
72                    out.pop(-1)
73    
74                while len(out) < len(self.line):
75                    out.append("")
76    
77                table.add_row(out)
78    
79            print(table.get_string())
80    
81        def clear(self):
82            self.now = list(self.data)
83    
84        def func(self, function):
85            out = []
86    
87            for element in self.now:
88                if function(element):
89                    out.append(element)
90    
91            self.now = list(out)
92    
93        def sort(self, function):
94            self.now.sort(key=function)
95    
96    
97    if __name__ == "__main__":
98        data = Table()
99    
100        while True:
101           try:
102               exec(input(">>> "))
103   
104           except Exception as exc:
105               print(exc)
106   
##### engine\ui\button.py #####
1     from engine.ui.text import Label, center_print_text
2     
3     from engine.classes.texture import Texture
4     from engine.classes.sprite import Sprite
5     
6     from engine.classes.hitbox import SquareHitbox
7     
8     from engine.vector.float import Vec4f
9     from engine.vector.int import Vec3i, Vec4i
10     
11    from engine.functions.alpha import alphaRect
12    
13    import typing
14    import pygame
15    
16    
17    class Button:
18        def __init__(
19            self, game,
20    
21            rect: typing.Union[Vec4f, SquareHitbox, typing.List[float]],
22    
23            base: typing.Union[typing.List[typing.Union[Texture, Sprite]], Texture, Sprite, typing.List[int], Vec3i, Vec4i],
24            mouse: typing.Union[typing.List[typing.Union[Texture, Sprite]], Texture, Sprite, typing.List[int], Vec3i, Vec4i],
25            click: typing.Union[typing.List[typing.Union[Texture, Sprite]], Texture, Sprite, typing.List[int], Vec3i, Vec4i],
26    
27            frame: typing.Union[Sprite, typing.List[int], Vec3i, Vec4i] = None,
28    
29            text: Label = None,
30    
31            function: typing.Callable = None
32        ) -> None:
33            self.game = game
34    
35            self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
36    
37            if (type(base) == list and type(base[0]) == int) or type(base) in (Vec3i, Vec4i):
38                self.base = Vec4i(*base)
39    
40            else:
41                self.base = base if type(base) == list else [base]
42    
43                for i, element in enumerate(self.base):
44                    if type(element) == Texture:
45                        self.base[i] = element.sprite(self.rect.width, self.rect.height)
46    
47            if (type(mouse) == list and type(mouse[0]) == int) or type(mouse) in (Vec3i, Vec4i):
48                self.mouse = Vec4i(*mouse)
49    
50            else:
51                self.mouse = mouse if type(mouse) == list else [mouse]
52    
53                for i, element in enumerate(self.mouse):
54                    if type(element) == Texture:
55                        self.mouse[i] = element.sprite(self.rect.width, self.rect.height)
56    
57            if (type(click) == list and type(click[0]) == int) or type(click) in (Vec3i, Vec4i):
58                self.click = Vec4i(*click)
59    
60            else:
61                self.click = click if type(click) == list else [click]
62    
63                for i, element in enumerate(self.click):
64                    if type(element) == Texture:
65                        self.click[i] = element.sprite(self.rect.width, self.rect.height)
66    
67            self.frame = (Vec4i(*frame) if type(frame) != Sprite else frame) if frame is not None else frame
68    
69            self.text = text if text is not None else Label(game, 0, 0, 0, 0, "")
70    
71            self.active = None
72    
73            self.function = function
74    
75        def update(self) -> None:
76            pass
77    
78        def draw(self, x: int = None, y: int = None) -> None:
79            if x is None:
80                x = self.rect.x
81    
82            if y is None:
83                y = self.rect.y
84    
85            if x < self.game.mouse[0] < x + self.rect.width:
86                if y < self.game.mouse[1] < y + self.rect.height:
87                    if self.game.click[0]:
88                        if self.function is not None:
89                            self.function()
90    
91                    elif pygame.mouse.get_pressed()[0]:
92                        self.active = self.click
93    
94                    else:
95                        self.active = self.mouse
96    
97                else:
98                    self.active = self.base
99    
100            else:
101               self.active = self.base
102   
103           pygame.draw.rect(self.game.screen, (255, 0, 0), [x, y, self.rect.width, self.rect.height])
104   
105           if type(self.active[0]) == Sprite:
106               for element in self.active:
107                   self.game.screen.blit(element.get(), (x, y))
108   
109           else:
110               alphaRect(self.game.screen, self.active, SquareHitbox([x, y, self.rect.width, self.rect.height]))
111   
112           if self.frame is not None:
113               alphaRect(self.game.screen, self.frame, self.rect, 1)
114   
115           if self.text is not None:
116               self.text.draw(x, y)
117   
##### engine\ui\layout.py #####
1     from engine.classes.hitbox import SquareHitbox
2     from engine.vector.int import Vec4i
3     
4     from engine.variables import *
5     
6     
7     class Layout:
8         def __init__(
9                 self, game, rect: typing.Union[Vec4i, SquareHitbox, typing.List[int]],
10                 objects: VGUIObject
11        ):
12            self.game = game
13    
14            self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
15    
16            self.objects = objects
17    
18        def update(self):
19            for obj in self.objects:
20                obj.update()
21    
22        def draw(self, x: float = None, y: float = None):
23            if x is None:
24                x = self.rect.x
25    
26            if y is None:
27                y = self.rect.y
28    
29            for obj in self.objects:
30                obj.update()
31                obj.draw(x + obj.rect.x, y + obj.rect.y)
32    
##### engine\ui\lbutton.py #####
1     from engine.ui.text import Label, TextField
2     
3     from engine.classes.sprite import Sprite
4     
5     from engine.classes.hitbox import SquareHitbox
6     
7     from engine.vector.float import Vec4f
8     from engine.vector.int import Vec3i, Vec4i
9     
10     from engine.functions.alpha import alphaRect
11    
12    import typing
13    import pygame
14    
15    
16    class Button:
17        def __init__(
18                self, game,
19                base: typing.Union[Sprite, Vec3i, typing.List[int]],
20                mouse: typing.Union[Sprite, Vec3i, typing.List[int]],
21                click: typing.Union[Sprite, Vec3i, typing.List[int]],
22    
23                rect: typing.Union[Vec4f, SquareHitbox, typing.List[float]],
24    
25                text: typing.Union[typing.Callable, Label, TextField] = None,
26    
27                frame: typing.Union[Sprite, Vec3i, typing.List[int]] = None,
28    
29                function: typing.Callable = None
30        ) -> None:
31            self.game = game
32    
33            self.base = (Vec4i(*base) if len(base) == 4 else Vec4i(*base, 255)) if type(base) == tuple or type(base) == list else base
34            self.mouse = (Vec4i(*mouse) if len(mouse) == 4 else Vec4i(*mouse, 255)) if type(mouse) == tuple or type(mouse) == list else mouse
35            self.click = (Vec4i(*click) if len(click) == 4 else Vec4i(*click, 255)) if type(click) == tuple or type(click) == list else click
36    
37            self.frame = ((Vec4i(*frame) if len(frame) == 4 else Vec4i(*frame, 255)) if type(frame) == tuple or type(frame) == list else frame) if frame is not None else None
38    
39            self.active = None
40    
41            self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
42    
43            self.text = text if text is not None else Label(game, 0, 0, 0, 0, "")
44    
45            self.function = function
46    
47        def update(self) -> None:
48            pass
49    
50        def draw(self, x: int = None, y: int = None) -> None:
51            if x is None:
52                x = self.rect.x
53    
54            if y is None:
55                y = self.rect.y
56    
57            if x < self.game.mouse[0] < x + self.rect.width:
58                if y < self.game.mouse[1] < y + self.rect.height:
59                    if self.game.click[0]:
60                        if self.function is not None:
61                            self.function()
62    
63                    elif pygame.mouse.get_pressed()[0]:
64                        self.active = self.click
65    
66                    else:
67                        self.active = self.mouse
68    
69                else:
70                    self.active = self.base
71    
72            else:
73                self.active = self.base
74    
75            if type(self.active) == Sprite:
76                self.game.screen.blit(self.active.get(), (x, y))
77    
78            else:
79                alphaRect(self.game.screen, self.active, SquareHitbox([x, y, self.rect.width, self.rect.height]))
80    
81            if self.frame is not None:
82                alphaRect(self.game.screen, self.frame, self.rect, 1)
83    
84            if type(self.text) == Label or type(self.text) == TextField:
85                self.text.draw(x, y)
86    
87            else:
88                self.text()
89    
##### engine\ui\surface.py #####
1     from engine.classes.hitbox import SquareHitbox
2     
3     from engine.vector.float import Vec4f
4     from engine.vector.int import Vec3i, Vec4i
5     
6     from engine.functions.alpha import alphaRect
7     
8     import typing
9     
10     
11    class Surface:
12        def __init__(
13            self, game,
14            rect: typing.Union[SquareHitbox, Vec4f, typing.List[int]],
15            color: typing.Union[Vec3i, Vec4i, typing.List[int]]
16        ):
17            self.game = game
18    
19            self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
20            self.color = Vec4i(*color, 100) if type(color) == Vec3i else (Vec4i(*color) if type(color) == list else color)
21    
22        def draw(self):
23            alphaRect(self.game.screen, self.color, self.rect)
24    
##### engine\ui\text.py #####
1     from engine.classes.hitbox import SquareHitbox
2     from engine.vector.int import Vec4i
3     
4     from engine.functions.cache import cache
5     
6     from PIL.ImageFont import FreeTypeFont
7     from PIL import ImageFont
8     
9     import typing
10     import pygame
11    import os
12    
13    BASE_FONT = "engine/fonts/arial.ttf"
14    BASE_FONT_COLOR = (255, 255, 255)
15    
16    
17    @cache
18    def find_system_font(name: str) -> str:
19        return pygame.font.match_font(name)
20    
21    
22    @cache
23    def get_font(font_type: str, font_size: int) -> pygame.font.Font:
24        if os.path.exists(font_type):
25            return pygame.font.Font(font_type, font_size)
26    
27        return pygame.font.SysFont(font_type, font_size)
28    
29    
30    @cache
31    def get_ttf(font_type: str, font_size: int) -> FreeTypeFont:
32        if os.path.exists(font_type):
33            return ImageFont.truetype(font_type, font_size)
34    
35        if find_system_font(font_type.lower()) is not None:
36            ImageFont.truetype(find_system_font(font_type.lower()), font_size)
37    
38        print(f"WARNING: {font_type} is not found")
39    
40        return ImageFont.load_default()
41    
42    
43    def print_text(
44            screen, x: float, y: float, message: str, font_size: int = 20,
45            font_type: str = BASE_FONT, font_color: typing.Tuple[int] = (255, 255, 255), alpha: int = 255
46    ) -> None:
47        font = get_font(font_type, font_size)
48        text = font.render(message, True, font_color)
49        text.set_alpha(alpha)
50    
51        screen.blit(text, (x, y))
52    
53    
54    def center_print_text(
55            screen, rect: SquareHitbox, message: str, font_size: int = 20,
56            font_type: str = BASE_FONT, font_color: typing.Tuple[int] = (0, 0, 0), alpha: int = 255
57    ) -> None:
58        ttf = get_ttf(font_type, font_size)
59    
60        tx = rect.width / 2 - ttf.getbbox(message)[2] / 2
61        ty = rect.height / 2 - ttf.getbbox(message + "AgАр")[3] / 2
62    
63        print_text(screen, rect.x + tx, rect.y + ty, message, font_size, font_type, font_color, alpha)
64    
65    
66    class Label:
67        def __init__(
68                self, game, rect: typing.Union[Vec4i, SquareHitbox, typing.List[float]], text: str, font_size: int = 20,
69                font_type: str = BASE_FONT, font_color: typing.Tuple[int] = BASE_FONT_COLOR, 
70                horizontal: str = "center", vertical: str = "center", alpha: int = 255,
71        ) -> None:
72            self.game = game
73    
74            self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
75    
76            self.text = text
77    
78            self.alpha = alpha
79    
80            self.font_size = font_size
81            self.font_color = font_color
82            self.font_type = font_type
83    
84            self.horizontal = horizontal
85            self.vertical = vertical
86    
87            self.ttf = None
88    
89            self.tx = 0
90            self.ty = 0
91    
92            self.ttf = get_ttf(self.font_type, self.font_size)
93    
94            self.hstep = self.ttf.getbbox("Ag")[3]
95    
96        def update(self) -> None:
97            pass
98    
99        def draw(self, x: int = None, y: int = None) -> None:
100            if x is None:
101               x = self.rect.x
102   
103           if y is None:
104               y = self.rect.y
105   
106           if self.horizontal == "center":
107               self.tx = self.rect.width / 2 - self.ttf.getbbox(self.text)[2] / 2
108   
109           elif self.horizontal == "left":
110               self.tx = 4
111   
112           elif self.horizontal == "right":
113               self.tx = self.rect.width - self.ttf.getbbox(self.text)[2] - 4
114   
115           else:
116               raise NameError(f"type {self.horizontal} is not difined")
117           
118           if self.vertical == "center":
119               py = (self.rect.height - self.hstep) / 2
120   
121           elif self.vertical == "up":
122               py = 2
123   
124           elif self.vertical == "down":
125               py = self.rect.height - self.hstep - 2
126   
127           else:
128               raise NameError(f"horizontal {self.horizontal} is not difined")
129   
130           self.ty = self.rect.height / 2 - self.ttf.getbbox(self.text + "AgАр")[3] / 2
131   
132           print_text(self.game.screen, x + self.tx, y + py, self.text, self.font_size, self.font_type, self.font_color, self.alpha)
133   
134   
135   class TextField:
136       def __init__(
137               self, game, rect: typing.Union[Vec4i, SquareHitbox, typing.List[int]], text: str, font_size: int = 20,
138               font_type: str = BASE_FONT, font_color: typing.Tuple[int] = BASE_FONT_COLOR,
139               horizontal: str = "center", vertical: str = "center", alpha: int = 255
140       ) -> None:
141           self.game = game
142   
143           self.rect = rect if type(rect) == SquareHitbox else SquareHitbox(rect)
144   
145           self.ax = 0
146           self.ay = 0
147   
148           self.text = text
149   
150           self.font_size = font_size
151           self.font_type = font_type
152           self.font_color = font_color
153   
154           self.horizontal = horizontal
155           self.vertical = vertical
156   
157           self.alpha = alpha
158   
159           self.ttf = get_ttf(self.font_type, self.font_size)
160   
161           self.text = self.text.split()
162   
163           self.out = []
164   
165           self.hstep = self.ttf.getbbox("Ag")[3]
166           self.wstep = 0
167   
168           while self.ttf.getbbox((self.wstep + 1) * "_")[2] < self.rect.width:
169               self.wstep += 1
170   
171           self.init()
172   
173       def init(self) -> None:
174           l = 0
175           r = len(self.text) - 1
176   
177           if self.text[0] == "/t":
178               self.out = [" " * 3]
179   
180           else:
181               self.out = [self.text[0]]
182   
183           while l < r:
184               if len(self.out[len(self.out) - 1]) + len(self.text[l + 1]) + 1 < self.wstep:
185                   if self.text[l + 1] == "/n":
186                       self.out.append("")
187   
188                   elif self.text[l + 1] == "/t":
189                       self.out[len(self.out) - 1] += " " * 4
190   
191                   elif len(self.out[len(self.out) - 1]) == 0:
192                       self.out[len(self.out) - 1] += f"{self.text[l + 1]}"
193   
194                   else:
195                       self.out[len(self.out) - 1] += f" {self.text[l + 1]}"
196   
197                   l += 1
198   
199               else:
200                   self.out.append("")
201   
202           self.ay = self.rect.height / 2 - (self.ttf.getbbox("Ag")[3] / 2 * len(self.out))
203   
204           var = (len(self.out) - self.rect.height // self.hstep) * self.hstep
205   
206           return var if var > 0 else 0
207   
208       def update(self) -> None:
209           pass
210   
211       def draw(self, x: int = None, y: int = None, ax: int = 0, ay: int = 0) -> None:
212           self.init()
213   
214           if x is None:
215               x = self.rect.x + ax
216   
217           if y is None:
218               y = self.rect.y + ay
219   
220           if self.vertical == "center":
221               py = (self.rect.height - len(self.out) * self.hstep) / 2
222   
223           elif self.vertical == "up":
224               py = 2
225   
226           elif self.vertical == "down":
227               py = self.rect.height - len(self.out) * self.hstep - 2
228   
229           else:
230               raise NameError(f"horizontal {self.horizontal} is not difined")
231   
232           for i, element in enumerate(self.out):
233               if self.horizontal == "center":
234                   print_text(self.game.screen, x + (self.rect.width / 2 - self.ttf.getbbox(element)[2] / 2), y + i * self.hstep + py, element, self.font_size, self.font_type, self.font_color, self.alpha)
235   
236               elif self.horizontal == "left":
237                   print_text(self.game.screen, x + 4, y + i * self.hstep + py, element, self.font_size, self.font_type, self.font_color, self.alpha)
238   
239               elif self.horizontal == "right":
240                   print_text(self.game.screen, (x + self.rect.width) - self.ttf.getbbox(element)[2] - 4, y + i * self.hstep + py, element, self.font_size, self.font_type, self.font_color, self.alpha)
241   
242               else:
243                   raise NameError(f"horizontal {self.horizontal} is not difined")
244   
##### engine\variables.py #####
1     import typing
2     
3     VObject = typing.TypeVar("VObject")
4     VCamera = typing.TypeVar("VCamera")
5     VSprite = typing.TypeVar("VSprite")
6     
7     VParticle = typing.TypeVar("VParticle")
8     VGUIObject = typing.TypeVar("VGUIObject")
9     
10     INF = int(1e9)
11    FLOAT_PRECISION = 0.0001
12    
13    ARIAL = "engine/fonts/arial.ttf"
14    
##### engine\vector\angle.py #####
1     class AngleVector:
2         def __init__(self, angle: int, power: int, decreaseSpeed: int = 0) -> None:
3             self.angle = angle
4             self.power = power
5     
6             self.decreaseSpeed = decreaseSpeed
7     
8         def __str__(self) -> str:
9             return f"AngleVector(power = {self.power} angle = {self.angle})"
10     
11        def __repr__(self) -> str:
12            return f"AngleVector (power = {self.power} angle = {self.angle})"
13    
14        def rotate(self, angle: int) -> None:
15            self.angle = (self.angle + angle) % 360
16    
17        def update(self) -> None:
18            self.power -= self.decreaseSpeed
19    
##### engine\vector\float.pyx #####
1     cdef class Vec2f:
2         cdef public double x, y
3     
4         def __init__(self, double x=0, double y=0):
5             self.x = x
6             self.y = y
7     
8         def __str__(self):
9             return f"Vec2f({self.x}, {self.y})"
10     
11        def __repr__(self):
12            return f"Vec2f({self.x}, {self.y})"
13    
14        def __add__(self, double other):
15            self.x += other
16            self.y += other
17            return self
18    
19        def __sub__(self, double other):
20            self.x -= other
21            self.y -= other
22            return self
23    
24        def __mul__(self, double other):
25            self.x *= other
26            self.y *= other
27            return self
28    
29        def __truediv__(self, int other):
30            self.x /= other
31            self.y /= other
32            return self
33    
34        def __floordiv__(self, double other):
35            self.x //= other
36            self.y //= other
37            return self
38    
39        def __getitem__(self, int item):
40            if item == 0:
41                return self.x
42    
43            elif item == 1:
44                return self.y
45    
46            else:
47                raise IndexError("index out of range")
48    
49        def __len__(self):
50            return 2
51    
52        def get(self):
53            return (self.x, self.y)
54    
55    
56    cdef class Vec3f:
57        cdef public double x, y, z
58    
59        def __init__(self, double x=0, double y=0, double z=0):
60            self.x = x
61            self.y = y
62            self.z = z
63    
64        def __str__(self):
65            return f"Vec3f({self.x}, {self.y}, {self.z})"
66    
67        def __repr__(self):
68            return f"Vec3f({self.x}, {self.y}, {self.z})"
69    
70        def __add__(self, double other):
71            self.x += other
72            self.y += other
73            self.z += other
74            return self
75    
76        def __sub__(self, double other):
77            self.x -= other
78            self.y -= other
79            self.z -= other
80            return self
81    
82        def __mul__(self, double other):
83            self.x *= other
84            self.y *= other
85            self.z *= other
86            return self
87    
88        def __truediv__(self, int other):
89            self.x /= other
90            self.y /= other
91            self.z /= other
92            return self
93    
94        def __floordiv__(self, double other):
95            self.x //= other
96            self.y //= other
97            self.z //= other
98            return self
99    
100        def __getitem__(self, int item):
101           if item == 0:
102               return self.x
103   
104           elif item == 1:
105               return self.y
106   
107           elif item == 2:
108               return self.z
109   
110           else:
111               raise IndexError("index out of range")
112   
113       def __len__(self):
114           return 3
115   
116       def get(self):
117           return (self.x, self.y, self.z)
118   
119   
120   cdef class Vec4f:
121       cdef public double x, y, z, w
122   
123       def __init__(self, double x=0, double y=0, double z=0, double w=0):
124           self.x = x
125           self.y = y
126           self.z = z
127           self.w = w
128   
129       def __str__(self):
130           return f"Vec4f({self.x}, {self.y}, {self.z}, {self.w})"
131   
132       def __repr__(self):
133           return f"Vec4f({self.x}, {self.y}, {self.z}, {self.w})"
134   
135       def __add__(self, double other):
136           self.x += other
137           self.y += other
138           self.z += other
139           self.w += other
140           return self
141   
142       def __sub__(self, double other):
143           self.x -= other
144           self.y -= other
145           self.z -= other
146           self.w -= other
147           return self
148   
149       def __mul__(self, double other):
150           self.x *= other
151           self.y *= other
152           self.z *= other
153           self.w *= other
154           return self
155   
156       def __truediv__(self, double other):
157           self.x /= other
158           self.y /= other
159           self.z /= other
160           self.w /= other
161           return self
162   
163       def __floordiv__(self, double other):
164           self.x //= other
165           self.y //= other
166           self.z //= other
167           self.w //= other
168           return self
169   
170       def __getitem__(self, int item):
171           if item == 0:
172               return self.x
173   
174           elif item == 1:
175               return self.y
176   
177           elif item == 2:
178               return self.z
179   
180           elif item == 3:
181               return self.w
182   
183           else:
184               raise IndexError("index out of range")
185   
186       def __len__(self):
187           return 4
188   
189       def get(self):
190           return (self.x, self.y, self.z, self.w)
##### engine\vector\int.pyx #####
1     cdef class Vec2i:
2         cdef public int x, y
3     
4         def __init__(self, int x=0, int y=0):
5             self.x = x
6             self.y = y
7     
8         def __str__(self):
9             return f"Vec2i({int(self.x)}, {int(self.y)})"
10     
11        def __repr__(self):
12            return f"Vec2i({int(self.x)}, {int(self.y)})"
13    
14        def __getattr__(self, name):
15            if name == "x":
16                return int(self.x)
17    
18            elif name == "y":
19                return int(self.y)
20    
21            else:
22                return super().__getattr__(name)
23    
24        def __add__(self, int other):
25            self.x += other
26            self.y += other
27            return self
28    
29        def __sub__(self, int other):
30            self.x -= other
31            self.y -= other
32            return self
33    
34        def __mul__(self, int other):
35            self.x *= other
36            self.y *= other
37            return self
38    
39        def __truediv__(self, int other):
40            self.x //= other
41            self.y //= other
42            return self
43    
44        def __floordiv__(self, int other):
45            self.x //= other
46            self.y //= other
47            return self
48    
49        def __getitem__(self, int item):
50            if item == 0:
51                return int(self.x)
52    
53            elif item == 1:
54                return int(self.y)
55    
56            else:
57                raise IndexError("index out of range")
58    
59        def __len__(self):
60            return 2
61    
62        def get(self):
63            return int(self.x), int(self.y)
64    
65    
66    cdef class Vec3i:
67        cdef public int x, y, z
68    
69        def __init__(self, int x=0, int y=0, int z=0):
70            self.x = x
71            self.y = y
72            self.z = z
73    
74        def __str__(self):
75            return f"Vec3i({int(self.x)}, {int(self.y)}, {int(self.z)})"
76    
77        def __repr__(self):
78            return f"Vec3i({int(self.x)}, {int(self.y)}, {int(self.z)})"
79    
80        def __getattr__(self, name):
81            if name == "x":
82                return int(self.x)
83    
84            elif name == "y":
85                return int(self.y)
86    
87            elif name == "z":
88                return int(self.z)
89    
90            else:
91                return super().__getattr__(name)
92    
93        def __add__(self, int other):
94            self.x += other
95            self.y += other
96            self.z += other
97            return self
98    
99        def __sub__(self, int other):
100            self.x -= other
101           self.y -= other
102           self.z -= other
103           return self
104   
105       def __mul__(self, int other):
106           self.x *= other
107           self.y *= other
108           self.z *= other
109           return self
110   
111       def __truediv__(self, int other):
112           self.x //= other
113           self.y //= other
114           self.z //= other
115           return self
116   
117       def __floordiv__(self, int other):
118           self.x //= other
119           self.y //= other
120           self.z //= other
121           return self
122   
123       def __getitem__(self, int item):
124           if item == 0:
125               return int(self.x)
126   
127           elif item == 1:
128               return int(self.y)
129   
130           elif item == 2:
131               return int(self.z)
132   
133           else:
134               raise IndexError("index out of range")
135   
136       def __len__(self):
137           return 3
138   
139       def get(self):
140           return int(self.x), int(self.y), int(self.z)
141   
142   
143   cdef class Vec4i:
144       cdef public int x, y, z, w
145   
146       def __init__(self, int x=0, int y=0, int z=0, int w=0):
147           self.x = x
148           self.y = y
149           self.z = z
150           self.w = w
151   
152       def __str__(self):
153           return f"Vec4i({int(self.x)}, {int(self.y)}, {int(self.z)}, {int(self.w)})"
154   
155       def __repr__(self):
156           return f"Vec4i({int(self.x)}, {int(self.y)}, {int(self.z)}, {int(self.w)})"
157   
158       def __getattr__(self, name):
159           if name == "x":
160               return int(self.x)
161   
162           elif name == "y":
163               return int(self.y)
164   
165           elif name == "z":
166               return int(self.z)
167   
168           elif name == "w":
169               return int(self.w)
170   
171           else:
172               return super().__getattr__(name)
173   
174       def __add__(self, int other):
175           self.x += other
176           self.y += other
177           self.z += other
178           self.w += other
179           return self
180   
181       def __sub__(self, int other):
182           self.x -= other
183           self.y -= other
184           self.z -= other
185           self.w -= other
186           return self
187   
188       def __mul__(self, int other):
189           self.x *= other
190           self.y *= other
191           self.z *= other
192           self.w *= other
193           return self
194   
195       def __truediv__(self, int other):
196           self.x //= other
197           self.y //= other
198           self.z //= other
199           self.w //= other
200           return self
201   
202       def __floordiv__(self, int other):
203           self.x //= other
204           self.y //= other
205           self.z //= other
206           self.w //= other
207           return self
208   
209       def __getitem__(self, int item):
210           if item == 0:
211               return int(self.x)
212   
213           elif item == 1:
214               return int(self.y)
215   
216           elif item == 2:
217               return int(self.z)
218   
219           elif item == 3:
220               return int(self.w)
221   
222           else:
223               raise IndexError("index out of range")
224   
225       def __len__(self):
226           return 4
227   
228       def get(self):
229           return int(self.x), int(self.y), int(self.z), int(self.w)
230   
##### engine\__init__.py #####
1     from engine.vector.int import Vec2i, Vec3i, Vec4i
2     from engine.vector.float import Vec2f, Vec3f, Vec4f
3     from engine.vector.angle import AngleVector
4     from engine.variables import *
5     
6     from engine.classes.hitbox import SquareHitbox
7     
8     from engine.classes.collision import Collision
9     from engine.classes.group import ObjectGroup, ParticleGroup
10     
11    from engine.classes.animator import Animator
12    
13    from engine.classes.texture import Texture
14    from engine.classes.sprite import Sprite
15    
16    from engine.classes import objects
17    from engine.classes import camera
18    
19    from engine.profiler import profile
20    
21    from engine.functions.alpha import alphaRect
22    from engine.functions.cache import cache
23    
24    from engine.classes.particles import ImageParticle, ParticleFunction
25    
26    from engine.ui.surface import Surface
27    from engine.ui.text import Label, TextField, print_text
28    from engine.ui.layout import Layout
29    from engine.ui.button import Button
30    
31    from engine.application import Application
32    
##### scr\code\compiler.py #####
1     import importlib.util
2     
3     import threading
4     import pygame
5     import typing
6     import json
7     import os
8     
9     
10     class Compiler:
11        def __init__(self, project, path: str, nodes: typing.Dict[str, dict], settings: dict, debug: bool = True) -> None:
12            self.project = project
13    
14            self.program = None
15            self.counter = None
16    
17            self.path = path
18    
19            self.nodes = nodes
20    
21            self.tpsc = 0
22            self.tpsNow = 0
23    
24            self.information = {}
25            self.error = False
26    
27            self.settings = settings
28    
29            self.debug = debug
30    
31            self.nodesSortedByTypes = {}
32            self.nodesFunctionsSortedByName = {}
33    
34            self.timer = []
35    
36            try:
37                with open("scr/code/config.json", "r", encoding="utf-8") as file:
38                    self.config = json.load(file)
39    
40            except FileNotFoundError:
41                with open("code/config.json", "r", encoding="utf-8") as file:
42                    self.config = json.load(file)
43    
44            for name, node in self.config["nodes"].items():
45                self.nodesSortedByTypes[node["type"]] = {}
46    
47            for name, node in self.config["nodes"].items():
48                self.nodesSortedByTypes[node["type"]][node["name"]] = []
49    
50            for id, node in self.nodes["objects"].items():
51                self.nodesSortedByTypes[node["type"]][node["name"]].append(id)
52    
53                if node["type"] == "event" and node["name"] == "functionEvent":
54                    if node["inputs"]["name"]["standard"] not in self.nodesFunctionsSortedByName:
55                        self.nodesFunctionsSortedByName[node["inputs"]["name"]["standard"]] = []
56    
57                    self.nodesFunctionsSortedByName[node["inputs"]["name"]["standard"]].append(id)
58    
59            for id, node in self.nodes["objects"].items():
60                for ids, second in self.nodes["objects"].items():
61                    if id == ids:
62                        continue
63    
64                    for name, connector in second["inputs"].items():
65                        if connector["value"] is not None and connector["value"]["id"] == node["id"]:
66                            path = connector["value"]["name"]
67    
68                            if "value" not in node["outputs"][path]:
69                                node["outputs"][path]["value"] = {}
70    
71                            if connector["value"]["id"] == int(id):
72                                node["outputs"][path]["value"][ids] = {"id": int(ids), "name": name}
73    
74            for id, node in self.nodes["objects"].items():
75                for key, value in node["inputs"].items():
76                    if value["value"] is not None:
77                        value["value"]["value"] = None
78    
79            for id, node in self.nodes["objects"].items():
80                for key, value in node["outputs"].items():
81                    if "value" not in value:
82                        value["value"] = {}
83    
84            # print(self.nodesSortedByTypes)
85            # print(dumps(self.nodes, indent=4))
86    
87            self.init()
88    
89        def init(self):
90            text = ""
91    
92            try:
93                os.listdir("scr/code/program")
94    
95            except FileNotFoundError:
96                path = "code/program"
97    
98            else:
99                path = "scr/code/program"
100    
101           for dir in os.listdir(path):
102               for module in os.listdir(f"{path}/{dir}"):
103                   with open(f"{path}/{dir}/{module}", "r", encoding="utf-8") as f:
104                       text = text + f.read() + "\n"
105   
106           thr = threading.Thread(target=lambda: open("compiling.txt", "w", encoding="utf-8").write(text))
107           thr.start()
108   
109           name = "program"
110           spec = importlib.util.spec_from_loader(name, loader=None)
111   
112           self.program = importlib.util.module_from_spec(spec)
113   
114           exec(text, self.program.__dict__)
115   
116           self.event("onStartGame")
117   
118       def queue(self, id: int = None, queue: list = None) -> None:
119           if queue is None:
120               queue = []
121   
122           queue = queue + [id] if id is not None else queue
123   
124           while len(queue) > 0:
125               id = queue[0]
126   
127               if str(id) not in self.nodes["objects"]:
128                   queue.pop(0)
129   
130                   continue
131   
132               if self.debug:
133                   var = getattr(self.program, self.nodes["objects"][str(id)]["name"])(self.project, self, self.path, self.nodes, id, self.settings["variables"])
134   
135               else:
136                   try:
137                       var = getattr(self.program, self.nodes["objects"][str(id)]["name"])(self.project, self, self.path, self.nodes, id, self.settings["variables"])
138   
139                   except Exception as e:
140                       self.error = True
141   
142                       self.information = {
143                           "inputs": self.nodes["objects"][str(id)]["inputs"],
144                           "pos": [self.nodes["objects"][str(id)]["x"], self.nodes["objects"][str(id)]["y"]],
145                           "display": self.nodes["objects"][str(id)]["display"],
146                           "message": e,
147                           "id": id
148                       }
149   
150                       return
151   
152               if type(var) == list:
153                   for element in var:
154                       queue.append(element)
155   
156               elif type(var) == dict:
157                   for element in var["queue"]:
158                       queue.append(element)
159   
160                   for element in var["timer"]:
161                       self.timer.append(element)
162   
163               else:
164                   pass
165   
166               queue.pop(0)
167   
168       def get(self, event: str) -> list:
169           return self.nodesSortedByTypes["event"][event]
170   
171       def event(self, event: str) -> None:
172           for id in self.nodesSortedByTypes["event"][event]:
173               self.queue(id)
174   
175       def start(self, id):
176           self.queue(id)
177   
178       def update(self) -> None:
179           remove = []
180   
181           for i, element in enumerate(self.timer):
182               element["timer"] -= 1
183   
184               if element["timer"] == 0:
185                   element["timer"] = element["tmax"]
186   
187                   element["count"] -= 1
188   
189                   if "index" in self.nodes["objects"][str(element["id"])]["outputs"]:
190                       element["iter"] += 1
191   
192                       for ids, connector in self.nodes["objects"][str(element["id"])]["outputs"]["index"]["value"].items():
193                           self.nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = element["iter"]
194   
195                   self.queue(queue=[element["id"] for element in self.nodes["objects"][str(element["id"])]["outputs"][element["connector"]]["value"].values()])
196   
197               if element["count"] == 0:
198                   if "after" in self.nodes["objects"][str(element["id"])]["outputs"]:
199                       self.queue(queue=[element["id"] for element in self.nodes["objects"][str(element["id"])]["outputs"]["after"]["value"].values()])
200   
201                   remove.append(element)
202   
203           for element in remove:
204               self.timer.remove(element)
205   
206           for id in self.nodesSortedByTypes["event"]["everyFrame"]:
207               if self.project.fpsc % self.nodes["objects"][id]["inputs"]["N"]["standard"] == 0:
208                   self.start(id)
209   
210           self.project.updateCustonCaption(f"FPS = {round(self.project.clock.get_fps())} TPS = {self.tpsNow}")
211   
212       def tps(self, tps: int):
213           self.tpsc += 1
214   
215           self.tpsNow = tps
216   
217           for id in self.nodesSortedByTypes["event"]["everyTick"]:
218               if self.project.fpsc % self.nodes["objects"][id]["inputs"]["N"]["standard"] == 0:
219                   self.start(id)
220   
221       def functionsByName(self, name):
222           return self.nodesFunctionsSortedByName[name]
223   
##### scr\code\program\animation\mirrorAnimation.py #####
1     def mirrorAnimation(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["horizontal"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["horizontal"]["value"]["value"] is not None:
14            horizontal = bool(nodes["objects"][str(id)]["inputs"]["horizontal"]["value"]["value"])
15    
16        else:
17            horizontal = bool(nodes["objects"][str(id)]["inputs"]["horizontal"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["vertical"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["vertical"]["value"]["value"] is not None:
20            vertical = bool(nodes["objects"][str(id)]["inputs"]["vertical"]["value"]["value"])
21    
22        else:
23            vertical = bool(nodes["objects"][str(id)]["inputs"]["vertical"]["standard"])
24    
25        program.objects.getById(ids).animator.flipAnimation(horizontal, vertical)
26    
27        return queue
28    
##### scr\code\program\animation\runAnimation.py #####
1     def runAnimation(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["animation"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["animation"]["value"]["value"] is not None:
14            animation = str(nodes["objects"][str(id)]["inputs"]["animation"]["value"]["value"])
15    
16        else:
17            animation = str(nodes["objects"][str(id)]["inputs"]["animation"]["standard"])
18    
19        program.objects.getById(ids).animator.runAnimation(animation)
20    
21        return queue
22    
##### scr\code\program\animation\stopAnimation.py #####
1     def stopAnimation(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        program.objects.getById(ids).animator.stopAnimation()
14    
15        return queue
16    
##### scr\code\program\another\callFunction.py #####
1     def callFunction(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
5             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
6     
7         else:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
9     
10         if nodes["objects"][str(id)]["inputs"]["params"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["params"]["value"]["value"] is not None:
11            params = list(nodes["objects"][str(id)]["inputs"]["params"]["value"]["value"])
12    
13        else:
14            params = list(nodes["objects"][str(id)]["inputs"]["params"]["standard"])
15    
16        for ids in compiler.functionsByName(name):
17            nodes["objects"][str(ids)]["inputs"]["params"]["standard"] = params
18    
19            queue.append(ids)
20    
21        for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
22            queue.append(name["id"])
23    
24        return queue
25    
##### scr\code\program\another\decodeHolder.py #####
1     HOLDERS_LIST = ["%math", "%local_var", "%global_var"]
2     
3     
4     def replace(s, old, new):
5         pos = s.rfind(old)
6     
7         if pos == -1:
8             return s
9     
10         return str(s[:pos]) + str(new) + str(s[pos + len(old):])
11    
12    
13    class Holders:
14        @staticmethod
15        def math(text, variables):
16            try:
17                ntext = text
18    
19                while ntext.startswith("\'"):
20                    ntext = ntext[1:]
21    
22                while ntext.endswith("\'"):
23                    ntext = ntext[:-1]
24    
25                return eval(ntext)
26    
27            except Exception as e:
28                try:
29                    return eval(text)
30    
31                except Exception as e:
32                    return text
33    
34        @staticmethod
35        def local_var(text, variables):
36            try:
37                return "\'" + variables["locals"][text]["value"] + "\'" if isinstance(variables["locals"][text]["value"], str) else variables["locals"][text]["value"]
38    
39            except:
40                return "null"
41    
42        @staticmethod
43        def global_var(text, variables):
44            try:
45                return "\'" + variables["globals"][text]["value"] + "\'" if isinstance(variables["globals"][text]["value"], str) else variables["globals"][text]["value"]
46    
47            except:
48                return "null"
49    
50    
51    def decodeHolders(text: str, variables: dict):
52        types = []
53    
54        for i, symbol in enumerate(text):
55            if text[i] == "(":
56                valueEndIndex = text.find(")", i, -1)
57    
58                name = text[text.rfind("%", 0, i):i]
59                value = text[i:valueEndIndex + 1]
60    
61                if name not in HOLDERS_LIST:
62                    continue
63    
64                if value == -1:
65                    continue
66    
67                countOpenBracket = value.count("(")
68                countEndBracket = value.count(")")
69    
70                while countOpenBracket - countEndBracket > 0:
71                    valueEndIndex += 1
72    
73                    if text[valueEndIndex] not in (")", "("):
74                        continue
75    
76                    if text[valueEndIndex] == ")":
77                        countEndBracket += 1
78    
79                    else:
80                        countOpenBracket += 1
81    
82                    value = text[i:valueEndIndex + 1]
83    
84                types.append([text.rfind("%", 0, i), value.count("%"), name, value[1:-1]])
85    
86        types.sort(key=lambda x: x[1] * 1e9 + x[0])
87    
88        # for element in types:
89        #     print(*element)
90    
91        # print(types)
92    
93        # print("-->", text)
94    
95        for i, element in enumerate(types):
96            value = getattr(Holders, element[2][1:])(element[3], variables)
97    
98            text = replace(text, f"{element[2]}({element[3]})", value)
99    
100            for elem in types[i:]:
101               elem[3] = elem[3].replace(f"{element[2]}({element[3]})", str(value))
102   
103           # print("-->", text)
104   
105       return text
106   
107   
108   def decodeHolder(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
109       queue = []
110   
111       for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
112           queue.append(name["id"])
113   
114       if nodes["objects"][str(id)]["inputs"]["text"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"] is not None:
115           text = str(nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"])
116   
117       else:
118           text = str(nodes["objects"][str(id)]["inputs"]["text"]["standard"])
119   
120       answer = decodeHolders(text, variables)
121   
122       for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
123           nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
124   
125       return queue
126   
127   
128   """
129   if __name__ == "__main__":
130       import time
131   
132       start = time.time()
133   
134       variables = {"locals": {"123": {"value": '65'}, "1": {"value": 2}}, "globals": {"1": {"value": True}}}
135       text = "%math(%local_var(123) + %local_var(1))"
136   
137       print(decodeHolders(text, variables))
138   
139       print(time.time() - start)
140   """
141   
##### scr\code\program\another\exit_.py #####
1     def exit_(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         program.exit()
8     
9         return queue
10     
##### scr\code\program\another\functionEvent.py #####
1     def functionEvent(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         if nodes["objects"][str(id)]["inputs"]["params"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["params"]["value"]["value"] is not None:
5             params = list(nodes["objects"][str(id)]["inputs"]["params"]["value"]["value"])
6     
7         else:
8             params = list(nodes["objects"][str(id)]["inputs"]["params"]["standard"])
9     
10         for ids, connector in nodes["objects"][str(id)]["outputs"]["params"]["value"].items():
11            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = params
12    
13        for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
14            queue.append(name["id"])
15    
16        return queue
17    
##### scr\code\program\another\getMousePos.py #####
1     import pygame
2     
3     
4     def getMousePos(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         x, y = pygame.mouse.get_pos()
11    
12        for ids, connector in nodes["objects"][str(id)]["outputs"]["x"]["value"].items():
13            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = x
14    
15        for ids, connector in nodes["objects"][str(id)]["outputs"]["y"]["value"].items():
16            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = y
17    
18        return queue
19    
##### scr\code\program\another\getTimePassed.py #####
1     def getTimePassed(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         time_passed = program.dt
8     
9         for ids, connector in nodes["objects"][str(id)]["outputs"]["time_passed"]["value"].items():
10             nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = time_passed
11    
12        return queue
13    
##### scr\code\program\another\getVar.py #####
1     def getVar(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["global"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["global"]["value"]["value"] is not None:
14            gl = nodes["objects"][str(id)]["inputs"]["global"]["value"]["value"]
15    
16        else:
17            gl = nodes["objects"][str(id)]["inputs"]["global"]["standard"]
18    
19        if gl:
20            answer = variables["globals"][name]["value"]
21    
22        else:
23            answer = variables["locals"][path][name]["value"]
24    
25        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
26            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
27    
28        return queue
29    
##### scr\code\program\another\len.py #####
1     def len_(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["element"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"] is not None:
8             if type(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]) == str:
9                 element = eval(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"])
10     
11            else:
12                element = eval(str(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]))
13    
14        else:
15            if type(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]) == str:
16                element = eval(nodes["objects"][str(id)]["inputs"]["element"]["standard"])
17    
18            else:
19                element = eval(str(nodes["objects"][str(id)]["inputs"]["element"]["standard"]))
20    
21        answer = len(element) if type(element) in (list, tuple, dict) else 1
22    
23        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
24            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
25    
26        return queue
27    
##### scr\code\program\another\python.py #####
1     import functools
2     import typing
3     import random
4     import pygame
5     import re
6     
7     
8     if typing.TYPE_CHECKING:
9         def decodeHolders(text, variables):
10             pass
11    
12    else:
13        pass
14    
15    
16    class PythonFunctions:
17        functions = ["decodeHolder", "exit", "getVar", "setVar", "objectsGroup", "random", "writeText", "displayText", "collision", "createObject", "getObjectIDByName", "getObjectPos", "getObjectVar", "jump", "moveObject", "removeObject", "setObjectPos", "setObjectVar", "getResultingVector", "runAnimation", "stopAnimation", "mirrorAnimation", "getMousePos"]
18    
19        @staticmethod
20        def decodeHolder(text, program, variables, path):
21            return decodeHolders(text, variables)
22    
23        @staticmethod
24        def exit(program, variables, path):
25            program.exit()
26    
27        @staticmethod
28        def getVar(name, global_, program, variables, path):
29            if global_:
30                return variables["globals"][name]["value"]
31    
32            else:
33                return variables["locals"][path][name]["value"]
34    
35        @staticmethod
36        def setVar(name, global_, value, program, variables, path):
37            if global_:
38                variables["globals"][name]["value"] = value
39    
40            else:
41                variables["locals"][path][name]["value"] = value
42    
43        @staticmethod
44        def objectsGroup(group, program, variables, path):
45            return program.objects.getByGroup(group)
46    
47        @staticmethod
48        def random(a, b, program, variables, path):
49            return a if a == b else random.randint(a, b)
50    
51        @staticmethod
52        def writeText(text, program, variables, path):
53            answer = ">>> " + str(text).rstrip() + "\n"
54    
55            program.print(answer)
56    
57            print(answer)
58    
59        @staticmethod
60        def displayText(text, x, y, program, variables, path):
61            program.afterDrawing.append(lambda: program.linkEngine.print_text(program.screen, x, y, str(text)))
62    
63        @staticmethod
64        def collision(ids, group, append, program, variables, path):
65            obj = program.objects.getById(ids)
66    
67            answer = obj.collisionGetID(0, 0, append, group) if obj is not None else [False, -1]
68    
69            return answer
70    
71        @staticmethod
72        def createObject(name, x, y, program, variables, path):
73            if not name.endswith(".obj"):
74                name += ".obj"
75    
76            type = program.allObjects[name]["type"]
77            variables = program.allObjects[name]["variables"]
78    
79            variables["pos"] = [x, y]
80    
81            obj = getattr(program.linkEngine.objects, type)(program, **variables)
82    
83            program.objects.add(obj)
84    
85            return obj.id
86    
87        @staticmethod
88        def getObjectIDByName(name, program, variables, path):
89            name = name + ".objc" if not name.endswith(".objc") else name
90    
91            answer = program.objectIDByName[program.scene][name] if name in program.objectIDByName[program.scene] else -1
92    
93            return answer
94    
95        @staticmethod
96        def getObjectPos(ids, program, variables, path):
97            return program.objects.getById(ids).pos.get()
98    
99        @staticmethod
100        def getObjectVar(ids, name, program, variables, path):
101           answer = variables["objects"][program.scene][program.objectNameByID[program.scene][str(ids)]][name]["value"]
102   
103       @staticmethod
104       def jump(ids, program, variables, path):
105           obj = program.objects.getById(int(ids))
106   
107           obj.moveByType("jump")
108   
109       @staticmethod
110       def moveObject(ids, angle, power, program, variables, path):
111           obj = program.objects.getById(int(ids))
112   
113           obj.moveByAngle(angle, power)
114   
115       @staticmethod
116       def removeObject(ids, program, variables, path):
117           program.objects.removeById(ids)
118   
119       @staticmethod
120       def setObjectPos(ids, x, y, program, variables, path):
121           obj = program.objects.getById(int(ids))
122   
123           obj.pos.x = x
124           obj.pos.y = y
125   
126       @staticmethod
127       def setObjectVar(ids, name, value, program, variables, path):
128           variables["objects"][program.scene][program.objectNameByID[program.scene][str(ids)]][name]["value"] = value
129   
130       @staticmethod
131       def getResultingVector(ids, program, variables, path):
132           return program.objects.getById(ids).getVectorsPower().get()
133   
134       @staticmethod
135       def runAnimation(ids, animation, program, variables, path):
136           program.objects.getById(ids).animator.runAnimation(animation)
137   
138       @staticmethod
139       def stopAnimation(ids, animation, program, variables, path):
140           program.objects.getById(ids).animator.stopAnimation()
141   
142       @staticmethod
143       def mirrorAnimation(ids, horizontal, vertical, program, variables, path):
144           program.objects.getById(ids).animator.flipAnimation(horizontal, vertical)
145   
146       @staticmethod
147       def getMousePos(program, variables, path):
148           return pygame.mouse.get_pos()
149   
150       @staticmethod
151       def setObjectParameter(ids, name, value, program, variables, path):
152           program.objects.getById(ids).setParameter(name, value)
153   
154       @staticmethod
155       def getObjectParameter(ids, name, program, variables, path):
156           return program.objects.getById(ids).getParameter(name)
157   
158       @staticmethod
159       def getTimePassed(ids, program, variables, path):
160           return program.dt
161   
162   
163   class PythonCodeExecutor:
164       program = None
165       variables = None
166       path = None
167   
168       contest = {}
169   
170       inited = False
171   
172       @classmethod
173       def init(cls):
174           for func in PythonFunctions.functions:
175               cls.contest[func] = functools.partial(getattr(PythonFunctions, func), program=cls.program, variables=cls.variables, path=cls.path)
176   
177       @classmethod
178       def add(cls, program):
179           if not cls.inited:
180               cls.init()
181   
182           exec(program, cls.contest)
183   
184       @classmethod
185       def run(cls, program, args, kwargs):
186           return cls.contest["run"](program, args=args, kwargs=kwargs)
187   
188   
189   @functools.lru_cache(None)
190   def pythonCheckHaveFunction(text):
191       pattern = r'\bdef\s+run\s*\('
192   
193       match = re.search(pattern, text)
194   
195       return bool(match)
196   
197   
198   def python(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
199       queue = []
200   
201       for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
202           queue.append(name["id"])
203   
204       if nodes["objects"][str(id)]["inputs"]["text"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"] is not None:
205           text = str(nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"])
206   
207       else:
208           text = (str(nodes["objects"][str(id)]["inputs"]["text"]["standard"]))
209   
210       if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
211           list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
212   
213       else:
214           list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
215   
216       if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
217           dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
218   
219       else:
220           dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
221   
222       if PythonCodeExecutor.program is None:
223           PythonCodeExecutor.variables = variables
224           PythonCodeExecutor.program = program
225   
226           PythonCodeExecutor.path = path
227   
228       PythonCodeExecutor.add(text)
229   
230       if pythonCheckHaveFunction(text):
231           listOutput = PythonCodeExecutor.run(program, list_, dict_)
232   
233       else:
234           listOutput = []
235   
236       if listOutput is None:
237           listOutput = []
238   
239       elif not isinstance(listOutput, list):
240           listOutput = [listOutput]
241   
242       else:
243           pass
244   
245       for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
246           nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = listOutput
247   
248       return queue
249   
##### scr\code\program\another\random_.py #####
1     import random
2     
3     
4     def random_(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
11            a = int(nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"])
12    
13        else:
14            a = int(nodes["objects"][str(id)]["inputs"]["a"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
17            b = int(nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"])
18    
19        else:
20            b = int(nodes["objects"][str(id)]["inputs"]["b"]["standard"])
21    
22        answer = a if a == b else random.randint(a, b)
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\another\setVar.py #####
1     def setVar(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["global"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["global"]["value"]["value"] is not None:
14            gl = nodes["objects"][str(id)]["inputs"]["global"]["value"]["value"]
15    
16        else:
17            gl = nodes["objects"][str(id)]["inputs"]["global"]["standard"]
18    
19        try:
20            if nodes["objects"][str(id)]["inputs"]["value"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"] is not None:
21                value = eval(nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"])
22    
23            else:
24                value = eval(nodes["objects"][str(id)]["inputs"]["value"]["standard"])
25    
26        except BaseException:
27            if nodes["objects"][str(id)]["inputs"]["value"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"] is not None:
28                value = nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"]
29    
30            else:
31                value = nodes["objects"][str(id)]["inputs"]["value"]["standard"]
32    
33        if gl:
34            type = variables["globals"][name]["type"]
35    
36        else:
37            type = variables["locals"][path][name]["type"]
38    
39        if type == "number":
40            value = float(value) if float(value) - int(value) != 0 else int(value)
41    
42        if gl:
43            variables["globals"][name]["value"] = value
44    
45        else:
46            variables["locals"][path][name]["value"] = value
47    
48        return queue
49    
##### scr\code\program\event\everyFrame.py #####
1     def everyFrame(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\everyTick.py #####
1     def everyTick(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\forDictElements.py #####
1     def forDictElements(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         timer = []
3         queue = []
4     
5         if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
6             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
7     
8         else:
9             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
10     
11        for key, value in dict_.items():
12            for ids, connector in nodes["objects"][str(id)]["outputs"]["key"]["value"].items():
13                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = key
14    
15            for ids, connector in nodes["objects"][str(id)]["outputs"]["element"]["value"].items():
16                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = value
17    
18            for name in nodes["objects"][str(id)]["outputs"]["iterator"]["value"].values():
19                compiler.queue(name["id"])
20    
21        for name in nodes["objects"][str(id)]["outputs"]["after"]["value"].values():
22            queue.append(name["id"])
23    
24        return {"queue": queue, "timer": timer}
25    
##### scr\code\program\event\forListElements.py #####
1     def forListElements(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         timer = []
3         queue = []
4     
5         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
6             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
7     
8         else:
9             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
10     
11        for i, element in enumerate(list_):
12            for ids, connector in nodes["objects"][str(id)]["outputs"]["index"]["value"].items():
13                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = i
14    
15            for ids, connector in nodes["objects"][str(id)]["outputs"]["element"]["value"].items():
16                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = element
17    
18            for name in nodes["objects"][str(id)]["outputs"]["iterator"]["value"].values():
19                compiler.queue(name["id"])
20    
21        for name in nodes["objects"][str(id)]["outputs"]["after"]["value"].values():
22            queue.append(name["id"])
23    
24        return {"queue": queue, "timer": timer}
25    
##### scr\code\program\event\forObjectsGroup.py #####
1     def forObjectsGroup(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         if nodes["objects"][str(id)]["inputs"]["group"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["group"]["value"]["value"] is not None:
5             group = str(nodes["objects"][str(id)]["inputs"]["group"]["value"]["value"])
6     
7         else:
8             group = str(nodes["objects"][str(id)]["inputs"]["group"]["standard"])
9     
10         """
11        for ids, connector in nodes["objects"][str(id)]["outputs"]["x"]["value"].items():
12            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.x
13        """
14    
15        objects = program.objects.getByGroup(group)
16        n = len(objects)
17    
18        for i, obj in enumerate(objects):
19            for ids, connector in nodes["objects"][str(id)]["outputs"]["id"]["value"].items():
20                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = obj.id
21    
22            for name in nodes["objects"][str(id)]["outputs"]["iterator"]["value"].values():
23                compiler.queue(name["id"])
24    
25        for name in nodes["objects"][str(id)]["outputs"]["after"]["value"].values():
26            queue.append(name["id"])
27    
28        return queue
29    
##### scr\code\program\event\for_.py #####
1     def for_(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         timer = []
3         queue = []
4     
5         if nodes["objects"][str(id)]["inputs"]["n"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["n"]["value"]["value"] is not None:
6             n = int(float(nodes["objects"][str(id)]["inputs"]["n"]["value"]["value"]))
7     
8         else:
9             n = int(float(nodes["objects"][str(id)]["inputs"]["n"]["standard"]))
10     
11        if nodes["objects"][str(id)]["inputs"]["x"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"] is not None:
12            x = int(float(nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"]))
13    
14        else:
15            x = int(float(nodes["objects"][str(id)]["inputs"]["x"]["standard"]))
16    
17        """
18        for ids, connector in nodes["objects"][str(id)]["outputs"]["x"]["value"].items():
19            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.x
20        """
21    
22        if nodes["objects"][str(id)]["inputs"]["n"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["n"]["value"]["value"] is not None:
23            nodes["objects"][str(id)]["inputs"]["n"]["value"]["value"] -= 1
24    
25        if x == 0:
26            for i in range(n):
27                for ids, connector in nodes["objects"][str(id)]["outputs"]["index"]["value"].items():
28                    nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = i
29    
30                for name in nodes["objects"][str(id)]["outputs"]["iterator"]["value"].values():
31                    compiler.queue(name["id"])
32    
33        else:
34            for name in nodes["objects"][str(id)]["outputs"]["iterator"]["value"].values():
35                queue.append(name["id"])
36    
37            for ids, connector in nodes["objects"][str(id)]["outputs"]["index"]["value"].items():
38                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = 0
39    
40            timer.append({"id": id, "count": n - 1, "timer": x, "tmax": x, "connector": "iterator", "iter": 0})
41    
42        return {"queue": queue, "timer": timer}
43    
##### scr\code\program\event\keyboardClick.py #####
1     def keyboardClick(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\keyboardPress.py #####
1     def keyboardPress(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\mouseLeftClick.py #####
1     def mouseLeftClick(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\mouseRightClick.py #####
1     def mouseRightClick(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\event\onStartGame.py #####
1     def onStartGame(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         return queue
8     
##### scr\code\program\logic\ifCollision.py #####
1     def ifCollision(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
5             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
6     
7         else:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
9     
10         if nodes["objects"][str(id)]["inputs"]["group"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["group"]["value"]["value"] is not None:
11            group = nodes["objects"][str(id)]["inputs"]["group"]["value"]["value"]
12    
13        else:
14            group = nodes["objects"][str(id)]["inputs"]["group"]["standard"]
15    
16        if nodes["objects"][str(id)]["inputs"]["append"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["append"]["value"]["value"] is not None:
17            append = (nodes["objects"][str(id)]["inputs"]["append"]["value"]["value"] == True)
18    
19        else:
20            append = (nodes["objects"][str(id)]["inputs"]["append"]["standard"] == True)
21    
22        obj = program.objects.getById(ids)
23    
24        answer = obj.collisionGetID(0, 0, append, group) if obj is not None else [False, -1]
25    
26        if answer[0]:
27            for name in nodes["objects"][str(id)]["outputs"]["path_true"]["value"].values():
28                queue.append(name["id"])
29    
30            for ids, connector in nodes["objects"][str(id)]["outputs"]["id_in_group"]["value"].items():
31                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer[1].id
32    
33        else:
34            for name in nodes["objects"][str(id)]["outputs"]["path_false"]["value"].values():
35                queue.append(name["id"])
36    
37            for ids, connector in nodes["objects"][str(id)]["outputs"]["id_in_group"]["value"].items():
38                nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = -1
39    
40        return queue
41    
##### scr\code\program\logic\if_.py #####
1     OPERATIONS = ["0. ==", "1. !=", "2. <=", "3. >=", "4. <", "5. >"]
2     
3     
4     def if_(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
8             a = nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"]
9     
10         else:
11            a = nodes["objects"][str(id)]["inputs"]["a"]["standard"]
12    
13        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
14            b = nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"]
15    
16        else:
17            b = nodes["objects"][str(id)]["inputs"]["b"]["standard"]
18    
19        if nodes["objects"][str(id)]["inputs"]["operation"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["operation"]["value"]["value"] is not None:
20            operation = int(nodes["objects"][str(id)]["inputs"]["operation"]["value"]["value"])
21    
22        else:
23            operation = int(nodes["objects"][str(id)]["inputs"]["operation"]["standard"])
24    
25        if eval(f"{a} {OPERATIONS[operation][3:]} {b}"):
26            for name in nodes["objects"][str(id)]["outputs"]["path_true"]["value"].values():
27                queue.append(name["id"])
28    
29        else:
30            for name in nodes["objects"][str(id)]["outputs"]["path_false"]["value"].values():
31                queue.append(name["id"])
32    
33        return queue
34    
##### scr\code\program\numbers\divide.py #####
1     import math
2     
3     
4     def divide(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
11            a = float(nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"])
12    
13        else:
14            a = float(nodes["objects"][str(id)]["inputs"]["a"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
17            b = float(nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"])
18    
19        else:
20            b = float(nodes["objects"][str(id)]["inputs"]["b"]["standard"])
21    
22        answer = int(a // b) if math.trunc(round(a / b, 10)) == math.ceil(round(a / b, 10)) else round(a / b, 10)
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\numbers\minus.py #####
1     import math
2     
3     
4     def minus(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
11            a = float(nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"])
12    
13        else:
14            a = float(nodes["objects"][str(id)]["inputs"]["a"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
17            b = float(nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"])
18    
19        else:
20            b = float(nodes["objects"][str(id)]["inputs"]["b"]["standard"])
21    
22        answer = int(a - b) if math.trunc(round(a - b, 10)) == math.ceil(round(a - b, 10)) else round(a - b, 10)
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\numbers\multiply.py #####
1     import math
2     
3     
4     def multiply(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
11            a = float(nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"])
12    
13        else:
14            a = float(nodes["objects"][str(id)]["inputs"]["a"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
17            b = float(nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"])
18    
19        else:
20            b = float(nodes["objects"][str(id)]["inputs"]["b"]["standard"])
21    
22        answer = int(a * b) if math.trunc(round(a * b, 10)) == math.ceil(round(a * b, 10)) else round(a * b, 10)
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\numbers\plus.py #####
1     import math
2     
3     
4     def plus(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["a"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"] is not None:
11            a = float(nodes["objects"][str(id)]["inputs"]["a"]["value"]["value"])
12    
13        else:
14            a = float(nodes["objects"][str(id)]["inputs"]["a"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["b"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"] is not None:
17            b = float(nodes["objects"][str(id)]["inputs"]["b"]["value"]["value"])
18    
19        else:
20            b = float(nodes["objects"][str(id)]["inputs"]["b"]["standard"])
21    
22        answer = int(a + b) if math.trunc(round(a + b, 10)) == math.ceil(round(a + b, 10)) else round(a + b, 10)
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\objects\createObject.py #####
1     def createObject(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["x"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"] is not None:
14            x = float(nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"])
15    
16        else:
17            x = float(nodes["objects"][str(id)]["inputs"]["x"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["y"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"] is not None:
20            y = float(nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"])
21    
22        else:
23            y = float(nodes["objects"][str(id)]["inputs"]["y"]["standard"])
24    
25        type = program.allObjects[name]["type"]
26        variables = program.allObjects[name]["variables"]
27    
28        variables["pos"] = [x, y]
29    
30        obj = getattr(program.linkEngine.objects, type)(program, **variables)
31    
32        # print(obj.pos, obj.hitbox, len(program.objects.objects), variables)
33    
34        program.objects.add(obj)
35    
36        for ids, connector in nodes["objects"][str(id)]["outputs"]["id"]["value"].items():
37            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = obj.id
38    
39        return queue
40    
##### scr\code\program\objects\getObjectIDByName.py #####
1     def getObjectIDByName(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        answer = program.objectIDByName[program.scene][name] if name in program.objectIDByName[program.scene] else -1
14    
15        for ids, connector in nodes["objects"][str(id)]["outputs"]["id"]["value"].items():
16            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
17    
18        return queue
19    
##### scr\code\program\objects\getObjectParameter.py #####
1     OBJECT_PARAMETERS = ["hitbox", "group", "mass", "layer", "invisible", "speed", "gravity", "jumpPower", "slidingStep", "message", "fontSize", "alignment", "fontColor", "backgroundColor", "ramaColor"]
2     
3     
4     def getObjectParameter(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
5         queue = []
6     
7         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
8             queue.append(name["id"])
9     
10         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
12    
13        else:
14            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
15    
16        if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
17            operation = int(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
18    
19        else:
20            operation = int(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
21    
22        answer = program.objects.getById(ids).getParameter(OBJECT_PARAMETERS[operation])
23    
24        for ids, connector in nodes["objects"][str(id)]["outputs"]["value"]["value"].items():
25            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
26    
27        return queue
28    
##### scr\code\program\objects\getObjectPos.py #####
1     def getObjectPos(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        pos = program.objects.getById(ids).pos
14    
15        for ids, connector in nodes["objects"][str(id)]["outputs"]["x"]["value"].items():
16            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.x
17    
18        for ids, connector in nodes["objects"][str(id)]["outputs"]["y"]["value"].items():
19            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.y
20    
21        return queue
22    
##### scr\code\program\objects\getObjectVar.py #####
1     def getObjectVar(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
14            ids = nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"]
15    
16        else:
17            ids = nodes["objects"][str(id)]["inputs"]["id"]["standard"]
18    
19        answer = variables["objects"][program.scene][program.objectNameByID[program.scene][str(ids)]][name]["value"]
20    
21        for ids, connector in nodes["objects"][str(id)]["outputs"]["answer"]["value"].items():
22            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
23    
24        return queue
25    
##### scr\code\program\objects\getResultingVector.py #####
1     def getResultingVector(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        pos = program.objects.getById(ids).getVectorsPower()
14    
15        for ids, connector in nodes["objects"][str(id)]["outputs"]["x"]["value"].items():
16            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.x
17    
18        for ids, connector in nodes["objects"][str(id)]["outputs"]["y"]["value"].items():
19            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = pos.y
20    
21        return queue
22    
##### scr\code\program\objects\jump.py #####
1     def jump(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = str(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = str(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["power"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["power"]["value"]["value"] is not None:
14            power = float(nodes["objects"][str(id)]["inputs"]["power"]["value"]["value"])
15    
16        else:
17            power = float(nodes["objects"][str(id)]["inputs"]["power"]["standard"])
18    
19        obj = program.objects.getById(int(ids))
20    
21        obj.vectors["__fall__"].power = -power
22    
23        return queue
24    
##### scr\code\program\objects\moveObject.py #####
1     def moveObject(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = str(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = str(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["angle"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["angle"]["value"]["value"] is not None:
14            angle = float(nodes["objects"][str(id)]["inputs"]["angle"]["value"]["value"])
15    
16        else:
17            angle = float(nodes["objects"][str(id)]["inputs"]["angle"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["power"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["power"]["value"]["value"] is not None:
20            power = float(nodes["objects"][str(id)]["inputs"]["power"]["value"]["value"])
21    
22        else:
23            power = float(nodes["objects"][str(id)]["inputs"]["power"]["standard"])
24    
25        obj = program.objects.getById(int(ids))
26    
27        obj.moveByAngle(angle, power, specifical=id)
28    
29        return queue
30    
##### scr\code\program\objects\removeObject.py #####
1     def removeObject(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        program.objects.removeById(ids)
14    
15        return queue
16    
##### scr\code\program\objects\setObjectParameter.py #####
1     import typing
2     
3     OBJECT_PARAMETERS = ["hitbox", "group", "mass", "layer", "invisible", "speed", "gravity", "jumpPower", "slidingStep", "message", "fontSize", "alignment", "fontColor", "backgroundColor", "ramaColor"]
4     OBJECT_PARAMETERS_TYPES = ["list", "text", "int", "int", "logic", "float", "float", "float", "float", "text", "int", "list", "eval", "list", "list"]
5     
6     
7     def setObjectParameter(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
8         def decode(operation, text: str) -> typing.Any:
9             if OBJECT_PARAMETERS_TYPES[operation] == "eval":
10                 try:
11                    return eval(text)
12    
13                except BaseException:
14                    return text
15    
16            if OBJECT_PARAMETERS_TYPES[operation] == "list":
17                return eval(text)
18    
19            if OBJECT_PARAMETERS_TYPES[operation] == "text":
20                return text
21    
22            if OBJECT_PARAMETERS_TYPES[operation] == "int":
23                return int(text)
24    
25            if OBJECT_PARAMETERS_TYPES[operation] == "float":
26                return float(text)
27    
28            if OBJECT_PARAMETERS_TYPES[operation] == "logic":
29                return True if text in ("True", "true", "1", "+") else False
30    
31        queue = []
32    
33        for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
34            queue.append(name["id"])
35    
36        if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
37            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
38    
39        else:
40            ids = int(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
41    
42        if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
43            operation = int(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
44    
45        else:
46            operation = int(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
47    
48        if nodes["objects"][str(id)]["inputs"]["value"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"] is not None:
49            value = decode(operation, nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"])
50    
51        else:
52            value = decode(operation, nodes["objects"][str(id)]["inputs"]["value"]["standard"])
53    
54        program.objects.getById(ids).setParameter(OBJECT_PARAMETERS[operation], value)
55    
56        return queue
57    
##### scr\code\program\objects\setObjectPos.py #####
1     def setObjectPos(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
8             ids = str(nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"])
9     
10         else:
11            ids = str(nodes["objects"][str(id)]["inputs"]["id"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["x"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"] is not None:
14            x = float(nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"])
15    
16        else:
17            x = float(nodes["objects"][str(id)]["inputs"]["x"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["y"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"] is not None:
20            y = float(nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"])
21    
22        else:
23            y = float(nodes["objects"][str(id)]["inputs"]["y"]["standard"])
24    
25        obj = program.objects.getById(int(ids))
26    
27        obj.pos.x = x
28        obj.pos.y = y
29    
30        return queue
31    
##### scr\code\program\objects\setObjectVar.py #####
1     def setObjectVar(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["name"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"] is not None:
8             name = str(nodes["objects"][str(id)]["inputs"]["name"]["value"]["value"])
9     
10         else:
11            name = str(nodes["objects"][str(id)]["inputs"]["name"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["id"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"] is not None:
14            ids = nodes["objects"][str(id)]["inputs"]["id"]["value"]["value"]
15    
16        else:
17            ids = nodes["objects"][str(id)]["inputs"]["id"]["standard"]
18    
19        if nodes["objects"][str(id)]["inputs"]["value"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"] is not None:
20            value = nodes["objects"][str(id)]["inputs"]["value"]["value"]["value"]
21    
22        else:
23            value = nodes["objects"][str(id)]["inputs"]["value"]["standard"]
24    
25        type = variables["objects"][program.scene][program.objectNameByID[program.scene][str(ids)]][name]["type"]
26    
27        if type == "number":
28            value = float(value)
29    
30        variables["objects"][program.scene][program.objectNameByID[program.scene][str(ids)]][name]["value"] = value
31    
32        return queue
33    
##### scr\code\program\set\addDictElement.py #####
1     def addDictElement(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
8             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
9     
10         else:
11            dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["key"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"] is not None:
14            key = str(nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"])
15    
16        else:
17            key = str(nodes["objects"][str(id)]["inputs"]["key"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["element"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"] is not None:
20            element = eval(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"])
21    
22        else:
23            element = eval(nodes["objects"][str(id)]["inputs"]["element"]["standard"])
24    
25        dict_[key] = element
26    
27        for ids, connector in nodes["objects"][str(id)]["outputs"]["dict"]["value"].items():
28            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = dict_
29    
30        return queue
31    
##### scr\code\program\set\addListElement.py #####
1     def addListElement(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
8             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
9     
10         else:
11            list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["element"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"] is not None:
14            if type(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]) == str:
15                element = eval(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"])
16    
17            else:
18                element = eval(str(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]))
19    
20        else:
21            if type(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"]) == str:
22                element = eval(nodes["objects"][str(id)]["inputs"]["element"]["standard"])
23    
24            else:
25                element = eval(str(nodes["objects"][str(id)]["inputs"]["element"]["standard"]))
26    
27        list_.append(element)
28    
29        for ids, connector in nodes["objects"][str(id)]["outputs"]["list"]["value"].items():
30            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = list_
31    
32        return queue
33    
##### scr\code\program\set\deleteByIndex.py #####
1     def deleteByIndex(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
8             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
9     
10         else:
11            list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["index"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["index"]["value"]["value"] is not None:
14            index = int(nodes["objects"][str(id)]["inputs"]["index"]["value"]["value"])
15    
16        else:
17            index = int(nodes["objects"][str(id)]["inputs"]["index"]["standard"])
18    
19        list_.pop(index)
20    
21        for ids, connector in nodes["objects"][str(id)]["outputs"]["list"]["value"].items():
22            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = list_
23    
24        return queue
25    
##### scr\code\program\set\getByIndex.py #####
1     def getByIndex(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
8             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
9     
10         else:
11            list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["index"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["index"]["value"]["value"] is not None:
14            index = int(nodes["objects"][str(id)]["inputs"]["index"]["value"]["value"])
15    
16        else:
17            index = int(nodes["objects"][str(id)]["inputs"]["index"]["standard"])
18    
19        answer = list_[index]
20    
21        for ids, connector in nodes["objects"][str(id)]["outputs"]["element"]["value"].items():
22            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
23    
24        return queue
25    
##### scr\code\program\set\getByKey.py #####
1     def getByKey(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
8             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
9     
10         else:
11            dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["key"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"] is not None:
14            key = str(nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"])
15    
16        else:
17            key = str(nodes["objects"][str(id)]["inputs"]["key"]["standard"])
18    
19        answer = dict_[key]
20    
21        for ids, connector in nodes["objects"][str(id)]["outputs"]["element"]["value"].items():
22            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
23    
24        return queue
25    
##### scr\code\program\set\getIndexOfElement.py #####
1     def getIndexOfElement(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
8             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
9     
10         else:
11            list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["element"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"] is not None:
14            element = str(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"])
15    
16        else:
17            element = str(nodes["objects"][str(id)]["inputs"]["element"]["standard"])
18    
19        answer = -1
20    
21        for index, elem in enumerate(list_):
22            if str(elem) == str(element):
23                answer = index
24    
25                break
26    
27        for ids, connector in nodes["objects"][str(id)]["outputs"]["index"]["value"].items():
28            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
29    
30        return queue
31    
##### scr\code\program\set\getKeyOfElement.py #####
1     def getKeyOfElement(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
8             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
9     
10         else:
11            dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["element"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"] is not None:
14            element = str(nodes["objects"][str(id)]["inputs"]["element"]["value"]["value"])
15    
16        else:
17            element = str(nodes["objects"][str(id)]["inputs"]["element"]["standard"])
18    
19        answer = "NULL"
20    
21        for key, value in dict_.items():
22            if str(value) == str(element):
23                answer = key
24    
25                break
26    
27        for ids, connector in nodes["objects"][str(id)]["outputs"]["key"]["value"].items():
28            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
29    
30        return queue
31    
##### scr\code\program\set\removeByKey.py #####
1     def removeByKey(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["dict"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"] is not None:
8             dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["value"]["value"])
9     
10         else:
11            dict_ = dict(nodes["objects"][str(id)]["inputs"]["dict"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["key"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"] is not None:
14            key = str(nodes["objects"][str(id)]["inputs"]["key"]["value"]["value"])
15    
16        else:
17            key = str(nodes["objects"][str(id)]["inputs"]["key"]["standard"])
18    
19        if key in dict_:
20            dict_.pop(key)
21    
22        for ids, connector in nodes["objects"][str(id)]["outputs"]["dict"]["value"].items():
23            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = dict_
24    
25        return queue
26    
##### scr\code\program\set\sliceList.py #####
1     def sliceList(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["list"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"] is not None:
8             list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["value"]["value"])
9     
10         else:
11            list_ = list(nodes["objects"][str(id)]["inputs"]["list"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["start"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["start"]["value"]["value"] is not None:
14            start = int(nodes["objects"][str(id)]["inputs"]["start"]["value"]["value"])
15    
16        else:
17            start = int(nodes["objects"][str(id)]["inputs"]["start"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["end"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["end"]["value"]["value"] is not None:
20            end = int(nodes["objects"][str(id)]["inputs"]["end"]["value"]["value"])
21    
22        else:
23            end = int(nodes["objects"][str(id)]["inputs"]["end"]["standard"])
24    
25        answer = list_[start:(None if end == -1 else end + 1)]
26    
27        for ids, connector in nodes["objects"][str(id)]["outputs"]["list"]["value"].items():
28            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
29    
30        return queue
31    
##### scr\code\program\text\connectText.py #####
1     def connectText(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["text1"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text1"]["value"]["value"] is not None:
8             text1 = str(nodes["objects"][str(id)]["inputs"]["text1"]["value"]["value"])
9     
10         else:
11            text1 = str(nodes["objects"][str(id)]["inputs"]["text1"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["text2"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text2"]["value"]["value"] is not None:
14            text2 = str(nodes["objects"][str(id)]["inputs"]["text2"]["value"]["value"])
15    
16        else:
17            text2 = str(nodes["objects"][str(id)]["inputs"]["text2"]["standard"])
18    
19        answer = text1 + text2
20    
21        for ids, connector in nodes["objects"][str(id)]["outputs"]["text"]["value"].items():
22            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
23    
24        return queue
25    
##### scr\code\program\text\displayText.py #####
1     def displayText(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["text"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"] is not None:
8             text = str(nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"])
9     
10         else:
11            text = str(nodes["objects"][str(id)]["inputs"]["text"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["x"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"] is not None:
14            x = int(nodes["objects"][str(id)]["inputs"]["x"]["value"]["value"])
15    
16        else:
17            x = int(nodes["objects"][str(id)]["inputs"]["x"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["y"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"] is not None:
20            y = int(nodes["objects"][str(id)]["inputs"]["y"]["value"]["value"])
21    
22        else:
23            y = int(nodes["objects"][str(id)]["inputs"]["y"]["standard"])
24    
25        program.afterDrawing.append(lambda: program.linkEngine.print_text(program.screen, x, y, text))
26    
27        return queue
28    
##### scr\code\program\text\sliceText.py #####
1     def sliceText(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["text"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"] is not None:
8             text = str(nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"])
9     
10         else:
11            text = str(nodes["objects"][str(id)]["inputs"]["text"]["standard"])
12    
13        if nodes["objects"][str(id)]["inputs"]["start"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["start"]["value"]["value"] is not None:
14            start = int(nodes["objects"][str(id)]["inputs"]["start"]["value"]["value"])
15    
16        else:
17            start = int(nodes["objects"][str(id)]["inputs"]["start"]["standard"])
18    
19        if nodes["objects"][str(id)]["inputs"]["end"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["end"]["value"]["value"] is not None:
20            end = int(nodes["objects"][str(id)]["inputs"]["end"]["value"]["value"])
21    
22        else:
23            end = int(nodes["objects"][str(id)]["inputs"]["end"]["standard"])
24    
25        answer = text[start:(None if end == -1 else end + 1)]
26    
27        for ids, connector in nodes["objects"][str(id)]["outputs"]["text"]["value"].items():
28            nodes["objects"][str(ids)]["inputs"][connector["name"]]["value"]["value"] = answer
29    
30        return queue
31    
##### scr\code\program\text\writeText.py #####
1     def writeText(program, compiler, path: str, nodes: dict, id: int, variables: dict) -> dict:
2         queue = []
3     
4         for name in nodes["objects"][str(id)]["outputs"]["path"]["value"].values():
5             queue.append(name["id"])
6     
7         if nodes["objects"][str(id)]["inputs"]["text"]["value"] is not None and nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"] is not None:
8             text = str(nodes["objects"][str(id)]["inputs"]["text"]["value"]["value"])
9     
10         else:
11            text = str(nodes["objects"][str(id)]["inputs"]["text"]["standard"])
12    
13        line = True
14    
15        answer = ">>> " + text.rstrip() + "\n" if line else ">>> " + text.rstrip()
16    
17        program.print(answer)
18    
19        print(answer)
20    
21        return queue
22    
##### scr\main.py #####
1     from PyQt5.QtWidgets import QMainWindow, QApplication, QTreeWidget, QStatusBar, QAction, QTreeWidgetItem, QShortcut, QPushButton
2     from PyQt5.QtGui import QKeySequence
3     from PyQt5.Qt import QIcon, Qt
4     
5     from scr.modules.widgets import TabFileBar, VersionLogScrollArea, TreeProject
6     
7     from scr.modules import functions
8     
9     from scr.variables import *
10     
11    import webbrowser
12    import qdarktheme
13    import threading
14    import requests
15    import ctypes
16    
17    
18    class FocusTreeWidget(QTreeWidget):
19        def __init__(self, parent=None):
20            QTreeWidget.__init__(self, parent)
21    
22            self.project = parent
23    
24        def mousePressEvent(self, event):
25            self.setFocus()
26    
27            event.accept()
28    
29    
30    class Main(QMainWindow):
31        def __init__(self, app) -> None:
32            try:
33                ctypes.windll.shcore.SetProcessDpiAwareness(True)
34    
35            except AttributeError:
36                pass
37    
38            QMainWindow.__init__(self)
39    
40            self.app = app
41    
42            qdarktheme.setup_theme(theme=SETTINGS["theme"])
43    
44            self.application = {}
45            self.engine = None
46    
47            self.dialog = None
48    
49            self.menubar = None
50    
51            self.selectProject = ""
52            self.selectFile = ""
53    
54            self.compiling = False
55    
56            self.desktop = QApplication.desktop()
57    
58            size["width"] = self.desktop.width()
59            size["height"] = self.desktop.height() - PLUS
60    
61            self.variables = {}
62            self.cash = {}
63    
64            self.objects = {}
65            self.menues = {}
66    
67            self.setGeometry(0, 0, int(size["width"] * 0.8), int(size["height"] * 0.8))
68            self.move((size["width"] - self.width()) // 2, (size["height"] - self.height()) // 2)
69    
70            self.shortcut()
71    
72            self.initialization()
73    
74            if not FLAGS["not-view-version-update"]:
75                self.versionUpdateMessage()
76    
77            self.init()
78    
79        def versionUpdateMessage(self) -> None:
80            def function():
81                thr = threading.Thread(target=lambda: webbrowser.open("https://artyom7774.github.io"))
82                thr.daemon = True
83                thr.start()
84    
85            url = "https://raw.githubusercontent.com/artyom7774/Game-Engine-3/main/scr/files/version.json"
86    
87            if functions.haveInternet():
88                response = requests.get(url)
89    
90                if response.status_code == 200:
91                    lastVersion = loads(response.text)["version"]
92                    nowVersion = load(open("scr/files/version.json", "r", encoding="utf-8"))["version"]
93    
94                    print(f"LOG: last version = {lastVersion}, now version = {nowVersion}")
95    
96                    if lastVersion[0] <= nowVersion[0] and lastVersion[2] <= nowVersion[2] and lastVersion[4] < nowVersion[4]:
97                        msg = QMessageBox()
98                        msg.setWindowTitle(f"{translate('Update')} {nowVersion} -> {lastVersion}")
99                        msg.setText(translate("A new version of the project has been released. Please update the product"))
100                        msg.setIcon(QMessageBox.Information)
101   
102                       openButton = QPushButton(translate("Open"))
103                       openButton.clicked.connect(lambda: function())
104   
105                       msg.addButton(openButton, QMessageBox.ActionRole)
106   
107                       okButton = msg.addButton(QMessageBox.Ok)
108   
109                       msg.exec_()
110   
111               else:
112                   print(f"ERROR: can't download now project version, status = {response.status_code}")
113   
114           else:
115               print("ERROR: can't download now project version, bad internet connection")
116   
117       def install(self) -> None:
118           if SYSTEM == "Windows":
119               os.system("setup.bat")
120   
121           elif SYSTEM == "Linux":
122               os.system("chmod +x setup.sh")
123               os.system("./setup.sh")
124   
125           else:
126               print("ERROR: system (Unknown) not supported install python")
127   
128           with open("python/.gitignore", "w", encoding="utf-8") as file:
129               file.write("*")
130   
131       def geometryInit(self) -> None:
132           if "main" in self.objects and "object_variables" in self.objects["main"]:
133               try:
134                   self.objects["main"]["object_variables"].hide()
135   
136                   self.objects["main"]["object_variables"].deleteLater()
137   
138               except RuntimeError:
139                   pass
140   
141           if "main" in self.objects and "variables" in self.objects["main"]:
142               for element in self.objects["main"]["variables"].values():
143                   try:
144                       element.hide()
145   
146                       element.deleteLater()
147   
148                   except RuntimeError:
149                       pass
150   
151           try:
152               self.objects["tree_project"].hide()
153   
154           except BaseException:
155               return 0
156   
157           self.objects["tree_project"].hide()
158           self.objects["tab_file_bar"].hide()
159           self.objects["center_rama"].hide()
160   
161           self.objects["version_log"].hide()
162   
163           if self.selectProject != "":
164               self.objects["tree_project"].show()
165               self.objects["tree_project"].setGeometry(10, 40, Size.x(16), Size.y(100) - 70)
166   
167               self.objects["tree_project_main"].setText(0, self.selectProject)
168   
169               self.objects["center_rama"].show()
170               self.objects["center_rama"].setGeometry(10 + 10 + Size.x(16), 40 + 30, Size.x(68) - 40, Size.y(100) - 70 - 30)
171   
172               self.objects["tab_file_bar"].show()
173               self.objects["tab_file_bar"].setGeometry(10 + 10 + Size.x(16), 40, Size.x(68) - 40, 30)
174   
175               if "main" in self.objects and "code" in self.objects["main"]:
176                   try:
177                       self.objects["main"]["code"].hide()
178   
179                   except RuntimeError:
180                       pass
181   
182               functions.project.centerMenuInit(self)
183   
184           else:
185               self.objects["version_log"].show()
186               self.objects["version_log"].setGeometry(10, 10, Size.x(200) - 20, Size.y(100) - 20)
187   
188           if self.selectFile == "" and self.objects["tab_file_bar"].count() != 0:
189               self.selectFile = self.objects["tab_file_bar"].objects[self.objects["tab_file_bar"].currentIndex()]["name"]
190   
191           self.objects["status_bar"].showMessage(self.selectFile)
192   
193       def initialization(self) -> None:
194           def tabFileBarCurrentChanged(index: int) -> None:
195               if len(self.objects["tab_file_bar"].objects) == 0:
196                   return 0
197   
198               self.selectFile = self.objects["tab_file_bar"].objects[index]["name"]
199               functions.tree.open(self, self.selectFile)
200   
201           def tabFileBarTabCloseRequested(index: int) -> None:
202               if self.selectFile == self.objects["tab_file_bar"].getNameByIndex(index):
203                   self.selectFile = ""
204   
205                   self.init()
206   
207           for key, value in self.objects.items():
208               try:
209                   value.hide()
210   
211               except AttributeError:
212                   pass
213   
214           self.setWindowTitle("Game Engine 3")
215   
216           self.selectProject = ""
217           self.selectFile = ""
218   
219           self.show()
220   
221           self.objects["project_tree_file_opened"] = {}
222   
223           # INSTALL PYTHON
224   
225           request = ["python", "python/Scripts/python.exe", "python/Scripts/pip.exe", "python/Scripts/pyinstaller.exe"]
226   
227           if not all([os.path.exists(element) for element in request]):
228               thr = threading.Thread(target=lambda: self.install())
229               thr.daemon = True
230               thr.start()
231   
232           # TAB FILE BAR
233   
234           self.objects["tab_file_bar"] = TabFileBar(self, self)
235           self.objects["tab_file_bar"].currentChanged.connect(lambda index: tabFileBarCurrentChanged(index))
236           self.objects["tab_file_bar"].tabCloseRequested.connect(lambda index: tabFileBarTabCloseRequested(index))
237   
238           # CENTER RAMA
239   
240           self.objects["center_rama"] = FocusTreeWidget(self)
241           # self.objects["center_rama"].mousePressEvent.connect(lambda: self.objects["center_rama"].setFocus())
242           self.objects["center_rama"].setHeaderHidden(True)
243   
244           # VERSION LOG
245   
246           self.objects["version_log"] = VersionLogScrollArea(self, load(open("scr/files/updates.json", "r", encoding="utf-8")))
247   
248           # PROJECT TREE
249   
250           self.objects["tree_project"] = TreeProject(self, self)
251           self.objects["tree_project"].setHeaderHidden(True)
252           self.objects["tree_project"].header().setFont(FONT)
253   
254           self.objects["tree_project"].setDragEnabled(True)
255           self.objects["tree_project"].setAcceptDrops(True)
256   
257           self.objects["tree_project"].setContextMenuPolicy(Qt.CustomContextMenu)
258   
259           self.objects["tree_project"].customContextMenuRequested.connect(
260               lambda pos: functions.project.projectTreeProjectMenuOpen(self, pos)
261           )
262   
263           self.objects["tree_project"].expanded.connect(
264               lambda item: functions.project.projectTreeOpenDir(self, self.objects["tree_project"].itemFromIndex(item))
265           )
266   
267           self.objects["tree_project"].collapsed.connect(
268               lambda item: functions.project.projectTreeCloseDir(self, self.objects["tree_project"].itemFromIndex(item))
269           )
270   
271           self.objects["tree_project"].itemDoubleClicked.connect(
272               lambda: functions.tree.open(self)
273           )
274   
275           self.objects["tree_project_main"] = QTreeWidgetItem(self.objects["tree_project"])
276           self.objects["tree_project_main"].setIcon(0, QIcon("project/files/sprites/dir.png"))
277           self.objects["tree_project_main"].setText(0, translate("Project"))
278   
279           # STATUS BAR
280   
281           self.objects["status_bar"] = QStatusBar()
282           self.setStatusBar(self.objects["status_bar"])
283   
284           self.init("initialization")
285   
286       def theme(self) -> None:
287           if SETTINGS["theme"] == "light":
288               pass
289   
290       def init(self, type: str = "") -> None:
291           self.menu()
292   
293           if self.selectProject == "":
294               self.theme()
295   
296               return 0
297   
298           functions.project.projectTreeInit(self)
299           functions.project.centerMenuInit(self)
300   
301           self.geometryInit()
302   
303           self.theme()
304   
305       def menu(self) -> None:
306           self.statusBar()
307   
308           self.menubar = self.menuBar()
309           self.menubar.clear()
310   
311           # FILE MENU
312   
313           file_create_action = QAction(translate("Create"), self)
314           file_create_action.triggered.connect(lambda: functions.menu.file.create(self))
315   
316           file_create_from_template = QAction(translate("Copy template"), self)
317           file_create_from_template.triggered.connect(lambda: functions.menu.file.createFromTemplate(self))
318   
319           file_open_action = QAction(translate("Open"), self)
320           file_open_action.triggered.connect(lambda: functions.menu.file.open(self))
321   
322           file_close_action = QAction(translate("Close"), self)
323           file_close_action.triggered.connect(lambda: functions.menu.file.close(self))
324   
325           file_settings_action = QAction(translate("Settings"), self)
326           file_settings_action.triggered.connect(lambda: functions.menu.file.settings(self))
327   
328           self.menues["file_menu"] = self.menubar.addMenu(translate("File"))
329   
330           self.menues["file_menu"].addAction(file_create_action)
331           self.menues["file_menu"].addAction(file_create_from_template)
332           self.menues["file_menu"].addSeparator()
333           self.menues["file_menu"].addAction(file_open_action)
334           self.menues["file_menu"].addAction(file_close_action)
335           self.menues["file_menu"].addSeparator()
336           self.menues["file_menu"].addAction(file_settings_action)
337   
338           # PROJECT MENU
339   
340           project_run_action = QAction(translate("Run"), self)
341           project_run_action.triggered.connect(lambda: functions.compile.run(self))
342   
343           project_compile_action = QAction(translate("Compile"), self)
344           project_compile_action.triggered.connect(lambda: functions.compile.compile(self))
345   
346           project_compile_and_run_action = QAction(translate("Compile and run"), self)
347           project_compile_and_run_action.triggered.connect(lambda: functions.compile.compileAndRun(self))
348   
349           project_save_project_as_action = QAction(translate("Save project"), self)
350           project_save_project_as_action.triggered.connect(lambda: functions.compile.saveProject(self))
351   
352           project_save_executable_as_action = QAction(translate("Save executable project"), self)
353           project_save_executable_as_action.triggered.connect(lambda: functions.compile.saveExecutableProject(self))
354   
355           self.menues["project_menu"] = self.menubar.addMenu(translate("Project"))
356   
357           if self.selectProject == "" and not self.compiling:
358               self.menues["project_menu"].setDisabled(True)
359   
360           self.menues["project_menu"].addAction(project_run_action)
361           self.menues["project_menu"].addSeparator()
362           self.menues["project_menu"].addAction(project_compile_action)
363           self.menues["project_menu"].addAction(project_compile_and_run_action)
364           self.menues["project_menu"].addSeparator()
365           self.menues["project_menu"].addAction(project_save_project_as_action)
366           self.menues["project_menu"].addAction(project_save_executable_as_action)
367   
368           # HELP MENU
369   
370           self.menues["help_menu"] = self.menubar.addMenu(translate("Help"))
371   
372           self.objects["help_pages"] = {}
373   
374           for name, value in load(open("scr/site/help.json", encoding="utf-8")).items():
375               self.objects["help_pages"][value["name"]] = dict(value)
376   
377           help_program_action = QAction(translate("Program"), self)
378           help_program_action.triggered.connect(lambda: functions.menu.help.help_(self))
379   
380           author_program_action = QAction(translate("About"), self)
381           author_program_action.triggered.connect(lambda: functions.menu.help.about(self))
382   
383           self.menues["help_menu"].addAction(help_program_action)
384           self.menues["help_menu"].addSeparator()
385           self.menues["help_menu"].addAction(author_program_action)
386   
387       def shortcut(self) -> None:
388           def right(project):
389               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
390                   functions.files.Scene.toObjectMove(project, "right")
391   
392           def left(project):
393               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
394                   functions.files.Scene.toObjectMove(project, "left")
395   
396           def up(project):
397               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
398                   functions.files.Scene.toObjectMove(project, "up")
399   
400           def down(project):
401               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
402                   functions.files.Scene.toObjectMove(project, "down")
403   
404           def q(project):
405               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
406                   functions.files.Scene.objectReleased(self)
407   
408           def ctrlC(project):
409               if functions.project.projectTreeProjectMenuInit(self)["copy"]:
410                   functions.tree.copy(self)
411   
412               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
413                   functions.files.Scene.copyObject(self)
414   
415           def ctrlV(project):
416               if functions.project.projectTreeProjectMenuInit(self)["paste"]:
417                   functions.tree.paste(self)
418   
419               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
420                   functions.files.Scene.pasteObject(self)
421   
422           def delete(project):
423               if functions.project.projectTreeProjectMenuInit(self)["remove"]:
424                   functions.tree.remove(self)
425   
426               if project.selectFile[project.selectFile.find(".") + 1:].find("%scene%") != -1:
427                   functions.files.Scene.deleteObject(self)
428   
429           self.objects["scene_move_right"] = QShortcut(QKeySequence("right"), self)
430           self.objects["scene_move_right"].activated.connect(lambda: right(self))
431   
432           self.objects["scene_move_left"] = QShortcut(QKeySequence("left"), self)
433           self.objects["scene_move_left"].activated.connect(lambda: left(self))
434   
435           self.objects["scene_move_up"] = QShortcut(QKeySequence("up"), self)
436           self.objects["scene_move_up"].activated.connect(lambda: up(self))
437   
438           self.objects["scene_move_down"] = QShortcut(QKeySequence("down"), self)
439           self.objects["scene_move_down"].activated.connect(lambda: down(self))
440   
441           self.objects["scene_release_object"] = QShortcut(QKeySequence("Q"), self)
442           self.objects["scene_release_object"].activated.connect(lambda: q(self))
443   
444           self.objects["tree_project_shortcut_copy"] = QShortcut(QKeySequence("Ctrl+C"), self)
445           self.objects["tree_project_shortcut_copy"].activated.connect(lambda: ctrlC(self))
446   
447           self.objects["tree_project_shortcut_paste"] = QShortcut(QKeySequence("Ctrl+V"), self)
448           self.objects["tree_project_shortcut_paste"].activated.connect(lambda: ctrlV(self))
449   
450           self.objects["tree_project_shortcut_remove"] = QShortcut(QKeySequence("Delete"), self)
451           self.objects["tree_project_shortcut_remove"].activated.connect(lambda: delete(self))
452   
453       def closeEvent(self, event) -> None:
454           event.accept()
455   
456       def resizeEvent(self, event) -> None:
457           size["width"] = self.width()
458           size["height"] = self.height() - PLUS
459   
460           self.desktop = QApplication.desktop()
461   
462           self.geometryInit()
463   
464           event.accept()
465   
##### scr\modules\dialogs\animator\animator.py #####
1     from PyQt5.QtWidgets import QDialog, QApplication, QMenu, QLabel, QWidget, QScrollArea, QFrame, QGridLayout, QSizePolicy, QVBoxLayout, QLineEdit, QTreeWidgetItem, QComboBox, QCheckBox, QPushButton, QTreeWidget
2     from PyQt5.QtCore import Qt, QMimeData, pyqtSignal
3     from PyQt5.QtGui import QPixmap, QImage, QDrag
4     from PyQt5 import QtCore
5     
6     from PyQt5 import QtWidgets
7     
8     from scr.modules.widgets import FocusLineEdit
9     
10     from PIL import Image as PImage
11    
12    from scr.variables import *
13    
14    import numpy
15    import math
16    import os
17    
18    
19    class Image:
20        @staticmethod
21        def replaceTransparentColor(image, color):
22            image = image.convert("RGBA")
23            data = numpy.array(image)
24    
25            r, g, b, a = data.T
26            transparent_areas = (a == 0)
27            data[..., :-1][transparent_areas.T] = color
28            data[..., -1][transparent_areas.T] = 255
29    
30            return PImage.fromarray(data)
31    
32        @staticmethod
33        def pillowToQImage(image):
34            data = image.tobytes("raw", "RGB")
35            qimage = QImage(data, image.width, image.height, QImage.Format_RGB888)
36    
37            return qimage
38    
39        @staticmethod
40        def getPixmap(project, maxWidth, maxHeight, file):
41            try:
42                image = PImage.open(file)
43    
44            except BaseException:
45                MessageBox.error(translate("Can not open this image"))
46    
47                project.objects["tab_file_bar"].pop(len(project.objects["tab_file_bar"].objects) - 1)
48    
49                return 0
50    
51            capacity = 1
52    
53            while image.width * capacity > maxWidth or image.height * capacity > maxHeight:
54                capacity /= 2
55    
56            while image.width * capacity * 2 < maxWidth and image.height * capacity * 2 < maxHeight:
57                capacity *= 2
58    
59            if capacity > project.engine.FLOAT_PRECISION:
60                image = image.resize((math.trunc(image.width * capacity) + (math.trunc(image.width * capacity) < 1), math.trunc(image.height * capacity) + (math.trunc(image.height * capacity) < 1)), resample=PImage.NEAREST)
61    
62            else:
63                return 0
64    
65            x = (maxWidth - image.width) // 2
66            y = (maxHeight - image.height) // 2
67    
68            image = Image.replaceTransparentColor(image, (32, 33, 36) if SETTINGS["theme"] == 'dark' else (248, 249, 250))
69            image.save("scr/files/cash/image.png")
70    
71            pixmap = QPixmap()
72            pixmap.load("scr/files/cash/image.png")
73    
74            return x, y, pixmap
75    
76        @staticmethod
77        def init(project) -> None:
78            if os.path.isdir(project.selectFile):
79                return 0
80    
81            if project.selectFile == "":
82                return 0
83    
84            maxWidth = project.objects["center_rama"].width()
85            maxHeight = project.objects["center_rama"].height()
86    
87            try:
88                image = PImage.open(project.selectFile)
89    
90            except BaseException:
91                MessageBox.error(translate("Can not open this image"))
92    
93                project.objects["tab_file_bar"].pop(len(project.objects["tab_file_bar"].objects) - 1)
94    
95                return 0
96    
97            capacity = 1
98    
99            while image.width * capacity > maxWidth or image.height * capacity > maxHeight:
100                capacity /= 2
101   
102           while image.width * capacity * 2 < maxWidth and image.height * capacity * 2 < maxHeight:
103               capacity *= 2
104   
105           if capacity > project.engine.FLOAT_PRECISION:
106               image = image.resize((math.trunc(image.width * capacity) + (math.trunc(image.width * capacity) < 1), math.trunc(image.height * capacity) + (math.trunc(image.height * capacity) < 1)), resample=PImage.NEAREST)
107   
108           else:
109               return 0
110   
111           x = (maxWidth - image.width) // 2
112           y = (maxHeight - image.height) // 2
113   
114           image = Image.replaceTransparentColor(image, (32, 33, 36) if SETTINGS["theme"] == 'dark' else (248, 249, 250))
115           image.save("scr/files/cash/image.png")
116   
117           pixmap = QPixmap()
118           pixmap.load("scr/files/cash/image.png")
119   
120           project.objects["main"]["image"] = QLabel(parent=project)
121           project.objects["main"]["image"].setGeometry(project.objects["center_rama"].x() + x, project.objects["center_rama"].y() + y, image.width, image.height)
122           project.objects["main"]["image"].setPixmap(pixmap)
123           project.objects["main"]["image"].show()
124   
125   
126   class AnimatorCreateFrame(QDialog):
127       def __init__(self, project, dialog, parent=None) -> None:
128           QDialog.__init__(self, parent)
129   
130           self.project = project
131           self.dialog = dialog
132   
133           self.setWindowTitle(translate("Create frame"))
134           self.setFixedSize(600, 400)
135   
136           desktop = QtWidgets.QApplication.desktop()
137           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
138   
139           self.objects = {}
140   
141           self.init()
142   
143       def init(self) -> None:
144           self.objects["empty"] = QPushButton(parent=self)
145           self.objects["empty"].setGeometry(0, 0, 0, 0)
146   
147           # SPRITE
148   
149           self.objects["sprite_label"] = QLabel(parent=self, text=translate("Path to sprite") + ":")
150           self.objects["sprite_label"].setGeometry(10, 10, 200, 25)
151           self.objects["sprite_label"].setFont(FONT)
152           self.objects["sprite_label"].show()
153   
154           self.objects["sprite_entry"] = QLineEdit(parent=self)
155           self.objects["sprite_entry"].setGeometry(210, 10, 300, 25)
156           self.objects["sprite_entry"].setFont(FONT)
157           self.objects["sprite_entry"].show()
158   
159           # LOG TEXT
160   
161           self.objects["log_label"] = QLabel(parent=self, text="")
162           self.objects["log_label"].setGeometry(0, 310, 600, 20)
163           self.objects["log_label"].setFont(FONT)
164           self.objects["log_label"].show()
165   
166           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
167           self.objects["log_label"].setStyleSheet("color: red;")
168   
169           # CREATE
170   
171           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
172           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
173   
174           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
175   
176           self.objects["create_button"].setGeometry(150, 340, 300, 40)
177           self.objects["create_button"].setFont(FONT)
178           self.objects["create_button"].show()
179   
180           self.objects["create_button"].clicked.connect(lambda event: self.createFrame(event))
181   
182       def createFrame(self, event):
183           path = self.objects["sprite_entry"].text()
184   
185           if not os.path.exists(f"projects/{self.project.selectProject}/project/{path}"):
186               self.objects["log_label"].setText("File is not found")
187   
188               return
189   
190           if path[path.rfind(".") + 1:] not in IMAGE_FORMATES:
191               self.objects["log_label"].setText("Image formate is not possible")
192   
193               return
194   
195           self.dialog.object["StaticObject"]["animation"]["value"]["groups"][self.dialog.selectGroup]["sprites"].append(path)
196   
197           AnimatorFunctions.save(self.project, self.dialog)
198   
199           self.close()
200   
201       def keyPressEvent(self, event) -> None:
202           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
203               self.objects["create_button"].click()
204   
205           event.accept()
206   
207   
208   class AnimationContainerTile(QWidget):
209       clicked = pyqtSignal()
210   
211       def __init__(self, project, dialog, image_path, text, parent=None):
212           super().__init__(parent)
213   
214           self.project = project
215           self.dialog = dialog
216   
217           self.image_path = image_path
218   
219           self.setAttribute(Qt.WA_StyledBackground, True)
220           self.setAcceptDrops(True)
221   
222           self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
223   
224           self.setContextMenuPolicy(Qt.CustomContextMenu)
225   
226           self.customContextMenuRequested.connect(self.showMenu)
227   
228           self.is_dragging = False
229           self.is_selected = False
230   
231           layout = QVBoxLayout(self)
232           layout.setContentsMargins(0, 0, 0, 0)
233           layout.setSpacing(0)
234   
235           self.image_label = QLabel()
236           self.image_label.setAlignment(Qt.AlignCenter)
237           self.image_label.setPixmap(QPixmap(image_path).scaled(75, 75))
238   
239           self.text_label = QLabel(text)
240           self.text_label.setAlignment(Qt.AlignCenter)
241           self.text_label.setFixedHeight(30)
242   
243           layout.addWidget(self.image_label)
244           layout.addWidget(self.text_label)
245   
246           self.setFixedSize(75, 105)
247   
248           self.dragStartPos = None
249   
250       def mousePressEvent(self, event):
251           if event.button() == Qt.LeftButton:
252               self.dragStartPos = event.pos()
253               self.is_dragging = False
254   
255               self.dialog.selectSprite = self.image_path
256   
257               if self.dialog.selectSprite is not None:
258                   x, y, pixmap = Image.getPixmap(self.project, 1060, 460, self.dialog.selectSprite)
259   
260                   if "main_image" in self.dialog.objects:
261                       self.dialog.objects["main_image"].hide()
262   
263                   self.dialog.objects["main_image"] = QLabel(parent=self.dialog.objects["main_rama"])
264                   self.dialog.objects["main_image"].setGeometry(x, y, pixmap.width(), pixmap.height())
265                   self.dialog.objects["main_image"].setPixmap(pixmap)
266                   self.dialog.objects["main_image"].show()
267   
268               super().mousePressEvent(event)
269   
270       def mouseMoveEvent(self, event):
271           if not (event.buttons() & Qt.LeftButton) or self.is_dragging:
272               return
273   
274           if (event.pos() - self.dragStartPos).manhattanLength() >= QApplication.startDragDistance():
275               self.is_dragging = True
276               drag = QDrag(self)
277               mime_data = QMimeData()
278               mime_data.setText(self.text_label.text())
279               drag.setMimeData(mime_data)
280   
281               pixmap = QPixmap(self.size())
282               self.render(pixmap)
283               drag.setPixmap(pixmap)
284               drag.setHotSpot(event.pos())
285               drag.exec_(Qt.MoveAction)
286   
287       def mouseReleaseEvent(self, event):
288           if event.button() == Qt.LeftButton and not self.is_dragging:
289               self.clicked.emit()
290   
291           super().mouseReleaseEvent(event)
292   
293       def setSelect(self, selected):
294           self.is_selected = selected
295           self.setStyleSheet("TileWidget { background-color: #657a9d; }" if selected else "")
296   
297       def showMenu(self, pos):
298           menu = QMenu(self)
299   
300           remove_action = menu.addAction("Удалить")
301           remove_action.triggered.connect(lambda: self.removeTile())
302   
303           menu.exec_(self.mapToGlobal(pos))
304   
305       def removeTile(self):
306           index = int(self.text_label.text()) - 1
307   
308           self.dialog.object["StaticObject"]["animation"]["value"]["groups"][self.dialog.selectGroup]["sprites"].pop(index)
309   
310           AnimatorFunctions.save(self.project, self.dialog)
311   
312   
313   class AnimationContainer(QWidget):
314       def __init__(self, project, dialog):
315           super().__init__()
316   
317           self.project = project
318           self.dialog = dialog
319   
320           self.widgets = []
321   
322           self.layout = QGridLayout()
323           self.layout.setContentsMargins(2, 2, 2, 2)
324           self.layout.setHorizontalSpacing(2)
325           self.layout.setVerticalSpacing(3)
326   
327           self.setLayout(self.layout)
328   
329           self.setAcceptDrops(True)
330   
331       def addWidget(self, widget):
332           self.widgets.append(widget)
333           widget.clicked.connect(lambda: self.select(widget))
334           self.rearrange()
335   
336       def removeWidget(self, widget):
337           if widget in self.widgets:
338               self.widgets.remove(widget)
339               widget.deleteLater()
340               self.rearrange()
341   
342       def select(self, selected_widget):
343           for widget in self.widgets:
344               widget.setSelect(widget == selected_widget)
345   
346       def rearrange(self):
347           while self.layout.count():
348               item = self.layout.takeAt(0)
349               if widget := item.widget():
350                   widget.setParent(None)
351   
352           if not self.widgets:
353               return
354   
355           margins = self.layout.contentsMargins()
356           available_width = self.width() - margins.left() - margins.right()
357           widget_width = self.widgets[0].width()
358           spacing = self.layout.horizontalSpacing()
359           cols = max(1, (available_width + spacing) // (widget_width + spacing))
360   
361           row, col = 0, 0
362           for widget in self.widgets:
363               if col >= cols:
364                   col = 0
365                   row += 1
366               self.layout.addWidget(widget, row, col)
367               col += 1
368   
369           for r in range(row + 1):
370               self.layout.setRowMinimumHeight(r, 115)
371   
372           self.updateGeometry()
373   
374       def dragEnterEvent(self, event):
375           if event.mimeData().hasText():
376               event.acceptProposedAction()
377   
378       def dropEvent(self, event):
379           pos = event.pos()
380           source_widget = event.source()
381   
382           if not isinstance(source_widget, AnimationContainerTile) or source_widget not in self.widgets:
383               return
384   
385           margins = self.layout.contentsMargins()
386           widget_width = source_widget.width()
387           widget_height = source_widget.height()
388           spacing_h = self.layout.horizontalSpacing()
389           spacing_v = self.layout.verticalSpacing()
390   
391           x = pos.x() - margins.left()
392           y = pos.y() - margins.top()
393   
394           cols = max(1, (self.width() - margins.left() - margins.right() + spacing_h) // (widget_width + spacing_h))
395           col = x // (widget_width + spacing_h)
396           row = y // (widget_height + spacing_v)
397   
398           col = max(0, min(col, cols - 1))
399           current_index = self.widgets.index(source_widget)
400           new_index = min(row * cols + col, len(self.widgets))
401   
402           if new_index != current_index:
403               self.widgets.remove(source_widget)
404               self.widgets.insert(new_index, source_widget)
405               self.rearrange()
406   
407               array = list(self.dialog.object["StaticObject"]["animation"]["value"]["groups"][self.dialog.selectGroup]["sprites"])
408   
409               array.remove(source_widget.temp)
410               array.insert(new_index, source_widget.temp)
411   
412               self.dialog.object["StaticObject"]["animation"]["value"]["groups"][self.dialog.selectGroup]["sprites"] = list(array)
413   
414               AnimatorFunctions.save(self.project, self.dialog)
415   
416           event.accept()
417   
418       def resizeEvent(self, event):
419           self.rearrange()
420           super().resizeEvent(event)
421   
422   
423   class AnimatorFunctions:
424       @staticmethod
425       def createNewGroup(project, dialog):
426           name = "group"
427           index = 0
428   
429           while (f"{name}-{index}" if index != 0 else name) in dialog.object["StaticObject"]["animation"]["value"]["groups"]:
430               index += 1
431   
432           name = f"{name}-{index}" if index != 0 else name
433   
434           dialog.object["StaticObject"]["animation"]["value"]["groups"][name] = {
435               "name": name,
436               "sprites": [
437   
438               ],
439               "settings": {
440                   "repeat": False,
441                   "fpsPerFrame": 10,
442                   "standard": False
443               }
444           }
445   
446           AnimatorFunctions.save(project, dialog)
447   
448       @staticmethod
449       def createNewFrame(project, dialog):
450           dialog.init()
451   
452           dialog.dialog = AnimatorCreateFrame(project, dialog)
453           dialog.dialog.exec_()
454   
455       @staticmethod
456       def renameGroup(project, dialog, name, widget):
457           text = widget.text()
458   
459           if text in dialog.object["StaticObject"]["animation"]["value"]["groups"]:
460               return dialog.init()
461   
462           dialog.object["StaticObject"]["animation"]["value"]["groups"][text] = dict(dialog.object["StaticObject"]["animation"]["value"]["groups"][name])
463           dialog.object["StaticObject"]["animation"]["value"]["groups"].pop(name)
464   
465           dialog.selectGroup = text
466   
467           AnimatorFunctions.save(project, dialog)
468   
469       @staticmethod
470       def chooseGroup(project, dialog, name, widget):
471           if name != dialog.selectGroup:
472               dialog.selectSprite = None
473   
474           dialog.selectGroup = name
475   
476           for i in range(dialog.objects["groups"].topLevelItemCount()):
477               temp = dialog.objects["groups"].topLevelItem(i)
478   
479               item = dialog.objects["groups"].itemWidget(temp, 0)
480   
481               if dialog.selectGroup == temp.data(0, Qt.UserRole):
482                   item.setStyleSheet(f"background-color: #{'657a9d' if SETTINGS['theme'] == 'dark' else 'b5cae6'};")
483   
484               else:
485                   item.setStyleSheet(f"background-color: #{'3f4042' if SETTINGS['theme'] == 'dark' else 'f8f9fa'};")
486   
487           dialog.init(expects=["groups"])
488   
489       @staticmethod
490       def save(project, dialog):
491           with open(dialog.path, "w", encoding="utf-8") as f:
492               dump(dialog.object, f, indent=4)
493   
494           dialog.init()
495   
496       @staticmethod
497       def settingsRepeat(project, dialog, widget):
498           value = widget.isChecked()
499   
500           dialog.object["StaticObject"]["animation"]["value"]["groups"][dialog.selectGroup]["settings"]["repeat"] = value
501   
502           AnimatorFunctions.save(project, dialog)
503   
504       @staticmethod
505       def settingsBase(project, dialog, widget):
506           value = widget.isChecked()
507   
508           if value:
509               for group in dialog.object["StaticObject"]["animation"]["value"]["groups"].values():
510                   group["settings"]["standard"] = False
511   
512           dialog.object["StaticObject"]["animation"]["value"]["groups"][dialog.selectGroup]["settings"]["standard"] = value
513   
514           AnimatorFunctions.save(project, dialog)
515   
516       @staticmethod
517       def settingsFps(project, dialog, widget):
518           value = widget.text()
519   
520           try:
521               int(value)
522   
523           except BaseException:
524               dialog.init()
525   
526           else:
527               dialog.object["StaticObject"]["animation"]["value"]["groups"][dialog.selectGroup]["settings"]["fpsPerFrame"] = int(value)
528   
529               AnimatorFunctions.save(project, dialog)
530   
531   
532   class Animator(QDialog):
533       def __init__(self, project, parent=None, path=None) -> None:
534           QDialog.__init__(self, parent)
535   
536           if path is None:
537               self.path = project.selectFile
538   
539           else:
540               self.path = path
541   
542           self.project = project
543   
544           self.setWindowTitle(translate("Animation"))
545           self.setFixedSize(1280, 720)
546   
547           desktop = QtWidgets.QApplication.desktop()
548           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
549   
550           with open(self.path, "r", encoding="utf-8") as f:
551               self.object = load(f)
552   
553           self.object["StaticObject"]["animation"]["value"]["groups"] = dict(sorted(self.object["StaticObject"]["animation"]["value"]["groups"].items(), key=lambda x: x[0]))
554   
555           self.selectGroup = list(self.object["StaticObject"]["animation"]["value"]["groups"].keys())[0]
556           self.selectSprite = None
557   
558           self.objects = {}
559   
560           self.init()
561   
562       def init(self, expects: list = None) -> None:
563           if expects is None:
564               expects = []
565   
566           rem = []
567   
568           for name, element in self.objects.items():
569               if name in expects:
570                   continue
571   
572               try:
573                   element.deleteLater()
574   
575               except RuntimeError:
576                   pass
577   
578               rem.append(name)
579   
580           for element in rem:
581               self.objects.pop(element)
582   
583           self.object["StaticObject"]["animation"]["value"]["groups"] = dict(sorted(self.object["StaticObject"]["animation"]["value"]["groups"].items(), key=lambda x: x[0]))
584   
585           self.objects["empty"] = QPushButton(self)
586           self.objects["empty"].setGeometry(0, 0, 0, 0)
587   
588           # MAIN
589   
590           self.objects["main_rama"] = QTreeWidget(self)
591           self.objects["main_rama"].header().hide()
592           self.objects["main_rama"].setGeometry(10, 10, 1060, 460)
593           self.objects["main_rama"].show()
594   
595           if self.selectSprite is not None:
596               x, y, pixmap = Image.getPixmap(self.project, 1060, 460, self.selectSprite)
597   
598               self.objects["main_image"] = QLabel(parent=self.objects["main_rama"])
599               self.objects["main_image"].setGeometry(x, y, pixmap.width(), pixmap.height())
600               self.objects["main_image"].setPixmap(pixmap)
601               self.objects["main_image"].show()
602   
603           # ANIMATION
604   
605           self.objects["animation_rama"] = QTreeWidget(self)
606           self.objects["animation_rama"].header().hide()
607           self.objects["animation_rama"].setGeometry(10, 480, 1060, 230)
608           self.objects["animation_rama"].show()
609   
610           self.objects["animation_scroll"] = QScrollArea(self)
611           self.objects["animation_scroll"].setWidgetResizable(True)
612           self.objects["animation_scroll"].setFrameShape(QFrame.NoFrame)
613   
614           self.objects["animation_scroll_container"] = AnimationContainer(self.project, self)
615           self.objects["animation_scroll"].setWidget(self.objects["animation_scroll_container"])
616   
617           for i, sprite in enumerate(self.object["StaticObject"]["animation"]["value"]["groups"][self.selectGroup]["sprites"]):
618               tile = AnimationContainerTile(self.project, self, f"projects/{self.project.selectProject}/project/{sprite}", f"{i + 1}")
619   
620               tile.temp = sprite
621   
622               self.objects["animation_scroll_container"].addWidget(tile)
623   
624           self.objects["animation_scroll"].setGeometry(10, 480, 1060, 230)
625           self.objects["animation_scroll"].show()
626   
627           # GROUPS
628   
629           if "groups" not in expects:
630               self.objects["groups"] = QTreeWidget(self)
631               self.objects["groups"].header().hide()
632               self.objects["groups"].setGeometry(1080, 10, 190, 345)
633               self.objects["groups"].setRootIsDecorated(False)
634               self.objects["groups"].show()
635   
636               for name, group in self.object["StaticObject"]["animation"]["value"]["groups"].items():
637                   item = QTreeWidgetItem()
638   
639                   item.setData(0, Qt.UserRole, name)
640   
641                   self.objects["groups"].addTopLevelItem(item)
642   
643                   groupLineEdit = FocusLineEdit()
644                   groupLineEdit.setFont(FONT)
645                   groupLineEdit.setText(name)
646   
647                   if self.selectGroup == name:
648                       groupLineEdit.setStyleSheet(f"background-color: #{'657a9d' if SETTINGS['theme'] == 'dark' else 'b5cae6'};")
649   
650                   groupLineEdit.connectFocusFunction = lambda empty=None, n=name, w=groupLineEdit: AnimatorFunctions.chooseGroup(self.project, self, n, w)
651                   groupLineEdit.releasedFocusFunction = lambda empty=None, n=name, w=groupLineEdit: AnimatorFunctions.renameGroup(self.project, self, n, w)
652   
653                   self.objects["groups"].setItemWidget(item, 0, groupLineEdit)
654   
655           self.objects["groups_create_group"] = QPushButton(self.objects["groups"])
656           self.objects["groups_create_group"].setStyleSheet(BUTTON_BLUE_STYLE)
657           self.objects["groups_create_group"].setGeometry(5, self.objects["groups"].height() - 60, self.objects["groups"].width() - 10, 25)
658           self.objects["groups_create_group"].setText(translate("Create group"))
659           self.objects["groups_create_group"].show()
660   
661           self.objects["groups_create_group"].clicked.connect(lambda: AnimatorFunctions.createNewGroup(self.project, self))
662   
663           self.objects["groups_create_frame"] = QPushButton(self.objects["groups"])
664           self.objects["groups_create_frame"].setStyleSheet(BUTTON_BLUE_STYLE)
665           self.objects["groups_create_frame"].setGeometry(5, self.objects["groups"].height() - 30, self.objects["groups"].width() - 10, 25)
666           self.objects["groups_create_frame"].setText(translate("Create frame"))
667           self.objects["groups_create_frame"].show()
668   
669           self.objects["groups_create_frame"].clicked.connect(lambda: AnimatorFunctions.createNewFrame(self.project, self))
670   
671           # SETTINGS
672   
673           self.objects["settings_rama"] = QTreeWidget(self)
674           self.objects["settings_rama"].header().hide()
675           self.objects["settings_rama"].setGeometry(1080, 365, 190, 345)
676           self.objects["settings_rama"].show()
677   
678           settings = self.object["StaticObject"]["animation"]["value"]["groups"][self.selectGroup]["settings"]
679   
680           self.objects["settings_repeat_label"] = QLabel(self.objects["settings_rama"])
681           self.objects["settings_repeat_label"].setGeometry(5, 5, 110, 20)
682           self.objects["settings_repeat_label"].setText(translate("Repeat:"))
683           self.objects["settings_repeat_label"].setFont(FONT)
684           self.objects["settings_repeat_label"].show()
685   
686           self.objects["settings_repeat_check_box"] = QCheckBox(self.objects["settings_rama"])
687           self.objects["settings_repeat_check_box"].setChecked(settings["repeat"])
688           self.objects["settings_repeat_check_box"].setGeometry(145, 5, 40, 22)
689           self.objects["settings_repeat_check_box"].show()
690   
691           self.objects["settings_repeat_check_box"].stateChanged.connect(lambda empty=None, pr=self.project, dia=self: AnimatorFunctions.settingsRepeat(pr, dia, self.objects["settings_repeat_check_box"]))
692   
693           self.objects["settings_base_label"] = QLabel(self.objects["settings_rama"])
694           self.objects["settings_base_label"].setGeometry(5, 30, 170, 20)
695           self.objects["settings_base_label"].setText(translate("Base animation:"))
696           self.objects["settings_base_label"].setFont(FONT)
697           self.objects["settings_base_label"].show()
698   
699           self.objects["settings_base_check_box"] = QCheckBox(self.objects["settings_rama"])
700           self.objects["settings_base_check_box"].setChecked(settings["standard"])
701           self.objects["settings_base_check_box"].setGeometry(145, 30, 40, 22)
702           self.objects["settings_base_check_box"].show()
703   
704           self.objects["settings_base_check_box"].stateChanged.connect(lambda empty=None, pr=self.project, dia=self: AnimatorFunctions.settingsBase(pr, dia, self.objects["settings_base_check_box"]))
705   
706           self.objects["settings_frame_label"] = QLabel(self.objects["settings_rama"])
707           self.objects["settings_frame_label"].setGeometry(5, 55, 110, 20)
708           self.objects["settings_frame_label"].setText(translate("FPS per frame:"))
709           self.objects["settings_frame_label"].setFont(FONT)
710           self.objects["settings_frame_label"].show()
711   
712           self.objects["settings_frame_line_edit"] = FocusLineEdit(self.objects["settings_rama"])
713           self.objects["settings_frame_line_edit"].setText(str(settings["fpsPerFrame"]))
714           self.objects["settings_frame_line_edit"].setGeometry(145, 55, 40, 22)
715           self.objects["settings_frame_line_edit"].show()
716   
717           self.objects["settings_frame_line_edit"].releasedFocusFunction = lambda empty=None, pr=self.project, dia=self: AnimatorFunctions.settingsFps(pr, dia, self.objects["settings_frame_line_edit"])
718   
719   
720   def animatorCreateDialog(project, path: str = None):
721       project.dialog = Animator(project, project, path)
722       project.dialog.exec_()
723   
##### scr\modules\dialogs\animator\__init__.py #####
1     from .animator import Animator, animatorCreateDialog
2     
##### scr\modules\dialogs\code\create_node.py #####
1     from PyQt5.QtWidgets import QDialog,  QPushButton, QTreeWidget, QTreeWidgetItem, QApplication
2     from PyQt5.QtCore import Qt
3     from PyQt5.QtGui import QIcon
4     
5     from engine.vector.float import Vec2f
6     
7     from scr.modules.functions.project import getColor
8     
9     from scr.variables import *
10     
11    import random
12    
13    
14    class CreateNodeFunctions:
15        @staticmethod
16        def create(project, dialog, position, event):
17            node = dialog.objects["select"]
18    
19            pos = Vec2f(
20                (position.x() + project.cash["file"][project.selectFile].x) // CODE_GRID_CELL_SIZE,
21                (position.y() + project.cash["file"][project.selectFile].y) // CODE_GRID_CELL_SIZE
22            )
23    
24            node["id"] = random.randint(1, 1000000000)
25    
26            node["x"] = pos.x
27            node["y"] = pos.y
28    
29            with open(project.selectFile, "r", encoding="utf-8") as file:
30                function = load(file)
31    
32            function["objects"][node["id"]] = node
33    
34            with open(project.selectFile, "w", encoding="utf-8") as file:
35                dump(function, file, indent=4)
36    
37            dialog.close()
38    
39            project.init()
40    
41    
42    class CreateNode(QDialog):
43        def __init__(self, project, position, parent=None) -> None:
44            QDialog.__init__(self, parent)
45    
46            self.project = project
47    
48            self.position = position
49    
50            self.setWindowTitle(translate("Create node"))
51            self.setFixedSize(900, 600)
52    
53            desktop = QApplication.desktop()
54            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
55    
56            self.objects = {}
57    
58            self.init()
59    
60        def choose(self, item, column) -> None:
61            data = item.data(column, 1000)
62    
63            if data["level"] != 2:
64                return 0
65    
66            self.objects["select"] = data["node"]
67    
68            self.objects["open_button"].setDisabled(False)
69    
70        def init(self) -> None:
71            self.objects["empty"] = QPushButton(parent=self)
72            self.objects["empty"].setGeometry(0, 0, 0, 0)
73    
74            # NODES
75    
76            self.objects["nodes"] = QTreeWidget(parent=self)
77            self.objects["nodes"].setGeometry(10, 10, 880, 520)
78            self.objects["nodes"].header().setFont(FONT)
79            self.objects["nodes"].setHeaderHidden(True)
80            self.objects["nodes"].show()
81    
82            self.objects["nodes"].itemClicked.connect(self.choose)
83    
84            self.objects["select"] = None
85            self.objects["widgets"] = {}
86    
87            with open("scr/code/config.json", "r", encoding="utf-8") as file:
88                config = load(file)
89    
90            self.objects["widgets"]["nodes"] = QTreeWidgetItem(self.objects["nodes"])
91            self.objects["widgets"]["nodes"].setIcon(0, QIcon(getColor("dir")))
92            self.objects["widgets"]["nodes"].setText(0, translate("Nodes"))
93            self.objects["widgets"]["nodes"].setData(0, 1000, {"level": 0, "path": "nodes"})
94            self.objects["widgets"]["nodes"].setExpanded(True)
95    
96            for key, value in config["groups"].items():
97                self.objects["widgets"][f"nodes/{key}"] = QTreeWidgetItem(self.objects["widgets"]["nodes"])
98                self.objects["widgets"][f"nodes/{key}"].setIcon(0, QIcon(getColor("dir")))
99                self.objects["widgets"][f"nodes/{key}"].setText(0, translate(value["name"]))
100                self.objects["widgets"][f"nodes/{key}"].setData(0, 1000, {"level": 1, "path": f"nodes/{key}"})
101               self.objects["widgets"][f"nodes/{key}"].setExpanded(True)
102   
103               for node in value["nodes"]:
104                   self.objects["widgets"][f"nodes/{key}/{element}"] = QTreeWidgetItem(self.objects["widgets"][f"nodes/{key}"])
105                   self.objects["widgets"][f"nodes/{key}/{element}"].setIcon(0, QIcon(getColor("func")))
106                   self.objects["widgets"][f"nodes/{key}/{element}"].setText(0, translate(config["nodes"][node]["display"]["name"]))
107                   self.objects["widgets"][f"nodes/{key}/{element}"].setData(0, 1000, {"level": 2, "path": f"nodes/{key}/{element}", "name": node, "node": config["nodes"][node]})
108   
109           # CREATE
110   
111           self.objects["open_button"] = QPushButton(parent=self, text=translate("Create"))
112           self.objects["open_button"].setStyleSheet(BUTTON_BLUE_STYLE)
113   
114           self.objects["open_button"].released.connect(lambda: self.objects["empty"].setFocus())
115   
116           self.objects["open_button"].setGeometry(300, 540, 300, 40)
117           self.objects["open_button"].setFont(FONT)
118           self.objects["open_button"].show()
119   
120           self.objects["open_button"].setDisabled(True)
121   
122           self.objects["open_button"].clicked.connect(lambda event: CreateNodeFunctions.create(self.project, self, self.position, event))
123   
124       def keyPressEvent(self, event) -> None:
125           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
126               self.objects["open_button"].click()
127   
128           event.accept()
129   
##### scr\modules\dialogs\code\__init__.py #####
1     from .create_node import CreateNode
2     
##### scr\modules\dialogs\file\create_from_template_project.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit, QComboBox
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateProjectFunctions:
13        @staticmethod
14        def create(project, dialog, event) -> None:
15            name = dialog.objects["name_entry"].text()
16    
17            if name == "":
18                dialog.objects["log_label"].setText("Imposiable project name")
19    
20                return 0
21    
22            try:
23                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
24                    pass
25    
26            except BaseException:
27                dialog.objects["log_label"].setText("Imposiable project name")
28    
29                return 0
30    
31            for element in os.listdir("projects/"):
32                if element == name:
33                    dialog.objects["log_label"].setText(translate("Project name already exist"))
34    
35                    return 0
36    
37            template = dialog.templates[dialog.objects["template_combobox"].currentIndex()]
38    
39            project.selectProject = name
40    
41            dialog.createProject(name, template)
42    
43            dialog.close()
44    
45    
46    class CreateFromTemplateProject(QDialog):
47        def __init__(self, project, parent=None) -> None:
48            QDialog.__init__(self, parent)
49    
50            self.project = project
51    
52            self.setWindowTitle(translate("Copy template"))
53            self.setFixedSize(600, 400)
54    
55            desktop = QtWidgets.QApplication.desktop()
56            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
57    
58            self.template = "scr/files/templates"
59            self.templates = list(sorted([name for name in os.listdir(self.template)], key=lambda x: 0 if x == translate("Base") else 1))
60    
61            self.objects = {}
62    
63            self.init()
64    
65        def init(self) -> None:
66            self.objects["empty"] = QPushButton(parent=self)
67            self.objects["empty"].setGeometry(0, 0, 0, 0)
68    
69            # NAME
70    
71            self.objects["name_label"] = QLabel(parent=self, text=translate("Project name") + ":")
72            self.objects["name_label"].setGeometry(10, 10, 200, 25)
73            self.objects["name_label"].setFont(FONT)
74            self.objects["name_label"].show()
75    
76            self.objects["name_entry"] = QLineEdit(parent=self)
77            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
78            self.objects["name_entry"].setFont(FONT)
79            self.objects["name_entry"].show()
80    
81            # TEMPLATE
82    
83            self.objects["template_label"] = QLabel(parent=self, text=translate("Template") + ":")
84            self.objects["template_label"].setGeometry(10, 45, 200, 25)
85            self.objects["template_label"].setFont(FONT)
86            self.objects["template_label"].show()
87    
88            self.objects["template_combobox"] = QComboBox(parent=self)
89            self.objects["template_combobox"].setCurrentIndex(0)
90            self.objects["template_combobox"].addItems([translate(element) for element in self.templates])
91            self.objects["template_combobox"].setGeometry(210, 45, 300, 25)
92            self.objects["template_combobox"].setFont(FONT)
93            self.objects["template_combobox"].show()
94    
95            # LOG TEXT
96    
97            self.objects["log_label"] = QLabel(parent=self, text="")
98            self.objects["log_label"].setGeometry(0, 310, 600, 20)
99            self.objects["log_label"].setFont(FONT)
100            self.objects["log_label"].show()
101   
102           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
103           self.objects["log_label"].setStyleSheet("color: red;")
104   
105           # CREATE
106   
107           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
108           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
109   
110           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
111   
112           self.objects["create_button"].setGeometry(150, 340, 300, 40)
113           self.objects["create_button"].setFont(FONT)
114           self.objects["create_button"].show()
115   
116           self.objects["create_button"].clicked.connect(lambda event: CreateProjectFunctions.create(self.project, self, event))
117   
118       def createProject(self, name, template) -> None:
119           functions.project.createProjectDirecroryByTemplate(self.project, name, template)
120   
121           functions.project.projectOpen(self.project)
122   
123       def keyPressEvent(self, event) -> None:
124           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
125               self.objects["create_button"].click()
126   
127           event.accept()
128   
129   
##### scr\modules\dialogs\file\create_project.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateProjectFunctions:
13        @staticmethod
14        def create(project, dialog, event) -> None:
15            name = dialog.objects["name_entry"].text()
16    
17            if name == "":
18                dialog.objects["log_label"].setText("Imposiable project name")
19    
20                return 0
21    
22            try:
23                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
24                    pass
25    
26            except BaseException:
27                dialog.objects["log_label"].setText("Imposiable project name")
28    
29                return 0
30    
31            for element in os.listdir("projects/"):
32                if element == name:
33                    dialog.objects["log_label"].setText(translate("Project name already exist"))
34    
35                    return 0
36    
37            project.selectProject = name
38    
39            dialog.createProject(name)
40    
41            dialog.close()
42    
43    
44    class CreateProject(QDialog):
45        def __init__(self, project, parent=None) -> None:
46            QDialog.__init__(self, parent)
47    
48            self.project = project
49    
50            self.setWindowTitle(translate("Create project"))
51            self.setFixedSize(600, 400)
52    
53            desktop = QtWidgets.QApplication.desktop()
54            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
55    
56            self.objects = {}
57    
58            self.init()
59    
60        def init(self) -> None:
61            self.objects["empty"] = QPushButton(parent=self)
62            self.objects["empty"].setGeometry(0, 0, 0, 0)
63    
64            # NAME
65    
66            self.objects["name_label"] = QLabel(parent=self, text=translate("Project name") + ":")
67            self.objects["name_label"].setGeometry(10, 10, 200, 25)
68            self.objects["name_label"].setFont(FONT)
69            self.objects["name_label"].show()
70    
71            self.objects["name_entry"] = QLineEdit(parent=self)
72            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
73            self.objects["name_entry"].setFont(FONT)
74            self.objects["name_entry"].show()
75    
76            # LOG TEXT
77    
78            self.objects["log_label"] = QLabel(parent=self, text="")
79            self.objects["log_label"].setGeometry(0, 310, 600, 20)
80            self.objects["log_label"].setFont(FONT)
81            self.objects["log_label"].show()
82    
83            self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
84            self.objects["log_label"].setStyleSheet("color: red;")
85    
86            # CREATE
87    
88            self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
89            self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
90    
91            self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
92    
93            self.objects["create_button"].setGeometry(150, 340, 300, 40)
94            self.objects["create_button"].setFont(FONT)
95            self.objects["create_button"].show()
96    
97            self.objects["create_button"].clicked.connect(lambda event: CreateProjectFunctions.create(self.project, self, event))
98    
99        def createProject(self, name) -> None:
100            functions.project.createProjectDirectory(self.project, name)
101   
102           functions.project.projectOpen(self.project)
103   
104       def keyPressEvent(self, event) -> None:
105           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
106               self.objects["create_button"].click()
107   
108           event.accept()
109   
110   
##### scr\modules\dialogs\file\open_project.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QComboBox, QPushButton
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class OpenProjectFunctions:
13        @staticmethod
14        def open(project, dialog, event):
15            name = dialog.objects["project_combobox"].currentText()
16    
17            if name == "":
18                return 0
19    
20            project.selectProject = name
21    
22            functions.project.projectOpen(project)
23    
24            project.init()
25    
26            dialog.close()
27    
28    
29    class OpenProject(QDialog):
30        def __init__(self, project, parent=None) -> None:
31            QDialog.__init__(self, parent)
32    
33            self.project = project
34    
35            self.setWindowTitle(translate("Open project"))
36            self.setFixedSize(600, 400)
37    
38            desktop = QtWidgets.QApplication.desktop()
39            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
40    
41            self.objects = {}
42    
43            self.init()
44    
45        def init(self) -> None:
46            self.objects["empty"] = QPushButton(parent=self)
47            self.objects["empty"].setGeometry(0, 0, 0, 0)
48    
49            # ALL PROJECTS -> COMBOBOX
50    
51            self.objects["project_label"] = QLabel(parent=self, text=translate("Project") + ":")
52            self.objects["project_label"].setGeometry(10, 10, 200, 25)
53            self.objects["project_label"].setFont(FONT)
54            self.objects["project_label"].show()
55    
56            self.objects["project_combobox"] = QComboBox(parent=self)
57            self.objects["project_combobox"].setGeometry(210, 10, 300, 25)
58            self.objects["project_combobox"].setFont(FONT)
59            self.objects["project_combobox"].show()
60    
61            self.objects["project_combobox"].addItems([file for file in os.listdir("projects/")])
62    
63            # OPEN
64    
65            self.objects["open_button"] = QPushButton(parent=self, text=translate("Open"))
66            self.objects["open_button"].setStyleSheet(BUTTON_BLUE_STYLE)
67    
68            self.objects["open_button"].released.connect(lambda: self.objects["empty"].setFocus())
69    
70            self.objects["open_button"].setGeometry(150, 340, 300, 40)
71            self.objects["open_button"].setFont(FONT)
72            self.objects["open_button"].show()
73    
74            self.objects["open_button"].clicked.connect(lambda event: OpenProjectFunctions.open(self.project, self, event))
75    
76        def keyPressEvent(self, event) -> None:
77            if event.key() in (Qt.Key_Enter, Qt.Key_Return):
78                self.objects["open_button"].click()
79    
80            event.accept()
81    
82    
##### scr\modules\dialogs\file\settings.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QComboBox, QPushButton
2     from PyQt5 import QtWidgets
3     
4     from scr.variables import *
5     
6     import subprocess
7     import qdarktheme
8     import threading
9     
10     
11    class SettingsFunctions:
12        @staticmethod
13        def newRunProgram() -> None:
14            if SYSTEM == "Windows":
15                if DIVELOP:
16                    subprocess.run(["venv/Scripts/python.exe", "Game Engine 3.py"])
17    
18                else:
19                    subprocess.run(["Game Engine 3.exe"])
20    
21            elif SYSTEM == "Linux":
22                pass
23    
24            else:
25                print("ERROR: system (Unknown) not supported this opperation")
26    
27        @staticmethod
28        def confirm(project, dialog, event) -> None:
29            global BUTTON_RED_STYLE, BUTTON_BLUE_STYLE
30    
31            languages = dict(zip(LANGUAGES.values(), LANGUAGES.keys()))
32            themes = list(THEMES.keys())
33    
34            settings = {
35                "language": languages[dialog.objects["language_combobox"].currentText()],
36                "theme": themes[dialog.objects["theme_combobox"].currentIndex()]
37            }
38    
39            for key, value in settings.items():
40                SETTINGS[key] = value
41    
42            translate.lang = SETTINGS["language"]
43    
44            qdarktheme.setup_theme(theme=SETTINGS["theme"])
45    
46            with open("scr/files/settings/settings.json", "w", encoding="utf-8") as file:
47                dump(SETTINGS, file, indent=4)
48    
49            thr = threading.Thread(target=lambda: SettingsFunctions.newRunProgram())
50            thr.start()
51    
52            dialog.close()
53    
54            project.close()
55    
56        @staticmethod
57        def cancel(project, dialog, event) -> None:
58            dialog.close()
59    
60        @staticmethod
61        def reset(project, dialog, event) -> None:
62            settings = {}
63    
64            for key, value in BASE_SETTINGS.items():
65                settings[key] = value
66    
67            var = [dialog.objects["language_combobox"].itemText(i) for i in range(dialog.objects["language_combobox"].count())]
68            dialog.objects["language_combobox"].setCurrentIndex([element == LANGUAGES[settings["language"]] for element in var].index(True))
69    
70        @staticmethod
71        def install(project, dialog, event):
72            os.system("setup.bat")
73    
74            dialog.objects["reset_button"].setDisabled(False)
75            dialog.objects["reset_button"].setText(translate("Reinstall python"))
76    
77        @staticmethod
78        def python(project, dialog, event) -> None:
79            dialog.objects["reset_button"].setDisabled(True)
80            dialog.objects["reset_button"].setText(translate("In progress..."))
81    
82            thr = threading.Thread(target=lambda: SettingsFunctions.install(project, dialog, event))
83            thr.start()
84    
85    
86    class Settings(QDialog):
87        def __init__(self, project, parent=None) -> None:
88            QDialog.__init__(self, parent)
89    
90            self.project = project
91    
92            self.setWindowTitle(translate("Settings"))
93            self.setFixedSize(1280, 720)
94    
95            desktop = QtWidgets.QApplication.desktop()
96            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
97    
98            self.objects = {}
99    
100            self.init()
101   
102       def init(self) -> None:
103           self.objects["empty"] = QPushButton(parent=self)
104           self.objects["empty"].setGeometry(0, 0, 0, 0)
105   
106           # LANGUAGE
107   
108           self.objects["language_label"] = QLabel(parent=self, text=translate("Language") + ":")
109           self.objects["language_label"].setGeometry(10, 10, 200, 25)
110           self.objects["language_label"].setFont(FONT)
111           self.objects["language_label"].show()
112   
113           self.objects["language_combobox"] = QComboBox(parent=self)
114           self.objects["language_combobox"].addItems([obj for obj in LANGUAGES.values()])
115           self.objects["language_combobox"].setCurrentIndex([translate(obj).lower() == translate(LANGUAGES[SETTINGS["language"]]).lower() for obj in LANGUAGES.values()].index(True))
116           self.objects["language_combobox"].setGeometry(210, 10, 300, 25)
117           self.objects["language_combobox"].setFont(FONT)
118           self.objects["language_combobox"].show()
119   
120           # THEME
121   
122           self.objects["theme_label"] = QLabel(parent=self, text=translate("Theme") + ":")
123           self.objects["theme_label"].setGeometry(10, 45, 200, 25)
124           self.objects["theme_label"].setFont(FONT)
125           self.objects["theme_label"].show()
126   
127           self.objects["theme_combobox"] = QComboBox(parent=self)
128           self.objects["theme_combobox"].addItems([translate(obj) for obj in THEMES.values()])
129           self.objects["theme_combobox"].setCurrentIndex([translate(obj).lower() == translate(THEMES[SETTINGS["theme"]]).lower() for obj in THEMES.values()].index(True))
130           self.objects["theme_combobox"].setGeometry(210, 45, 300, 25)
131           self.objects["theme_combobox"].setFont(FONT)
132           self.objects["theme_combobox"].show()
133   
134           # COMFIRM
135   
136           self.objects["confirm_button"] = QPushButton(parent=self, text=translate("Confirm"))
137           self.objects["confirm_button"].setGeometry(20, 740 - 80, 300, 40)
138           self.objects["confirm_button"].setFont(FONT)
139           self.objects["confirm_button"].show()
140   
141           self.objects["confirm_button"].clicked.connect(lambda event: SettingsFunctions.confirm(self.project, self, event))
142   
143           self.objects["confirm_button"].released.connect(lambda: self.objects["empty"].setFocus())
144           self.objects["confirm_button"].setStyleSheet(BUTTON_BLUE_STYLE)
145   
146           self.objects["cancel_button"] = QPushButton(parent=self, text=translate("Cancel"))
147           self.objects["cancel_button"].setGeometry(340, 740 - 80, 300, 40)
148           self.objects["cancel_button"].setFont(FONT)
149           self.objects["cancel_button"].show()
150   
151           self.objects["cancel_button"].clicked.connect(lambda event: SettingsFunctions.cancel(self.project, self, event))
152   
153           self.objects["cancel_button"].released.connect(lambda: self.objects["empty"].setFocus())
154           self.objects["cancel_button"].setStyleSheet(BUTTON_BLUE_STYLE)
155   
156           # RESET SETTINGS
157   
158           self.objects["reset_button"] = QPushButton(parent=self, text=translate("Reset settings"))
159           self.objects["reset_button"].setGeometry(960, 740 - 80, 300, 40)
160           self.objects["reset_button"].setFont(FONT)
161           self.objects["reset_button"].show()
162   
163           self.objects["reset_button"].clicked.connect(lambda event: SettingsFunctions.reset(self.project, self, event))
164   
165           self.objects["reset_button"].released.connect(lambda: self.objects["empty"].setFocus())
166           self.objects["reset_button"].setStyleSheet(BUTTON_RED_STYLE)
167   
168           # REINSTALL PYTHON
169   
170           self.objects["reset_button"] = QPushButton(parent=self, text=translate("Reinstall python"))
171           self.objects["reset_button"].setGeometry(960, 680 - 80, 300, 40)
172           self.objects["reset_button"].setFont(FONT)
173           self.objects["reset_button"].show()
174   
175           self.objects["reset_button"].clicked.connect(lambda event: SettingsFunctions.python(self.project, self, event))
176   
177           self.objects["reset_button"].released.connect(lambda: self.objects["empty"].setFocus())
178           self.objects["reset_button"].setStyleSheet(BUTTON_RED_STYLE)
179   
##### scr\modules\dialogs\file\__init__.py #####
1     from .create_project import CreateProject
2     from .open_project import OpenProject
3     from .settings import Settings
4     from .create_from_template_project import CreateFromTemplateProject
5     
##### scr\modules\dialogs\help\about.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets
4     
5     from scr.variables import *
6     
7     import datetime
8     
9     
10     class About(QDialog):
11        def __init__(self, project, parent=None) -> None:
12            QDialog.__init__(self, parent)
13    
14            self.project = project
15    
16            self.setWindowTitle(translate("About"))
17            self.setFixedSize(600, 400)
18    
19            desktop = QtWidgets.QApplication.desktop()
20            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
21    
22            self.objects = {}
23    
24            self.init()
25    
26        def init(self) -> None:
27            for element in self.objects.values():
28                element.deleteLater()
29    
30            self.objects["name"] = QLabel(parent=self)
31            self.objects["name"].setText(f"Game Engine 3 v{load(open('scr/files/version.json', 'r', encoding='utf-8'))['version']}")
32            self.objects["name"].setGeometry(40, 10, 300, 40)
33            self.objects["name"].setFont(BIG_HELP_FONT)
34            self.objects["name"].show()
35    
36            self.objects["site"] = QLabel(parent=self)
37            self.objects["site"].setFont(HELP_FONT)
38            self.objects["site"].setGeometry(10, 45, 600, 40)
39            self.objects["site"].setTextFormat(Qt.RichText)
40            self.objects["site"].setText("Site: <a href='https://artyom7774.github.io'>https://artyom7774.github.io</a>")
41            self.objects["site"].setOpenExternalLinks(True)
42            self.objects["site"].show()
43    
44            self.objects["github"] = QLabel(parent=self)
45            self.objects["github"].setFont(HELP_FONT)
46            self.objects["github"].setGeometry(10, 65, 600, 40)
47            self.objects["github"].setTextFormat(Qt.RichText)
48            self.objects["github"].setText("GitHub: <a href='https://github.com/artyom7774/Game-Engine-3'>https://github.com/artyom7774/Game-Engine-3</a>")
49            self.objects["github"].setOpenExternalLinks(True)
50            self.objects["github"].show()
51    
52            self.objects["copyright"] = QLabel(parent=self)
53            self.objects["copyright"].setAlignment(Qt.AlignCenter)
54            self.objects["copyright"].setFont(HELP_FONT)
55            self.objects["copyright"].setGeometry(0, 370, 600, 30)
56            self.objects["copyright"].setText(f"Copyright ©2023-{datetime.datetime.now().year}")
57            self.objects["copyright"].show()
58    
##### scr\modules\dialogs\help\help.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets
4     
5     from scr.variables import *
6     
7     import webbrowser
8     import threading
9     
10     
11    class Help(QMessageBox):
12        def __init__(self, project, parent=None) -> None:
13            QDialog.__init__(self, parent)
14    
15            self.project = project
16    
17            self.setWindowTitle(translate("Create file"))
18            self.setFixedSize(600, 400)
19    
20            desktop = QtWidgets.QApplication.desktop()
21            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
22    
23            self.objects = {}
24    
25            self.init()
26    
27            thr = threading.Thread(target=lambda: webbrowser.open("https://artyom7774.github.io"))
28            thr.daemon = True
29            thr.start()
30    
31        def init(self):
32            pass
33    
##### scr\modules\dialogs\help\__init__.py #####
1     from .help import Help
2     from .about import About
3     
##### scr\modules\dialogs\scene\create_interface_object.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QComboBox, QPushButton
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import shutil
10     import os
11    
12    
13    class CreateInterfaceObjectFunctions:
14        @staticmethod
15        def create(project, dialog, position, event) -> None:
16            index = dialog.objects["project_combobox"].currentIndex()
17    
18            try:
19                path = functions.project.getAllProjectInterface(project)[index]
20    
21            except IndexError:
22                return
23    
24            name = path[path.rfind("/") + 1:]
25            name = name[:path.rfind(".")]
26    
27            extension = path[path.rfind(".") + 1:]
28    
29            name = ""
30    
31            files = os.listdir(project.selectFile)
32            files.sort()
33    
34            index = 0
35    
36            for file in files:
37                for element in files:
38                    if element.endswith(f"{index}.{extension}c"):
39                        index += 1
40    
41            out = f"{project.selectFile}/{index}.{extension}c"
42    
43            shutil.copyfile(path, out)
44    
45            position = [
46                position.x() - project.objects["main"]["scene"].width() // 2 + project.cash["file"][project.selectFile].camera.pos.x,
47                position.y() - project.objects["main"]["scene"].height() // 2 + project.cash["file"][project.selectFile].camera.pos.y
48            ]
49    
50            if project.objects["main"]["scene_settings"]["Scene"]["snap"]["value"]:
51                width = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["x"]["value"]
52                height = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["y"]["value"]
53    
54                position[0] = position[0] // width * width
55                position[1] = position[1] // height * height
56    
57            with open(out, "r", encoding="utf-8") as f:
58                obj = load(f)
59    
60            if "Text" in obj:
61                obj["Text"]["pos"]["value"]["x"]["value"] = position[0]
62                obj["Text"]["pos"]["value"]["y"]["value"] = position[1]
63    
64            if "Button" in obj:
65                obj["Button"]["pos"]["value"]["x"]["value"] = position[0]
66                obj["Button"]["pos"]["value"]["y"]["value"] = position[1]
67    
68            with open(out, "w") as f:
69                dump(obj, f, indent=4)
70    
71            project.init()
72    
73            dialog.close()
74    
75    
76    class CreateInterfaceObject(QDialog):
77        def __init__(self, project, position, parent=None) -> None:
78            QDialog.__init__(self, parent)
79    
80            self.project = project
81    
82            self.position = position
83    
84            self.setWindowTitle(translate("Create interface"))
85            self.setFixedSize(600, 400)
86    
87            desktop = QtWidgets.QApplication.desktop()
88            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
89    
90            self.objects = {}
91    
92            self.init()
93    
94        def init(self) -> None:
95            self.objects["empty"] = QPushButton(parent=self)
96            self.objects["empty"].setGeometry(0, 0, 0, 0)
97    
98            # ALL PROJECTS -> COMBOBOX
99    
100            self.objects["project_label"] = QLabel(parent=self, text=translate("Interface") + ":")
101           self.objects["project_label"].setGeometry(10, 10, 200, 25)
102           self.objects["project_label"].setFont(FONT)
103           self.objects["project_label"].show()
104   
105           self.objects["project_combobox"] = QComboBox(parent=self)
106           self.objects["project_combobox"].setGeometry(210, 10, 300, 25)
107           self.objects["project_combobox"].setFont(FONT)
108           self.objects["project_combobox"].show()
109   
110           self.objects["project_combobox"].addItems(functions.project.getAllProjectInterface(self.project, True))
111   
112           # CREATE
113   
114           self.objects["open_button"] = QPushButton(parent=self, text=translate("Create"))
115           self.objects["open_button"].setStyleSheet(BUTTON_BLUE_STYLE)
116   
117           self.objects["open_button"].released.connect(lambda: self.objects["empty"].setFocus())
118   
119           self.objects["open_button"].setGeometry(150, 340, 300, 40)
120           self.objects["open_button"].setFont(FONT)
121           self.objects["open_button"].show()
122   
123           self.objects["open_button"].clicked.connect(lambda event: CreateInterfaceObjectFunctions.create(self.project, self, self.position, event))
124   
125       def keyPressEvent(self, event) -> None:
126           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
127               self.objects["open_button"].click()
128   
129           event.accept()
130   
##### scr\modules\dialogs\scene\create_scene_object.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QComboBox, QPushButton
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import shutil
10     import os
11    
12    
13    class CreateSceneObjectFunctions:
14        @staticmethod
15        def create(project, dialog, position, event) -> None:
16            index = dialog.objects["project_combobox"].currentIndex()
17    
18            try:
19                path = functions.project.getAllProjectObjects(project)[index]
20    
21            except IndexError:
22                return
23    
24            name = path[path.rfind("/") + 1:]
25            name = name[:path.rfind(".")]
26    
27            extension = path[path.rfind(".") + 1:]
28    
29            name = ""
30    
31            files = os.listdir(project.selectFile)
32            files.sort()
33    
34            index = 0
35    
36            for file in files:
37                for element in files:
38                    if element.endswith(f"{index}.{extension}c"):
39                        index += 1
40    
41            out = f"{project.selectFile}/{index}.{extension}c"
42    
43            shutil.copyfile(path, out)
44    
45            position = [
46                position.x() - project.objects["main"]["scene"].width() // 2 + project.cash["file"][project.selectFile].camera.pos.x,
47                position.y() - project.objects["main"]["scene"].height() // 2 + project.cash["file"][project.selectFile].camera.pos.y
48            ]
49    
50            if project.objects["main"]["scene_settings"]["Scene"]["snap"]["value"]:
51                width = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["x"]["value"]
52                height = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["y"]["value"]
53    
54                position[0] = position[0] // width * width
55                position[1] = position[1] // height * height
56    
57            with open(out, "r", encoding="utf-8") as f:
58                obj = load(f)
59    
60            obj["StaticObject"]["pos"]["value"]["x"]["value"] = position[0]
61            obj["StaticObject"]["pos"]["value"]["y"]["value"] = position[1]
62    
63            with open(out, "w") as f:
64                dump(obj, f, indent=4)
65    
66            project.init()
67    
68            dialog.close()
69    
70    
71    class CreateSceneObject(QDialog):
72        def __init__(self, project, position, parent=None) -> None:
73            QDialog.__init__(self, parent)
74    
75            self.project = project
76    
77            self.position = position
78    
79            self.setWindowTitle(translate("Create object"))
80            self.setFixedSize(600, 400)
81    
82            desktop = QtWidgets.QApplication.desktop()
83            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
84    
85            self.objects = {}
86    
87            self.init()
88    
89        def init(self) -> None:
90            self.objects["empty"] = QPushButton(parent=self)
91            self.objects["empty"].setGeometry(0, 0, 0, 0)
92    
93            # ALL PROJECTS -> COMBOBOX
94    
95            self.objects["project_label"] = QLabel(parent=self, text=translate("Object") + ":")
96            self.objects["project_label"].setGeometry(10, 10, 200, 25)
97            self.objects["project_label"].setFont(FONT)
98            self.objects["project_label"].show()
99    
100            self.objects["project_combobox"] = QComboBox(parent=self)
101           self.objects["project_combobox"].setGeometry(210, 10, 300, 25)
102           self.objects["project_combobox"].setFont(FONT)
103           self.objects["project_combobox"].show()
104   
105           self.objects["project_combobox"].addItems(functions.project.getAllProjectObjects(self.project, True))
106   
107           # CREATE
108   
109           self.objects["open_button"] = QPushButton(parent=self, text=translate("Create"))
110           self.objects["open_button"].setStyleSheet(BUTTON_BLUE_STYLE)
111   
112           self.objects["open_button"].released.connect(lambda: self.objects["empty"].setFocus())
113   
114           self.objects["open_button"].setGeometry(150, 340, 300, 40)
115           self.objects["open_button"].setFont(FONT)
116           self.objects["open_button"].show()
117   
118           self.objects["open_button"].clicked.connect(lambda event: CreateSceneObjectFunctions.create(self.project, self, self.position, event))
119   
120       def keyPressEvent(self, event) -> None:
121           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
122               self.objects["open_button"].click()
123   
124           event.accept()
125   
##### scr\modules\dialogs\scene\__init__.py #####
1     from .create_scene_object import CreateSceneObject
2     from .create_interface_object import CreateInterfaceObject
3     
##### scr\modules\dialogs\tree\create_button.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateButtonFunctions:
13        @staticmethod
14        def create(project, dialog, event, name: str = None, logger: bool = True, loadFile: str = "engine/files/button.json", save: str = None) -> None:
15            if save is None:
16                path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
17    
18            else:
19                path = save
20    
21            if name is None:
22                name = dialog.objects["name_entry"].text()
23    
24            # LOGGER
25    
26            if logger:
27                if name == "":
28                    dialog.objects["log_label"].setText("Imposiable button name")
29    
30                    return 0
31    
32                try:
33                    with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
34                        pass
35    
36                except BaseException:
37                    dialog.objects["log_label"].setText("Imposiable button name")
38    
39                    return 0
40    
41                for element in os.listdir(path):
42                    if element == name:
43                        dialog.objects["log_label"].setText("Button name already exist")
44    
45                        return 0
46    
47            # CREATE
48    
49            with open(loadFile, "r", encoding="utf-8") as file:
50                objects = load(file)
51    
52            out = {
53                "main": objects["main"],
54                "dependences": objects["dependences"],
55                "dependence": objects["dependences"][objects["standard"]["type"]],
56                "type": {
57                    "name": objects["name"]["type"],
58                    "value": objects["standard"]["type"],
59                    "type": objects["type"]["type"]
60                },
61                "variables": {}
62            }
63    
64            if out["type"]["type"] == "choose":
65                out["type"]["choose"] = objects["specials"]["choose"]["type"]
66    
67            for element in list(set([key for key in objects["dependences"].keys()] + [out["type"]["value"]])):
68                for value in objects["objects"][element]:
69                    if element not in out:
70                        out[element] = {}
71    
72                    if objects["type"][value] in ("choose", "choosing"):
73                        out[element][value] = {
74                            "name": objects["name"][value],
75                            "value": objects["standard"][value],
76                            "type": objects["type"][value],
77                            "choose": objects["specials"]["choose"][value]
78                        }
79    
80                    elif objects["type"][value] == "scroll":
81                        out[element][value] = {
82                            "name": objects["name"][value],
83                            "value": objects["standard"][value],
84                            "type": objects["type"][value],
85                            "scroll": objects["specials"]["scroll"][value]
86                        }
87    
88                    else:
89                        out[element][value] = {
90                            "name": objects["name"][value],
91                            "value": objects["standard"][value],
92                            "type": objects["type"][value]
93                        }
94    
95            if name == "":
96                with open(f"{path}", "w", encoding="utf-8") as file:
97                    dump(out, file, indent=4)
98    
99            else:
100                with open(f"{path}/{name}.btn", "w", encoding="utf-8") as file:
101                   dump(out, file, indent=4)
102   
103           project.init()
104   
105           if dialog is not None:
106               dialog.close()
107   
108   
109   class CreateButton(QDialog):
110       def __init__(self, project, parent=None) -> None:
111           QDialog.__init__(self, parent)
112   
113           self.project = project
114   
115           self.setWindowTitle(translate("Create button"))
116           self.setFixedSize(600, 400)
117   
118           desktop = QtWidgets.QApplication.desktop()
119           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
120   
121           self.objects = {}
122   
123           self.init()
124   
125       def init(self) -> None:
126           self.objects["empty"] = QPushButton(parent=self)
127           self.objects["empty"].setGeometry(0, 0, 0, 0)
128   
129           # NAME
130   
131           self.objects["name_label"] = QLabel(parent=self, text=translate("Button name") + ":")
132           self.objects["name_label"].setGeometry(10, 10, 200, 25)
133           self.objects["name_label"].setFont(FONT)
134           self.objects["name_label"].show()
135   
136           self.objects["name_entry"] = QLineEdit(parent=self)
137           self.objects["name_entry"].setGeometry(210, 10, 300, 25)
138           self.objects["name_entry"].setFont(FONT)
139           self.objects["name_entry"].show()
140   
141           # LOG TEXT
142   
143           self.objects["log_label"] = QLabel(parent=self, text="")
144           self.objects["log_label"].setGeometry(0, 310, 600, 20)
145           self.objects["log_label"].setFont(FONT)
146           self.objects["log_label"].show()
147   
148           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
149           self.objects["log_label"].setStyleSheet("color: red;")
150   
151           # CREATE
152   
153           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
154           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
155   
156           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
157   
158           self.objects["create_button"].setGeometry(150, 340, 300, 40)
159           self.objects["create_button"].setFont(FONT)
160           self.objects["create_button"].show()
161   
162           self.objects["create_button"].clicked.connect(lambda event: CreateButtonFunctions.create(self.project, self, event))
163   
164       def keyPressEvent(self, event) -> None:
165           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
166               self.objects["create_button"].click()
167   
168           event.accept()
169   
##### scr\modules\dialogs\tree\create_dir.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateDirFunctions:
13        @staticmethod
14        def create(project, dialog, event) -> None:
15            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
16    
17            name = dialog.objects["name_entry"].text()
18    
19            # LOGGER
20    
21            if name == "":
22                dialog.objects["log_label"].setText("Imposiable directory name")
23    
24                return 0
25    
26            try:
27                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
28                    pass
29    
30            except BaseException:
31                dialog.objects["log_label"].setText("Imposiable directory name")
32    
33                return 0
34    
35            for element in os.listdir(path):
36                if element == name:
37                    dialog.objects["log_label"].setText("Directory name already exist")
38    
39                    return 0
40    
41            # CREATE
42    
43            os.mkdir(f"{path}/{name}")
44    
45            project.init()
46    
47            dialog.close()
48    
49    
50    class CreateDir(QDialog):
51        def __init__(self, project, parent=None) -> None:
52            QDialog.__init__(self, parent)
53    
54            self.project = project
55    
56            self.setWindowTitle(translate("Create directory"))
57            self.setFixedSize(600, 400)
58    
59            desktop = QtWidgets.QApplication.desktop()
60            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
61    
62            self.objects = {}
63    
64            self.init()
65    
66        def init(self) -> None:
67            self.objects["empty"] = QPushButton(parent=self)
68            self.objects["empty"].setGeometry(0, 0, 0, 0)
69    
70            # NAME
71    
72            self.objects["name_label"] = QLabel(parent=self, text=translate("Directory name") + ":")
73            self.objects["name_label"].setGeometry(10, 10, 200, 25)
74            self.objects["name_label"].setFont(FONT)
75            self.objects["name_label"].show()
76    
77            self.objects["name_entry"] = QLineEdit(parent=self)
78            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
79            self.objects["name_entry"].setFont(FONT)
80            self.objects["name_entry"].show()
81    
82            # LOG TEXT
83    
84            self.objects["log_label"] = QLabel(parent=self, text="")
85            self.objects["log_label"].setGeometry(0, 310, 600, 20)
86            self.objects["log_label"].setFont(FONT)
87            self.objects["log_label"].show()
88    
89            self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
90            self.objects["log_label"].setStyleSheet("color: red;")
91    
92            # CREATE
93    
94            self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
95            self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
96    
97            self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
98    
99            self.objects["create_button"].setGeometry(150, 340, 300, 40)
100            self.objects["create_button"].setFont(FONT)
101           self.objects["create_button"].show()
102   
103           self.objects["create_button"].clicked.connect(lambda event: CreateDirFunctions.create(self.project, self, event))
104   
105       def keyPressEvent(self, event) -> None:
106           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
107               self.objects["create_button"].click()
108   
109           event.accept()
110   
##### scr\modules\dialogs\tree\create_file.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateFileFunctions:
13        @staticmethod
14        def create(project, dialog, event) -> None:
15            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
16    
17            name = dialog.objects["name_entry"].text() + "." + dialog.objects["extension_entry"].text()
18    
19            # LOGGER
20    
21            if name == "":
22                dialog.objects["log_label"].setText("Imposiable file name")
23    
24                return 0
25    
26            if dialog.objects["extension_entry"].text() in ("cfg", *BLOCKED_FORMATES):
27                dialog.objects["log_label"].setText("Imposiable file extension")
28    
29                return 0
30    
31            if name[-1] == ".":
32                dialog.objects["log_label"].setText("File extension is not found")
33    
34                return 0
35    
36            try:
37                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
38                    pass
39    
40            except BaseException:
41                dialog.objects["log_label"].setText("Imposiable File name")
42    
43                return 0
44    
45            for element in os.listdir(path):
46                if element == name:
47                    dialog.objects["log_label"].setText("File name already exist")
48    
49                    return 0
50    
51            # CREATE
52    
53            with open(f"{path}/{name}", "w", encoding="utf-8") as file:
54                pass
55    
56            project.init()
57    
58            dialog.close()
59    
60    
61    class CreateFile(QDialog):
62        def __init__(self, project, parent=None) -> None:
63            QDialog.__init__(self, parent)
64    
65            self.project = project
66    
67            self.setWindowTitle(translate("Create file"))
68            self.setFixedSize(600, 400)
69    
70            desktop = QtWidgets.QApplication.desktop()
71            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
72    
73            self.objects = {}
74    
75            self.init()
76    
77        def init(self) -> None:
78            self.objects["empty"] = QPushButton(parent=self)
79            self.objects["empty"].setGeometry(0, 0, 0, 0)
80    
81            # NAME
82    
83            self.objects["name_label"] = QLabel(parent=self, text=translate("File name") + ":")
84            self.objects["name_label"].setGeometry(10, 10, 200, 25)
85            self.objects["name_label"].setFont(FONT)
86            self.objects["name_label"].show()
87    
88            self.objects["name_entry"] = QLineEdit(parent=self)
89            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
90            self.objects["name_entry"].setFont(FONT)
91            self.objects["name_entry"].show()
92    
93            # EXTENSION
94    
95            self.objects["extension_label"] = QLabel(parent=self, text=translate("File extension") + ":")
96            self.objects["extension_label"].setGeometry(10, 45, 200, 25)
97            self.objects["extension_label"].setFont(FONT)
98            self.objects["extension_label"].show()
99    
100            self.objects["extension_entry"] = QLineEdit(parent=self)
101           self.objects["extension_entry"].setGeometry(210, 45, 300, 25)
102           self.objects["extension_entry"].setFont(FONT)
103           self.objects["extension_entry"].show()
104   
105           # LOG TEXT
106   
107           self.objects["log_label"] = QLabel(parent=self, text="")
108           self.objects["log_label"].setGeometry(0, 310, 600, 20)
109           self.objects["log_label"].setFont(FONT)
110           self.objects["log_label"].show()
111   
112           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
113           self.objects["log_label"].setStyleSheet("color: red;")
114   
115           # CREATE
116   
117           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
118           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
119   
120           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
121   
122           self.objects["create_button"].setGeometry(150, 340, 300, 40)
123           self.objects["create_button"].setFont(FONT)
124           self.objects["create_button"].show()
125   
126           self.objects["create_button"].clicked.connect(lambda event: CreateFileFunctions.create(self.project, self, event))
127   
128       def keyPressEvent(self, event) -> None:
129           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
130               self.objects["create_button"].click()
131   
132           event.accept()
133   
##### scr\modules\dialogs\tree\create_function.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    CODE_BASE_FILE = dumps({"variables": {}, "objects": {}}, indent=4)
12    
13    
14    class CreateFunctionFunctions:
15        @staticmethod
16        def create(project, dialog, event) -> None:
17            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
18    
19            name = dialog.objects["name_entry"].text()
20    
21            # LOGGER
22    
23            if name == "":
24                dialog.objects["log_label"].setText("Imposiable function name")
25    
26                return 0
27    
28            try:
29                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
30                    pass
31    
32            except BaseException:
33                dialog.objects["log_label"].setText("Imposiable function name")
34    
35                return 0
36    
37            for element in os.listdir(path):
38                if element == name:
39                    dialog.objects["log_label"].setText("Function name already exist")
40    
41                    return 0
42    
43            # CREATE
44    
45            with open(f"{path}/{name}.func", "w", encoding="utf-8") as file:
46                file.write(CODE_BASE_FILE)
47    
48            project.init()
49    
50            dialog.close()
51    
52    
53    class CreateFunction(QDialog):
54        def __init__(self, project, parent=None) -> None:
55            QDialog.__init__(self, parent)
56    
57            self.project = project
58    
59            self.setWindowTitle(translate("Create function"))
60            self.setFixedSize(600, 400)
61    
62            desktop = QtWidgets.QApplication.desktop()
63            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
64    
65            self.objects = {}
66    
67            self.init()
68    
69        def init(self) -> None:
70            self.objects["empty"] = QPushButton(parent=self)
71            self.objects["empty"].setGeometry(0, 0, 0, 0)
72    
73            # NAME
74    
75            self.objects["name_label"] = QLabel(parent=self, text=translate("Function name") + ":")
76            self.objects["name_label"].setGeometry(10, 10, 200, 25)
77            self.objects["name_label"].setFont(FONT)
78            self.objects["name_label"].show()
79    
80            self.objects["name_entry"] = QLineEdit(parent=self)
81            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
82            self.objects["name_entry"].setFont(FONT)
83            self.objects["name_entry"].show()
84    
85            # LOG TEXT
86    
87            self.objects["log_label"] = QLabel(parent=self, text="")
88            self.objects["log_label"].setGeometry(0, 310, 600, 20)
89            self.objects["log_label"].setFont(FONT)
90            self.objects["log_label"].show()
91    
92            self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
93            self.objects["log_label"].setStyleSheet("color: red;")
94    
95            # CREATE
96    
97            self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
98            self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
99    
100            self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
101   
102           self.objects["create_button"].setGeometry(150, 340, 300, 40)
103           self.objects["create_button"].setFont(FONT)
104           self.objects["create_button"].show()
105   
106           self.objects["create_button"].clicked.connect(lambda event: CreateFunctionFunctions.create(self.project, self, event))
107   
108       def keyPressEvent(self, event) -> None:
109           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
110               self.objects["create_button"].click()
111   
112           event.accept()
113   
##### scr\modules\dialogs\tree\create_object.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateObjectFunctions:
13        @staticmethod
14        def create(project, dialog, event, name: str = None, logger: bool = True, loadFile: str = "engine/files/objects.json", save: str = None) -> None:
15            if save is None:
16                path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
17    
18            else:
19                path = save
20    
21            if name is None:
22                name = dialog.objects["name_entry"].text()
23    
24            # LOGGER
25    
26            if logger:
27                if name == "":
28                    dialog.objects["log_label"].setText("Imposiable object name")
29    
30                    return 0
31    
32                try:
33                    with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
34                        pass
35    
36                except BaseException:
37                    dialog.objects["log_label"].setText("Imposiable object name")
38    
39                    return 0
40    
41                for element in os.listdir(path):
42                    if element == name:
43                        dialog.objects["log_label"].setText("Object name already exist")
44    
45                        return 0
46    
47            # CREATE
48    
49            with open(loadFile, "r", encoding="utf-8") as file:
50                objects = load(file)
51    
52            out = {
53                "dependences": objects["dependences"],
54                "dependence": objects["dependences"][objects["standard"]["type"]],
55                "type": {
56                    "name": objects["name"]["type"],
57                    "value": objects["standard"]["type"],
58                    "type": objects["type"]["type"]
59                },
60                "variables": {}
61            }
62    
63            if "main" in objects:
64                out["main"] = objects["main"]
65    
66            if out["type"]["type"] == "choose":
67                out["type"]["choose"] = objects["specials"]["choose"]["type"]
68    
69            for element in list(set([key for key in objects["dependences"].keys()] + [out["type"]["value"]])):
70                for value in objects["objects"][element]:
71                    if element not in out:
72                        out[element] = {}
73    
74                    if objects["type"][value] in ("choose", "choosing"):
75                        out[element][value] = {
76                            "name": objects["name"][value],
77                            "value": objects["standard"][value],
78                            "type": objects["type"][value],
79                            "choose": objects["specials"]["choose"][value]
80                        }
81    
82                    elif objects["type"][value] == "scroll":
83                        out[element][value] = {
84                            "name": objects["name"][value],
85                            "value": objects["standard"][value],
86                            "type": objects["type"][value],
87                            "scroll": objects["specials"]["scroll"][value]
88                        }
89    
90                    else:
91                        out[element][value] = {
92                            "name": objects["name"][value],
93                            "value": objects["standard"][value],
94                            "type": objects["type"][value]
95                        }
96    
97            if name == "":
98                with open(f"{path}", "w", encoding="utf-8") as file:
99                    dump(out, file, indent=4)
100    
101           else:
102               with open(f"{path}/{name}.obj", "w", encoding="utf-8") as file:
103                   dump(out, file, indent=4)
104   
105           project.init()
106   
107           if dialog is not None:
108               dialog.close()
109   
110   
111   class CreateObject(QDialog):
112       def __init__(self, project, parent=None) -> None:
113           QDialog.__init__(self, parent)
114   
115           self.project = project
116   
117           self.setWindowTitle(translate("Create object"))
118           self.setFixedSize(600, 400)
119   
120           desktop = QtWidgets.QApplication.desktop()
121           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
122   
123           self.objects = {}
124   
125           self.init()
126   
127       def init(self) -> None:
128           self.objects["empty"] = QPushButton(parent=self)
129           self.objects["empty"].setGeometry(0, 0, 0, 0)
130   
131           # NAME
132   
133           self.objects["name_label"] = QLabel(parent=self, text=translate("Object name") + ":")
134           self.objects["name_label"].setGeometry(10, 10, 200, 25)
135           self.objects["name_label"].setFont(FONT)
136           self.objects["name_label"].show()
137   
138           self.objects["name_entry"] = QLineEdit(parent=self)
139           self.objects["name_entry"].setGeometry(210, 10, 300, 25)
140           self.objects["name_entry"].setFont(FONT)
141           self.objects["name_entry"].show()
142   
143           # LOG TEXT
144   
145           self.objects["log_label"] = QLabel(parent=self, text="")
146           self.objects["log_label"].setGeometry(0, 310, 600, 20)
147           self.objects["log_label"].setFont(FONT)
148           self.objects["log_label"].show()
149   
150           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
151           self.objects["log_label"].setStyleSheet("color: red;")
152   
153           # CREATE
154   
155           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
156           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
157   
158           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
159   
160           self.objects["create_button"].setGeometry(150, 340, 300, 40)
161           self.objects["create_button"].setFont(FONT)
162           self.objects["create_button"].show()
163   
164           self.objects["create_button"].clicked.connect(lambda event: CreateObjectFunctions.create(self.project, self, event))
165   
166       def keyPressEvent(self, event) -> None:
167           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
168               self.objects["create_button"].click()
169   
170           event.accept()
171   
##### scr\modules\dialogs\tree\create_scene.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateSceneFunctions:
13        @staticmethod
14        def create(project, dialog, event) -> None:
15            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
16    
17            name = dialog.objects["name_entry"].text()
18    
19            # LOGGER
20    
21            if name == "":
22                dialog.objects["log_label"].setText("Imposiable scene name")
23    
24                return 0
25    
26            try:
27                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
28                    pass
29    
30            except BaseException:
31                dialog.objects["log_label"].setText("Imposiable scene name")
32    
33                return 0
34    
35            for element in os.listdir(path):
36                if element == name:
37                    dialog.objects["log_label"].setText("Scene name already exist")
38    
39                    return 0
40    
41            # CREATE
42    
43            os.mkdir(f"{path}/%scene%{name}")
44    
45            project.init()
46    
47            dialog.close()
48    
49    
50    class CreateScene(QDialog):
51        def __init__(self, project, parent=None) -> None:
52            QDialog.__init__(self, parent)
53    
54            self.project = project
55    
56            self.setWindowTitle(translate("Create scene"))
57            self.setFixedSize(600, 400)
58    
59            desktop = QtWidgets.QApplication.desktop()
60            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
61    
62            self.objects = {}
63    
64            self.init()
65    
66        def init(self) -> None:
67            self.objects["empty"] = QPushButton(parent=self)
68            self.objects["empty"].setGeometry(0, 0, 0, 0)
69    
70            # NAME
71    
72            self.objects["name_label"] = QLabel(parent=self, text=translate("Scene name") + ":")
73            self.objects["name_label"].setGeometry(10, 10, 200, 25)
74            self.objects["name_label"].setFont(FONT)
75            self.objects["name_label"].show()
76    
77            self.objects["name_entry"] = QLineEdit(parent=self)
78            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
79            self.objects["name_entry"].setFont(FONT)
80            self.objects["name_entry"].show()
81    
82            # LOG TEXT
83    
84            self.objects["log_label"] = QLabel(parent=self, text="")
85            self.objects["log_label"].setGeometry(0, 310, 600, 20)
86            self.objects["log_label"].setFont(FONT)
87            self.objects["log_label"].show()
88    
89            self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
90            self.objects["log_label"].setStyleSheet("color: red;")
91    
92            # CREATE
93    
94            self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
95            self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
96    
97            self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
98    
99            self.objects["create_button"].setGeometry(150, 340, 300, 40)
100            self.objects["create_button"].setFont(FONT)
101           self.objects["create_button"].show()
102   
103           self.objects["create_button"].clicked.connect(lambda event: CreateSceneFunctions.create(self.project, self, event))
104   
105       def keyPressEvent(self, event) -> None:
106           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
107               self.objects["create_button"].click()
108   
109           event.accept()
110   
##### scr\modules\dialogs\tree\create_text.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     
11    
12    class CreateTextFunctions:
13        @staticmethod
14        def create(project, dialog, event, name: str = None, logger: bool = True, loadFile: str = "engine/files/text.json", save: str = None) -> None:
15            if save is None:
16                path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
17    
18            else:
19                path = save
20    
21            if name is None:
22                name = dialog.objects["name_entry"].text()
23    
24            # LOGGER
25    
26            if logger:
27                if name == "":
28                    dialog.objects["log_label"].setText("Imposiable text name")
29    
30                    return 0
31    
32                try:
33                    with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
34                        pass
35    
36                except BaseException:
37                    dialog.objects["log_label"].setText("Imposiable text name")
38    
39                    return 0
40    
41                for element in os.listdir(path):
42                    if element == name:
43                        dialog.objects["log_label"].setText("Text name already exist")
44    
45                        return 0
46    
47            # CREATE
48    
49            with open(loadFile, "r", encoding="utf-8") as file:
50                objects = load(file)
51    
52            out = {
53                "main": objects["main"],
54                "dependences": objects["dependences"],
55                "dependence": objects["dependences"][objects["standard"]["type"]],
56                "type": {
57                    "name": objects["name"]["type"],
58                    "value": objects["standard"]["type"],
59                    "type": objects["type"]["type"]
60                },
61                "variables": {}
62            }
63    
64            if out["type"]["type"] == "choose":
65                out["type"]["choose"] = objects["specials"]["choose"]["type"]
66    
67            for element in list(set([key for key in objects["dependences"].keys()] + [out["type"]["value"]])):
68                for value in objects["objects"][element]:
69                    if element not in out:
70                        out[element] = {}
71    
72                    if objects["type"][value] in ("choose", "choosing"):
73                        out[element][value] = {
74                            "name": objects["name"][value],
75                            "value": objects["standard"][value],
76                            "type": objects["type"][value],
77                            "choose": objects["specials"]["choose"][value]
78                        }
79    
80                    elif objects["type"][value] == "scroll":
81                        out[element][value] = {
82                            "name": objects["name"][value],
83                            "value": objects["standard"][value],
84                            "type": objects["type"][value],
85                            "scroll": objects["specials"]["scroll"][value]
86                        }
87    
88                    else:
89                        out[element][value] = {
90                            "name": objects["name"][value],
91                            "value": objects["standard"][value],
92                            "type": objects["type"][value]
93                        }
94    
95            if name == "":
96                with open(f"{path}", "w", encoding="utf-8") as file:
97                    dump(out, file, indent=4)
98    
99            else:
100                with open(f"{path}/{name}.text", "w", encoding="utf-8") as file:
101                   dump(out, file, indent=4)
102   
103           project.init()
104   
105           if dialog is not None:
106               dialog.close()
107   
108   
109   class CreateText(QDialog):
110       def __init__(self, project, parent=None) -> None:
111           QDialog.__init__(self, parent)
112   
113           self.project = project
114   
115           self.setWindowTitle(translate("Create text"))
116           self.setFixedSize(600, 400)
117   
118           desktop = QtWidgets.QApplication.desktop()
119           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
120   
121           self.objects = {}
122   
123           self.init()
124   
125       def init(self) -> None:
126           self.objects["empty"] = QPushButton(parent=self)
127           self.objects["empty"].setGeometry(0, 0, 0, 0)
128   
129           # NAME
130   
131           self.objects["name_label"] = QLabel(parent=self, text=translate("Text name") + ":")
132           self.objects["name_label"].setGeometry(10, 10, 200, 25)
133           self.objects["name_label"].setFont(FONT)
134           self.objects["name_label"].show()
135   
136           self.objects["name_entry"] = QLineEdit(parent=self)
137           self.objects["name_entry"].setGeometry(210, 10, 300, 25)
138           self.objects["name_entry"].setFont(FONT)
139           self.objects["name_entry"].show()
140   
141           # LOG TEXT
142   
143           self.objects["log_label"] = QLabel(parent=self, text="")
144           self.objects["log_label"].setGeometry(0, 310, 600, 20)
145           self.objects["log_label"].setFont(FONT)
146           self.objects["log_label"].show()
147   
148           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
149           self.objects["log_label"].setStyleSheet("color: red;")
150   
151           # CREATE
152   
153           self.objects["create_button"] = QPushButton(parent=self, text=translate("Create"))
154           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
155   
156           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
157   
158           self.objects["create_button"].setGeometry(150, 340, 300, 40)
159           self.objects["create_button"].setFont(FONT)
160           self.objects["create_button"].show()
161   
162           self.objects["create_button"].clicked.connect(lambda event: CreateTextFunctions.create(self.project, self, event))
163   
164       def keyPressEvent(self, event) -> None:
165           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
166               self.objects["create_button"].click()
167   
168           event.accept()
169   
##### scr\modules\dialogs\tree\rename_object.py #####
1     from PyQt5.QtWidgets import QDialog, QLabel, QPushButton, QLineEdit
2     from PyQt5.QtCore import Qt
3     from PyQt5 import QtWidgets, QtCore
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath
6     
7     from scr.variables import *
8     
9     import os
10     import re
11    
12    
13    class RenameObjectFunctions:
14        @staticmethod
15        def rename(project, dialog, event) -> None:
16            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
17    
18            name = dialog.objects["name_entry"].text()
19    
20            # LOGGER
21    
22            if name == "":
23                dialog.objects["log_label"].setText("Imposiable object name")
24    
25                return 0
26    
27            try:
28                with open(f"scr/files/using/{name}", "w", encoding="utf-8") as file:
29                    pass
30    
31            except BaseException:
32                dialog.objects["log_label"].setText("Imposiable object name")
33    
34                return 0
35    
36            for element in os.listdir(path if os.path.isdir(path) else path[:path.rfind("/")]):
37                if element == name:
38                    dialog.objects["log_label"].setText("Object name already exist")
39    
40                    return 0
41    
42            # UPDATE FILES
43    
44            last = path[path.rfind("/") + 1:]
45            extension = last[last.rfind(".") + 1:]
46    
47            specials = "".join(re.findall(r'%.*?%', last))
48    
49            if os.path.isdir(path):
50                last, extension = extension, last
51    
52            else:
53                pass
54    
55            # RENAME
56    
57            try:
58                if os.path.isfile(path):
59                    os.rename(path, path[:path.rfind("/")] + "/" + specials + name + "." + extension)
60    
61                else:
62                    os.rename(path, path[:path.rfind("/")] + "/" + specials + name)
63    
64            except FileExistsError:
65                MessageBox.error("file exists in this directory")
66    
67            project.init()
68    
69            dialog.close()
70    
71    
72    class RenameObject(QDialog):
73        def __init__(self, project, parent=None) -> None:
74            QDialog.__init__(self, parent)
75    
76            self.project = project
77    
78            self.setWindowTitle(translate("Rename object"))
79            self.setFixedSize(600, 400)
80    
81            desktop = QtWidgets.QApplication.desktop()
82            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
83    
84            self.objects = {}
85    
86            self.init()
87    
88        def init(self) -> None:
89            self.objects["empty"] = QPushButton(parent=self)
90            self.objects["empty"].setGeometry(0, 0, 0, 0)
91    
92            # NAME
93    
94            self.objects["name_label"] = QLabel(parent=self, text=translate("New name") + ":")
95            self.objects["name_label"].setGeometry(10, 10, 200, 25)
96            self.objects["name_label"].setFont(FONT)
97            self.objects["name_label"].show()
98    
99            self.objects["name_entry"] = QLineEdit(parent=self)
100            self.objects["name_entry"].setGeometry(210, 10, 300, 25)
101           self.objects["name_entry"].setFont(FONT)
102           self.objects["name_entry"].show()
103   
104           # LOG TEXT
105   
106           self.objects["log_label"] = QLabel(parent=self, text="")
107           self.objects["log_label"].setGeometry(0, 310, 600, 20)
108           self.objects["log_label"].setFont(FONT)
109           self.objects["log_label"].show()
110   
111           self.objects["log_label"].setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
112           self.objects["log_label"].setStyleSheet("color: red;")
113   
114           # CREATE
115   
116           self.objects["create_button"] = QPushButton(parent=self, text=translate("Rename"))
117           self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
118   
119           self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
120   
121           self.objects["create_button"].setGeometry(150, 340, 300, 40)
122           self.objects["create_button"].setFont(FONT)
123           self.objects["create_button"].show()
124   
125           self.objects["create_button"].clicked.connect(lambda event: RenameObjectFunctions.rename(self.project, self, event))
126   
127       def keyPressEvent(self, event) -> None:
128           if event.key() in (Qt.Key_Enter, Qt.Key_Return):
129               self.objects["create_button"].click()
130   
131           event.accept()
132   
##### scr\modules\dialogs\tree\__init__.py #####
1     from .create_function import CreateFunction
2     from .create_scene import CreateScene
3     from .create_dir import CreateDir
4     from .create_file import CreateFile
5     from .rename_object import RenameObject
6     from .create_object import CreateObject
7     from .create_text import CreateText
8     from .create_button import CreateButton
9     
##### scr\modules\dialogs\__init__.py #####
1     from .tree import *
2     from .file import *
3     from .help import *
4     from .code import *
5     
6     from .scene import *
7     
8     from .animator import *
9     
##### scr\modules\functions\algorithm.py #####
1     import functools
2     import typing
3     import math
4     
5     from engine.functions.cache import cache
6     
7     
8     def cacheBezierCurve(func):
9         cache = {}
10     
11        @functools.wraps(func)
12        def wrapper(*args, **kwargs):
13            x0, y0, x1, y1, x2, y2, x3, y3, d = args
14    
15            key = f"{x0 - x1}-{x1 - x2}-{x2 - x3}-{y0 - y1}-{y1 - y2}-{y2 - y3}-{d}"
16    
17            if key not in cache:
18                cache[key] = {
19                    "pos": (x0, y0),
20                    "value": func(*args, **kwargs)
21                }
22    
23            px = x0 - cache[key]["pos"][0]
24            py = y0 - cache[key]["pos"][1]
25    
26            if px == 0 and py == 0:
27                return cache[key]["value"]
28    
29            return [[element[0] + px, element[1] + py] for element in cache[key]["value"]]
30    
31        return wrapper
32    
33    
34    @cacheBezierCurve
35    def bezierCurveDeep(x0: int, y0: int, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, d: int) -> typing.List[typing.List[int]]:
36        def function(x0: int, y0: int, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, d: int) -> typing.List[int]:
37            px = (x3 - x0) / 3
38            py = (y3 - y0) / 3
39    
40            mx1 = x1 - x0 - px
41            my1 = y1 - y0 - py
42            mx2 = x2 - x3 + px
43            my2 = y2 - y3 + py
44    
45            d1 = math.sqrt(mx1 ** 2 + my1 ** 2)
46            d2 = math.sqrt(mx2 ** 2 + my2 ** 2)
47    
48            if d1 < d and d2 < d:
49                answer.append([x3, y3])
50    
51            else:
52                x01 = (x0 + x1) / 2
53                y01 = (y0 + y1) / 2
54                x12 = (x1 + x2) / 2
55                y12 = (y1 + y2) / 2
56                x23 = (x2 + x3) / 2
57                y23 = (y2 + y3) / 2
58                x012 = (x01 + x12) / 2
59                y012 = (y01 + y12) / 2
60                x123 = (x12 + x23) / 2
61                y123 = (y12 + y23) / 2
62                x0123 = (x012 + x123) / 2
63                y0123 = (y012 + y123) / 2
64    
65                function(x0, y0, x01, y01, x012, y012, x0123, y0123, d)
66                function(x0123, y0123, x123, y123, x23, y23, x3, y3, d)
67    
68        answer = []
69    
70        function(x0, y0, x1, y1, x2, y2, x3, y3, d)
71    
72        return [[math.ceil(element[0]), math.ceil(element[1])] if i not in (0, len(answer) - 1) else element for i, element in enumerate(answer)]
73    
74    
75    @cacheBezierCurve
76    def bezierCurveWidth(x0: int, y0: int, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, d: int) -> typing.List[typing.List[int]]:
77        answer = [[x0, y0]]
78    
79        stack = [[x0, y0, x1, y1, x2, y2, x3, y3]]
80    
81        while stack:
82            var = stack.pop()
83    
84            x0, y0, x1, y1, x2, y2, x3, y3 = var
85    
86            px = (x3 - x0) / 3
87            py = (y3 - y0) / 3
88    
89            mx1 = x1 - x0 - px
90            my1 = y1 - y0 - py
91            mx2 = x2 - x3 + px
92            my2 = y2 - y3 + py
93    
94            d1 = math.sqrt(mx1 ** 2 + my1 ** 2)
95            d2 = math.sqrt(mx2 ** 2 + my2 ** 2)
96    
97            if d1 < d and d2 < d:
98                answer.append([x3, y3])
99    
100            else:
101               x01 = (x0 + x1) / 2
102               y01 = (y0 + y1) / 2
103               x12 = (x1 + x2) / 2
104               y12 = (y1 + y2) / 2
105               x23 = (x2 + x3) / 2
106               y23 = (y2 + y3) / 2
107               x012 = (x01 + x12) / 2
108               y012 = (y01 + y12) / 2
109               x123 = (x12 + x23) / 2
110               y123 = (y12 + y23) / 2
111               x0123 = (x012 + x123) / 2
112               y0123 = (y012 + y123) / 2
113   
114               stack.append([x0123, y0123, x123, y123, x23, y23, x3, y3])
115               stack.append([x0, y0, x01, y01, x012, y012, x0123, y0123])
116   
117       answer.append([x3, y3])
118   
119       return answer
120   
##### scr\modules\functions\main\files\button.py #####
1     from PyQt5.QtWidgets import QLabel, QScrollBar, QColorDialog, QCheckBox, QComboBox, QTreeWidget, QDialog, QTreeWidgetItem, QWidget, QHBoxLayout, QSizePolicy, QSpacerItem, QPushButton
2     from PyQt5.QtCore import Qt
3     from PyQt5.QtGui import QColor, QPixmap, QImage
4     from PyQt5 import QtWidgets
5     
6     from scr.modules.widgets import FocusLineEdit, FocusComboBox
7     
8     from scr.modules.functions.main.files.code import CodeAdditionsVarsType
9     
10     from PIL import Image
11    
12    from engine.vector.int import Vec4i
13    
14    from scr.variables import *
15    
16    import math
17    import os
18    
19    SORTING_BUTTON_TYPES = {
20        "Button": 1
21    }
22    
23    
24    def fontCreateDialog(project, widget, path: str = None, value: str = None):
25        project.dialog = ChooseFontDialog(project, project, path, value, widget)
26        project.dialog.exec_()
27    
28    
29    def colorCreateDialog(project, widget, path: str = None, value: str = None):
30        color = QColorDialog.getColor(QColor(value), None, translate("Color"))
31    
32        if color.isValid():
33            color = color.name()
34    
35            widget.out = color
36    
37            widget.saveAllValues()
38    
39            project.init()
40    
41    
42    class ChooseFontFunction:
43        @staticmethod
44        def choose(project, dialog, event, widget):
45            name = FONT_LIST[dialog.objects["choose_combobox"].currentIndex()]
46    
47            widget.setText(name)
48    
49            widget.saveAllValues()
50    
51            dialog.close()
52    
53            project.init()
54    
55    
56    class ChooseFontDialog(QDialog):
57        def __init__(self, project, parent, key, value, widget) -> None:
58            QDialog.__init__(self, parent)
59    
60            self.project = project
61    
62            self.key = key
63            self.value = value
64    
65            self.widget = widget
66    
67            self.setWindowTitle(translate("Choose font"))
68            self.setFixedSize(600, 400)
69    
70            desktop = QtWidgets.QApplication.desktop()
71            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
72    
73            self.application = None
74    
75            self.objects = {}
76    
77            self.init()
78    
79        def init(self) -> None:
80            self.objects["empty"] = QPushButton(parent=self)
81            self.objects["empty"].setGeometry(0, 0, 0, 0)
82    
83            # ALL PROJECTS -> COMBOBOX
84    
85            self.objects["choose_label"] = QLabel(parent=self, text=translate("Font") + ":")
86            self.objects["choose_label"].setGeometry(10, 10, 200, 25)
87            self.objects["choose_label"].setFont(FONT)
88            self.objects["choose_label"].show()
89    
90            self.objects["choose_combobox"] = QComboBox(parent=self)
91            self.objects["choose_combobox"].setGeometry(210, 10, 300, 25)
92            self.objects["choose_combobox"].setFont(FONT)
93            self.objects["choose_combobox"].show()
94    
95            self.objects["choose_combobox"].addItems(FONT_LIST)
96            self.objects["choose_combobox"].setCurrentIndex(FONT_LIST.index(self.value))
97    
98            self.objects["choose_combobox"].currentIndexChanged.connect(lambda: self.fontVisiable())
99    
100            # CHOOSE
101   
102           self.objects["choose_button"] = QPushButton(parent=self, text=translate("Choose"))
103           self.objects["choose_button"].setStyleSheet(BUTTON_BLUE_STYLE)
104   
105           self.objects["choose_button"].released.connect(lambda: self.objects["empty"].setFocus())
106   
107           self.objects["choose_button"].setGeometry(150, 340, 300, 40)
108           self.objects["choose_button"].setFont(FONT)
109           self.objects["choose_button"].show()
110   
111           self.objects["choose_button"].clicked.connect(lambda event: ChooseFontFunction.choose(self.project, self, event, self.widget))
112   
113           # FONT
114   
115           self.objects["font"] = QLabel(self)
116           self.objects["font"].setGeometry(20, 50, 560, 280)
117           self.objects["font"].show()
118   
119           # APPLICATION
120   
121           self.application = self.project.engine.Application(autoUpdateScreen=False, visiable=False)
122           self.application.setSize(560, 280)
123   
124           self.application.setCamera(self.project.engine.camera.StaticCamera(self.application, 0, 0))
125   
126           self.fontVisiable()
127   
128       def fontVisiable(self):
129           self.application.objects.removeByGroup("font")
130   
131           self.application.objects.add(self.project.engine.objects.Text(self.application, (0, 0), (0, 0, 560, 280), group="font", font=FONT_LIST[self.objects["choose_combobox"].currentIndex()], message="Example", fontSize=60, fontColor="#000000", alignment=["center", "center"]))
132   
133           self.application.frame(screenFillColor=(248, 249, 250))
134   
135           qpixmap = QPixmap(Button.getVisiableScreen(QImage(self.application.screen.get_buffer(), 560, 280, QImage.Format_RGB32), 560, 280))
136   
137           self.objects["font"].setPixmap(qpixmap)
138   
139   
140   class Button:
141       class TextTreeWidgetItem(QWidget):
142           def __init__(self, project, obj: dict, temp: dict, path: str, parent=None) -> None:
143               QWidget.__init__(self, parent)
144   
145               self.project = project
146   
147               self.complited = 0
148   
149               layout = QHBoxLayout()
150   
151               self.label = QLabel(translate(temp["name"]) + ":")
152               self.label.setFont(FONT)
153   
154               self.label.setFixedWidth(Size.x(20))
155   
156               save = project.selectFile
157   
158               if temp["type"] == "str" or temp["type"] == "path" or temp["type"] == "int":
159                   self.value = FocusLineEdit(project, releasedFocusFunction=lambda: Button.function(self.value, project, save, temp, path))
160                   self.value.setText(str(temp["value"]))
161   
162                   self.value.saveAllValues = lambda: Button.function(self.value, project, save, temp, path, init=False)
163   
164               elif temp["type"] == "bool":
165                   self.value = QCheckBox(project)
166                   self.value.setFixedHeight(20)
167                   self.value.setChecked(bool(temp["value"]))
168   
169                   self.value.clicked.connect(lambda: Button.function(self.value, project, save, temp, path, init=False))
170   
171               elif temp["type"] in ("choose", "choosing"):
172                   self.value = FocusComboBox(releasedFocusFunction=lambda: Button.function(self.value, project, save, temp, path))
173                   self.value.currentIndexChanged.connect(lambda: self.value.clearFocus())
174                   self.value.addItems([translate(element) for element in temp["choose"]["input"]])
175                   self.value.setCurrentIndex([temp["value"] == element for i, element in enumerate(temp["choose"]["output"])].index(True))
176   
177                   self.value.saveAllValues = lambda: Button.function(self.value, project, save, temp, path, init=False)
178   
179               elif temp["type"] == "font":
180                   self.value = QPushButton(self)
181                   self.value.setText(temp["value"])
182                   self.value.setFixedHeight(20)
183   
184                   self.value.clicked.connect(lambda: fontCreateDialog(self.project, self.value, path, temp["value"]))
185   
186                   self.value.saveAllValues = lambda: Button.function(self.value, project, save, temp, path, init=False)
187   
188               elif temp["type"] == "color":
189                   self.value = QPushButton(self)
190                   self.value.setFixedHeight(20)
191                   self.value.setStyleSheet(f"background-color: {temp['value']};")
192   
193                   self.value.clicked.connect(lambda: colorCreateDialog(self.project, self.value, path, temp["value"]))
194   
195                   self.value.saveAllValues = lambda: Button.function(self.value, project, save, temp, path, init=False)
196   
197               elif temp["type"] == "dict":
198                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
199                   project.objects["main"]["object_tree_objects"][path].setText(0, translate(temp["name"]))
200                   project.objects["main"]["object_tree_objects"][path].setExpanded(True)
201                   project.objects["main"]["object_tree_objects"][path].setFont(0, FONT)
202   
203                   self.complited = 2
204   
205                   return
206   
207               else:
208                   raise TypeError(f"type {temp['type']} is not defined")
209   
210               self.value.setFont(FONT)
211               self.value.setFixedWidth(Size.x(25))
212   
213               layout.addWidget(self.label)
214               layout.addSpacerItem(QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum))
215   
216               layout.addWidget(self.value)
217   
218               layout.setContentsMargins(0, 0, 10, 0)
219   
220               self.setLayout(layout)
221   
222               self.complited = 1
223   
224       @staticmethod
225       def get(obj, path) -> dict:
226           temp = obj
227   
228           for element in path.split("/"):
229               try:
230                   temp = temp[element]
231   
232               except KeyError:
233                   temp = temp["value"][element]
234   
235           return temp
236   
237       @staticmethod
238       def init(project, class_=TextTreeWidgetItem, file=None, pos=None, type: str = "object", variables: bool = True, bottom: bool = False) -> None:
239           def include(project, obj: dict, path: str, class_) -> None:
240               temp = Button.get(obj, path)
241   
242               try:
243                   widget = class_(project, obj, temp, path, project, type=type)
244   
245               except:
246                   widget = class_(project, obj, temp, path, project)
247   
248               if widget.complited == -1:
249                   return -1
250   
251               if widget.complited == 2:
252                   for key, value in temp["value"].items():
253                       include(project, obj, f"{path}/{key}", class_)
254   
255                   return 0
256   
257               else:
258                   project.objects["main"]["widgets"].append(widget)
259   
260               if path.count("/") == 0:
261                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
262   
263               else:
264                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
265   
266               project.objects["main"]["object_tree"].setItemWidget(
267                   project.objects["main"]["object_tree_objects"][path], 0, widget
268               )
269   
270           if file is None:
271               file = project.selectFile
272   
273           else:
274               pass
275   
276           try:
277               with open(file, "r", encoding="utf-8") as f:
278                   obj = load(f)
279   
280           except FileNotFoundError:
281               return 0
282   
283           if "object_variables" in project.objects["main"]:
284               try:
285                   project.objects["main"]["object_variables"].hide()
286   
287                   project.objects["main"]["object_variables"].deleteLater()
288   
289               except RuntimeError:
290                   pass
291   
292           project.objects["main"]["object_tree_objects"] = {}
293   
294           project.objects["main"]["object_tree"] = QTreeWidget(parent=project)
295   
296           if "variables" not in project.objects["main"]:
297               project.objects["main"]["variables"] = {}
298   
299           if variables:
300               if bottom:
301                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
302                       project,
303                       Vec4i(
304                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
305                           40 + 10 + (project.height() - 80) // 2,
306                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
307                           (project.height() - 80) // 2
308                       ),
309                       translate("Create object variable"),
310                       file
311                   )
312   
313               else:
314                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
315                       project,
316                       Vec4i(
317                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
318                           40,
319                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
320                           project.height() - 70
321                       ),
322                       translate("Create object variable"),
323                       file
324                   )
325   
326           project.objects["main"]["widgets"] = []
327   
328           if pos is None:
329               project.objects["main"]["object_tree"].setGeometry(project.objects["center_rama"].x(), project.objects["center_rama"].y(), project.objects["center_rama"].width(), project.objects["center_rama"].height())
330   
331           else:
332               project.objects["main"]["object_tree"].setGeometry(*pos)
333   
334           project.objects["main"]["object_tree"].header().hide()
335           project.objects["main"]["object_tree"].setFont(LFONT)
336           project.objects["main"]["object_tree"].show()
337   
338           project.objects["main"]["object_tree"].saveAllValues = lambda self, project: Button.saveAllValues(project)
339   
340           project.objects["main"]["object_tree_main"] = QTreeWidgetItem(project.objects["main"]["object_tree"])
341           project.objects["main"]["object_tree_main"].setText(0, file[file.rfind("/") + 1:])
342           project.objects["main"]["object_tree_main"].setExpanded(True)
343           project.objects["main"]["object_tree_main"].setFont(0, FONT)
344   
345           if include(project, obj, "type", class_) == -1:
346               pass
347   
348           obj = dict(sorted(obj.items(), key=lambda x: -1 if x[0] not in SORTING_BUTTON_TYPES else SORTING_BUTTON_TYPES[x[0]]))
349   
350           for key, value in obj.items():
351               if key == "type":
352                   continue
353   
354               if key not in obj["dependence"] + [obj["type"]["value"]]:
355                   continue
356   
357               project.objects["main"]["object_tree_objects"][key] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
358               project.objects["main"]["object_tree_objects"][key].setText(0, translate(key))
359               project.objects["main"]["object_tree_objects"][key].setExpanded(True)
360               project.objects["main"]["object_tree_objects"][key].setFont(0, FONT)
361   
362               for k1, v1 in value.items():
363                   include(project, obj, f"{key}/{k1}", class_)
364   
365       @staticmethod
366       def function(obj, project, save: str, last: dict, path: str, init: bool = True) -> None:
367           with open(f"engine/files/button.json", "r", encoding="utf-8") as file:
368               objects = load(file)
369   
370           try:
371               with open(save, "r", encoding="utf-8") as f:
372                   file = load(f)
373   
374           except BaseException:
375               return 0
376   
377           if last["type"] == "font":
378               text = obj.text()
379   
380           if last["type"] == "scroll":
381               text = obj.value()
382   
383           elif last["type"] == "color":
384               if not hasattr(obj, "out"):
385                   return
386   
387               text = obj.out
388   
389           elif last["type"] == "bool":
390               text = obj.isChecked()
391   
392           else:
393               try:
394                   text = obj.text()
395   
396               except AttributeError:
397                   text = objects["specials"]["choose"][path[path.rfind("/") + 1:]]["output"][obj.currentIndex()]
398   
399           doing = False
400   
401           temp = Button.get(file, path)
402   
403           if last["type"] == "str":
404               temp["value"] = text
405   
406               doing = True
407   
408           if last["type"] == "bool":
409               temp["value"] = text
410   
411               doing = True
412   
413           if last["type"] == "font":
414               temp["value"] = text
415   
416               doing = True
417   
418           if last["type"] == "color":
419               temp["value"] = text
420   
421               doing = True
422   
423           if last["type"] == "path":
424               if text == "" or (os.path.exists(f"projects/{project.selectProject}/project/{text}") and any([text.endswith(element) for element in IMAGE_FORMATES])):
425                   temp["value"] = text
426   
427                   doing = True
428   
429               else:
430                   MessageBox.error("The path does not exist or this isn't a image")
431   
432           if last["type"] == "int":
433               try:
434                   float(text)
435   
436               except BaseException:
437                   pass
438   
439               else:
440                   doing = True
441   
442                   if abs(math.trunc(float(text)) - float(text)) < project.engine.FLOAT_PRECISION:
443                       temp["value"] = round(float(text))
444   
445                   else:
446                       temp["value"] = float(text)
447   
448           if last["type"] == "choosing":
449               temp["value"] = text
450   
451               doing = True
452   
453           if last["type"] == "scroll":
454               temp["value"] = text
455   
456               doing = True
457   
458           if last["type"] == "choose":
459               temp["value"] = text
460               file["dependence"] = file["dependences"][temp["value"]]
461   
462               doing = True
463   
464               for element in objects["dependences"][file["type"]["value"]] + [file["type"]["value"]]:
465                   for value in objects["objects"][element]:
466                       if element not in file:
467                           file[element] = {}
468   
469                       if value in file[element]:
470                           continue
471   
472                       if objects["type"] == "choose":
473                           file[element][value] = {
474                               "name": objects["name"][value],
475                               "value": objects["standard"][value],
476                               "type": objects["type"][value],
477                               "choose": objects["specials"]["choose"][value]
478                           }
479   
480                       else:
481                           file[element][value] = {
482                               "name": objects["name"][value],
483                               "value": objects["standard"][value],
484                               "type": objects["type"][value]
485                           }
486   
487           if not doing:
488               obj.setText(str(last["value"]))
489   
490           if doing and temp["value"] != last["value"]:
491               with open(save, "w", encoding="utf-8") as f:
492                   dump(file, f, indent=4)
493   
494               if init:
495                   project.init()
496   
497       @staticmethod
498       def saveAllValues(project):
499           for widget in project.objects["main"]["widgets"]:
500               if hasattr(widget, "value") and hasattr(widget.value, "saveAllValues"):
501                   widget.value.saveAllValues()
502   
503       @staticmethod
504       def getVisiableScreen(image, width, height) -> Image.Image:
505           def center(image: QImage, newWidth: int, newHeight: int) -> QImage:
506               width = image.width()
507               height = image.height()
508   
509               left = (width - newWidth) // 2
510               top = (height - newHeight) // 2
511               right = left + newWidth
512               bottom = top + newHeight
513   
514               return image.copy(left, top, newWidth, newHeight)
515   
516           return center(image, width, height)
517   
##### scr\modules\functions\main\files\code.py #####
1     from PyQt5.QtWidgets import QLabel, QMenu, QAction, QVBoxLayout, QTreeWidget, QTreeWidgetItem, QTextEdit, QDialog, QToolTip, QLineEdit, QPushButton, QComboBox
2     from PyQt5.QtGui import QPainter, QColor, QPen, QPixmap, QImage, QPolygon, QTextCursor
3     from PyQt5.Qt import Qt, QPoint, QTimer, QSize
4     from PyQt5 import QtWidgets
5     
6     from PyQt5.Qsci import QsciScintilla, QsciLexerPython
7     
8     from scr.modules.dialogs import CreateNode
9     from scr.modules.functions.algorithm import bezierCurveDeep, bezierCurveWidth
10     
11    from scr.modules.widgets import FocusLineEdit, FocusComboBox
12    
13    from engine.vector.float import Vec2f
14    from engine.vector.int import Vec2i, Vec4i
15    
16    from scr.variables import *
17    
18    import dataclasses
19    import pyperclip
20    import typing
21    import random
22    import math
23    import copy
24    
25    
26    def isCurrectNode(obj: dict):
27        def func(obj, path):
28            if len(path) == 0:
29                return obj, []
30    
31            var = obj[path[0]]
32            path.pop(0)
33    
34            return var, path
35    
36        for element in NODE_CURRECT_TEST:
37            try:
38                func(obj, element.split("/"))
39    
40            except BaseException:
41                return False
42    
43        return True
44    
45    
46    @dataclasses.dataclass
47    class CodeHash:
48        size: int = 1
49    
50        lastToolTipPos: Vec2i = None
51        lastToolTipPoses: typing.List[Vec2i] = None
52    
53        x: int = 0
54        y: int = 0
55    
56    
57    @dataclasses.dataclass
58    class CodeReplacer:
59        node: int = None
60    
61    
62    @dataclasses.dataclass
63    class CodeLiner:
64        points: dict = None
65        cash: dict = None
66    
67        node: dict = None
68    
69        start: Vec2i = None
70    
71    
72    class TypeSet:
73        @staticmethod
74        def set_(type: str, text: str):
75            return getattr(TypeSet, type)(text)
76    
77        @staticmethod
78        def choose(value: typing.Any):
79            return float(value) if math.trunc(float(value)) != math.ceil(float(value)) else int(float(value))
80    
81        @staticmethod
82        def path(value: typing.Any):
83            return value
84    
85        @staticmethod
86        def number(value: typing.Any):
87            return float(value) if math.trunc(float(value)) != math.ceil(float(value)) else int(float(value))
88    
89        @staticmethod
90        def text(value: typing.Any):
91            return str(value)
92    
93        @staticmethod
94        def logic(value: typing.Any):
95            return True if value in ("true", "True", "1") else False
96    
97        @staticmethod
98        def list(value: typing.Any) -> bool:
99            return eval(value)
100    
101       @staticmethod
102       def dict(value: typing.Any) -> bool:
103           return eval(value)
104   
105       @staticmethod
106       def Any(value: typing.Any):
107           return value
108   
109   
110   class TypeCurrect:
111       @staticmethod
112       def currect_(type: str, text: str) -> bool:
113           return getattr(TypeCurrect, type)(text)
114   
115       @staticmethod
116       def choose(value: typing.Any) -> bool:
117           return True
118   
119       @staticmethod
120       def path(value: typing.Any) -> bool:
121           return True
122   
123       @staticmethod
124       def number(value: typing.Any) -> bool:
125           try:
126               float(value)
127   
128           except BaseException:
129               return False
130   
131           else:
132               return True
133   
134       @staticmethod
135       def text(value: typing.Any) -> bool:
136           return True
137   
138       @staticmethod
139       def logic(value: typing.Any) -> bool:
140           return value in ("true", "True", "false", "False", "0", "1")
141   
142       @staticmethod
143       def list(value: typing.Any) -> bool:
144           try:
145               return type(eval(value)) == list
146   
147           except BaseException:
148               return False
149   
150       @staticmethod
151       def dict(value: typing.Any) -> bool:
152           try:
153               return type(eval(value)) == dict
154   
155           except BaseException:
156               return False
157   
158       @staticmethod
159       def Any(value: typing.Any) -> bool:
160           return True
161   
162   
163   class TextEditor(QDialog):
164       def __init__(self, project, input, id):
165           super().__init__()
166   
167           self.project = project
168           self.input = input
169           self.id = id
170   
171           self.setWindowTitle(translate("Text Editor"))
172   
173           self.setGeometry(0, 0, int(size["width"] * 0.55), int(size["height"] * 0.7))
174           self.move((size["width"] - self.width()) // 2, (size["height"] - self.height()) // 2)
175   
176           self.layout = QVBoxLayout()
177   
178           self.editor = QsciScintilla(self)
179           self.editor.setFont(QFont("Courier", 10))
180   
181           palette = self.project.palette()
182   
183           self.editor.setCaretForegroundColor(palette.text().color())
184           self.editor.setMarginsBackgroundColor(palette.base().color())
185           self.editor.setMarginsForegroundColor(palette.text().color())
186           self.editor.setFoldMarginColors(palette.base().color(), palette.text().color())
187           self.editor.setEdgeColor(palette.text().color())
188           self.editor.setSelectionBackgroundColor(palette.highlight().color())
189           self.editor.setSelectionForegroundColor(palette.highlightedText().color())
190           self.editor.setPaper(palette.base().color())
191           self.editor.setColor(palette.text().color())
192           self.editor.setFont(QFont("Courier", 10))
193   
194           lexer = QsciLexerPython()
195           lexer.setFont(QFont("Courier", 10))
196   
197           lexer.setDefaultPaper(palette.base().color())
198           lexer.setPaper(palette.base().color())
199   
200           self.editor.setMarginWidth(0, "0000")
201           self.editor.setMarginType(0, QsciScintilla.MarginType.NumberMargin)
202   
203           self.editor.setLexer(lexer)
204   
205           self.editor.setText(str(self.input["standard"]))
206   
207           self.editor.setWrapMode(QsciScintilla.WrapWord)
208   
209           self.editor.setTabWidth(4)
210   
211           self.layout.addWidget(self.editor)
212   
213           self.setLayout(self.layout)
214   
215       def closeEvent(self, event):
216           text = self.editor.text()
217   
218           try:
219               type = self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["type"]
220   
221           except KeyError:
222               return
223   
224           if TypeCurrect.currect_(type, text):
225               self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["standard"] = TypeSet.set_(type, text)
226   
227           with open(self.project.selectFile, "w", encoding="utf-8") as file:
228               dump(self.project.objects["main"]["function"], file, indent=4)
229   
230           self.project.init()
231   
232   
233   class CodeNodeStroke(QLabel):
234       def __init__(self, parent):
235           QLabel.__init__(self, parent)
236   
237           self.setAttribute(Qt.WA_TransparentForMouseEvents)
238   
239           self.setStyleSheet("background-color: rgba(0, 0, 0, 0); border: 2px solid #689ad3; border-radius: 5px")
240   
241   
242   class CodeNodeConnectorLineEdit(QLineEdit):
243       def __init__(self, parent, project, id, input) -> None:
244           QLineEdit.__init__(self, parent)
245   
246           self.project = project
247   
248           self.use = False
249   
250           self.id = id
251           self.input = input
252   
253       def save(self) -> None:
254           text = self.text()
255   
256           type = self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["type"]
257   
258           if TypeCurrect.currect_(type, text):
259               self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["standard"] = TypeSet.set_(type, text)
260   
261       def focusInEvent(self, event) -> None:
262           self.use = True
263   
264           event.accept()
265   
266       def focusOutEvent(self, event) -> None:
267           self.use = False
268   
269           self.save()
270   
271           event.accept()
272   
273   
274   class CodeNodeConnectorTextBox(QTextEdit):
275       def __init__(self, parent, project, id, input, heigth_) -> None:
276           super().__init__(parent)
277   
278           self.project = project
279           self.use = False
280           self.id = id
281           self.input = input
282   
283           self.heigth_ = heigth_
284   
285           self.setAlignment(Qt.AlignLeft)
286   
287           cursor = self.textCursor()
288           cursor.movePosition(QTextCursor.Start)
289   
290           self.setTabStopDistance(20)
291   
292           self.setTextCursor(cursor)
293   
294           self.button = QPushButton(project.objects["main"]["code"])
295           self.button.setStyleSheet(f"border: 1px solid #cecac9; color: #{'cecac9' if SETTINGS['theme'] == 'dark' else '686b71'};")
296           self.button.setText(translate("Text Editor"))
297           self.button.setFont(MFONT)
298           self.button.show()
299   
300           self.button.clicked.connect(lambda: self.editor())
301   
302           self.setContentsMargins(0, 0, 0, 0)
303   
304       def save(self) -> None:
305           text = self.toPlainText()
306           type = self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["type"]
307   
308           if TypeCurrect.currect_(type, text):
309               self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["standard"] = TypeSet.set_(type, text)
310   
311       def init(self):
312           self.button.setGeometry(self.x(), self.y() + 25 * (self.heigth_ - 1), self.width(), 16 + 4)
313   
314           self.button.raise_()
315   
316       def editor(self):
317           self.project.dialog = TextEditor(self.project, self.input, self.id)
318           self.project.dialog.exec_()
319   
320       def setGeometry(self, x, y, w, h):
321           super().setGeometry(x, y - 1, w, h)
322   
323           self.button.setGeometry(self.x(), self.y() + 25 * (self.heigth_ - 1), self.width(), 16 + 4)
324   
325       def move(self, x, y):
326           super().move(x, y)
327   
328           self.button.move(self.x(), self.y() + 25 * (self.heigth_ - 1))
329   
330       def deleteLater(self):
331           self.button.deleteLater()
332   
333           super().deleteLater()
334   
335       def show(self) -> None:
336           super().show()
337   
338       def hide(self) -> None:
339           super().hide()
340   
341           self.button.hide()
342   
343       def focusInEvent(self, event) -> None:
344           self.use = True
345   
346           event.accept()
347   
348       def focusOutEvent(self, event) -> None:
349           self.use = False
350   
351           self.save()
352   
353           event.accept()
354   
355       def keyPressEvent(self, event):
356           if event.key() in (Qt.Key_Return, Qt.Key_Enter):
357               self.insertPlainText("\n")
358   
359               event.accept()
360   
361           else:
362               super().keyPressEvent(event)
363   
364   
365   class CodeNodeConnectorComboBox(QComboBox):
366       def __init__(self, parent, project, id, input) -> None:
367           QComboBox.__init__(self, parent)
368   
369           self.project = project
370   
371           self.id = id
372           self.input = input
373   
374           self.use = False
375   
376           self.index = self.input["standard"]
377   
378           self.addItems([translate(element) for element in self.input["choose"]["options"]])
379           self.setCurrentIndex(self.input["standard"])
380   
381           self.currentIndexChanged.connect(self.indexChange)
382   
383       def save(self, full: bool = False) -> None:
384           self.project.objects["main"]["function"]["objects"][str(self.id)]["inputs"][self.input["code"]]["standard"] = self.index
385   
386           if full:
387               with open(self.project.selectFile, "w", encoding="utf-8") as file:
388                   dump(self.project.objects["main"]["function"], file, indent=4)
389   
390       def indexChange(self, index) -> None:
391           self.index = index
392   
393           self.save(True)
394   
395   
396   class CodeNodeConnector(QLabel):
397       def __init__(self, parent, project, node: dict, id: int, keys: dict, number: int, input: dict = None, output: dict = None) -> None:
398           QLabel.__init__(self, parent)
399   
400           self.project = project
401   
402           self.setGeometry(0, (number + 1) * CODE_GRID_CELL_SIZE, parent.width(), CODE_GRID_CELL_SIZE)
403   
404           self.setAttribute(Qt.WA_TranslucentBackground)
405   
406           self.number = number
407           self.id = id
408   
409           self.keys = keys
410   
411           self.node = node
412   
413           self.left = None
414           self.right = None
415   
416           self.input = input
417   
418           self.inputLeftText = None
419           self.inputLeftRama = None
420   
421           invisibleInput = False
422           invisible = False
423           type = None
424   
425           if "special" in self.node:
426               if input["code"] in self.node["special"]["inputs"]:
427                   special = self.node["special"]["inputs"][input["code"]]
428   
429                   if "invisible-input" in special:
430                       invisibleInput = special["invisible-input"]
431   
432                   if "invisible" in special:
433                       invisible = special["invisible"]
434   
435                   if "type" in special:
436                       type = special["type"]
437   
438           if input is not None:
439               self.left = QLabel(self)
440               self.left.setGeometry(0, 9, 10, 10)
441               self.left.setAttribute(Qt.WA_TranslucentBackground)
442   
443               if not invisibleInput:
444                   if input["value"] is not None:
445                       self.left.setPixmap(QPixmap(project.objects["main"]["config"]["connectors"]["sprites"][project.objects["main"]["function"]["objects"][str(input["value"]["id"])]["outputs"][input["value"]["name"]]["type"]]))
446   
447                   else:
448                       self.left.setPixmap(QPixmap(project.objects["main"]["config"]["connectors"]["sprites"][input["type"]]))
449   
450               if self.node["type"] == "event" and self.input["type"] == "path":
451                   self.left.hide()
452   
453               else:
454                   self.left.show()
455   
456               if input["type"] not in CODE_CONNECTOR_NO_HAVE_INPUT_TYPES and not invisible:
457                   if type is not None:
458                       if type == "text-box":
459                           height = self.node["special"]["inputs"][input["code"]]["height"]
460   
461                           self.inputLeftText = CodeNodeConnectorTextBox(project.objects["main"]["code"], self.project, id, input, height)
462                           self.inputLeftText.setAttribute(Qt.WA_TranslucentBackground)
463                           self.inputLeftText.setGeometry(self.x() + parent.x() + 20, self.y() + parent.y() + 4, self.width() - 40, 14 + 25 * (height - 2))
464                           self.inputLeftText.setStyleSheet("background-color: rgba(63, 64, 66, 0); border: 0px")
465                           self.inputLeftText.setPlainText(str(input["standard"]))
466                           self.inputLeftText.setFont(MFONT)
467                           self.inputLeftText.show()
468   
469                           self.inputLeftText.init()
470   
471                       self.inputLeftRama = QLabel(project.objects["main"]["code"])
472                       self.inputLeftRama.setAttribute(Qt.WA_TransparentForMouseEvents)
473                       self.inputLeftRama.setGeometry(self.x() + parent.x() + 20, self.y() + parent.y() + 6, self.width() - 40, 18 + 25 * (height - 2))
474                       self.inputLeftRama.setStyleSheet("border: 1px solid #cecac9;")
475                       self.inputLeftRama.show()
476   
477                   else:
478                       if input["type"] == "choose":
479                           self.inputLeftText = CodeNodeConnectorComboBox(project.objects["main"]["code"], self.project, id, input)
480                           self.inputLeftText.setAttribute(Qt.WA_TranslucentBackground)
481                           self.inputLeftText.setGeometry(self.x() + parent.x() + 20, self.y() + parent.y() + 3, self.width() - 40, 14)
482                           self.inputLeftText.setStyleSheet("background-color: rgba(63, 64, 66, 0); border: 0px")
483                           self.inputLeftText.setFont(MFONT)
484                           self.inputLeftText.show()
485   
486                       else:
487                           self.inputLeftText = CodeNodeConnectorLineEdit(project.objects["main"]["code"], self.project, id, input)
488                           self.inputLeftText.setAttribute(Qt.WA_TranslucentBackground)
489                           self.inputLeftText.setGeometry(self.x() + parent.x() + 20, self.y() + parent.y() + 3, self.width() - 40, 14)
490                           self.inputLeftText.setStyleSheet("background-color: rgba(63, 64, 66, 0); border: 0px")
491                           self.inputLeftText.setText(str(input["standard"]))
492                           self.inputLeftText.setFont(MFONT)
493                           self.inputLeftText.show()
494   
495                       self.inputLeftRama = QLabel(project.objects["main"]["code"])
496                       self.inputLeftRama.setAttribute(Qt.WA_TransparentForMouseEvents)
497                       self.inputLeftRama.setGeometry(self.x() + parent.x() + 20, self.y() + parent.y() + 6, self.width() - 40, 18)
498                       self.inputLeftRama.setStyleSheet("border: 1px solid #cecac9;")
499                       self.inputLeftRama.show()
500   
501               self.leftText = translate(node["display"]["text"][input["name"]])
502   
503               self.project.objects["main"]["liner"].points["inputs"].append([{"id": id, "number": number, "keys": self.keys, "node": self.node}, Vec2i(parent.x() + self.x() + 5, parent.y() + self.y() + self.height() // 2)])
504   
505           if output is not None:
506               self.right = QLabel(self)
507               self.right.setGeometry(self.width() - 12, 9, 10, 10)
508               self.right.setAttribute(Qt.WA_TranslucentBackground)
509               self.right.setPixmap(QPixmap(project.objects["main"]["config"]["connectors"]["sprites"][output["type"]]))
510               self.right.show()
511   
512               self.rightText = translate(node["display"]["text"][output["name"]])
513   
514               self.project.objects["main"]["liner"].points["outputs"].append([{"id": id, "number": number, "keys": self.keys, "connector": output["type"]}, Vec2i(parent.x() + self.x() + self.width() - 5, parent.y() + self.y() + self.height() // 2)])
515   
516           self.show()
517   
518       def updateObjectGeometry(self) -> None:
519           self.move(0, (self.number + 1) * CODE_GRID_CELL_SIZE)
520   
521           if self.left is not None:
522               self.project.objects["main"]["liner"].points["inputs"].append([{"id": self.id, "number": self.number, "keys": self.keys, "node": self.node}, Vec2i(self.parent().x() + self.x() + 5, self.parent().y() + self.y() + self.height() // 2)])
523   
524               self.left.move(0, 9)
525   
526           if self.right is not None:
527               self.project.objects["main"]["liner"].points["outputs"].append([{"id": self.id, "number": self.number, "keys": self.keys}, Vec2i(self.parent().x() + self.x() + 5, self.parent().y() + self.y() + self.height() // 2)])
528   
529               self.right.move(self.width() - 12, 9)
530   
531           if self.inputLeftText is not None:
532               self.inputLeftText.move(self.x() + self.parent().x() + 20, self.y() + self.parent().y() + 3 - (self.input["type"] == "choose"))
533               self.inputLeftRama.move(self.x() + self.parent().x() + 20, self.y() + self.parent().y() + 6)
534   
535   
536   class CodeNode(QTreeWidget):
537       font = None
538   
539       def __init__(self, parent, node: dict) -> None:
540           QTreeWidget.__init__(self, parent.objects["main"]["code"])
541   
542           if self.font is None:
543               self.font = QFont()
544               self.font.setBold(True)
545   
546           self.setHeaderHidden(True)
547           self.show()
548   
549           self.setAttribute(Qt.WA_TransparentForMouseEvents)
550   
551           self.setStyleSheet(f"border-width: 0px; border-radius: 0px; background-color: rgba{'(63, 64, 66, 220)' if SETTINGS['theme'] == 'dark' else '(218, 220, 224, 220)'};")
552   
553           self.project = parent
554   
555           self.node = node
556   
557           self.connectors = {}
558   
559           self.setGeometry(
560               int((self.node["x"] * CODE_GRID_CELL_SIZE - self.project.cash["file"][self.project.selectFile].x) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE),
561               int((self.node["y"] * CODE_GRID_CELL_SIZE - self.project.cash["file"][self.project.selectFile].y - self.node["height"] - 1) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE + (self.node["height"] - 2)),
562               int(self.node["width"] * CODE_GRID_CELL_SIZE + 3),
563               int(self.node["height"] * CODE_GRID_CELL_SIZE + 3)
564           )
565   
566           self.bg = QLabel(self)
567           self.bg.setGeometry(2, 2, node["width"] * (CODE_GRID_CELL_SIZE + 1) - 6, CODE_GRID_CELL_SIZE - 1)
568           self.bg.setStyleSheet(f"border-width: 0px; background-color: {self.project.objects['main']['config']['colors'][self.node['type']]['first']};")
569           self.bg.show()
570   
571           qpixmap = QPixmap(self.bg.width(), self.bg.height())
572           qpixmap.fill(QColor(self.project.objects["main"]["config"]["colors"][self.node["type"]]["first"]))
573   
574           painter = QPainter(qpixmap)
575           painter.setPen(QPen(QColor(self.project.objects["main"]["config"]["colors"][self.node["type"]]["second"]), 1))
576   
577           """
578           def get_max_font_width(width, text):
579               if not text or width <= 0:
580                   return 0
581   
582               font = QFont()
583               max_size = 0
584               
585               low = 1
586               high = 1000
587   
588               while low <= high:
589                   mid = (low + high) // 2
590                   
591                   font.setPointSize(mid)
592                   metrics = QFontMetrics(font)
593                   
594                   text_width = metrics.horizontalAdvance(text)
595   
596                   if text_width <= width:
597                       max_size = mid
598                       low = mid + 1
599                       
600                   else:
601                       high = mid - 1
602   
603               return max_size
604   
605           """
606   
607           self.font.setPointSize(8)
608   
609           painter.setFont(self.font)
610   
611           painter.drawImage(2, 2, QImage(self.project.objects["main"]["config"]["icons"][self.node["type"]]))
612   
613           painter.drawText(
614               24, self.bg.height() - 8, translate(f"{self.node['display']['name']}")
615           )
616   
617           painter.end()
618   
619           # CONNECTORS
620   
621           if "sorting" in self.node and "outputs" in self.node["sorting"]:
622               self.node["outputs"] = dict(sorted(self.node["outputs"].items(), key=lambda x: self.node["sorting"]["outputs"].index(x[1]["code"])))
623   
624           else:
625               self.node["outputs"] = dict(sorted(self.node["outputs"].items(), key=lambda x: self.project.objects["main"]["config"]["sorting"].index(x[1]["type"])))
626   
627           if "sorting" in self.node and "inputs" in self.node["sorting"]:
628               self.node["inputs"] = dict(sorted(self.node["inputs"].items(), key=lambda x: self.node["sorting"]["inputs"].index(x[1]["code"])))
629   
630           else:
631               self.node["inputs"] = dict(sorted(self.node["inputs"].items(), key=lambda x: self.project.objects["main"]["config"]["sorting"].index(x[1]["type"])))
632   
633           values = [[] for _ in range(max(len(self.node["inputs"]), len(self.node["outputs"])))]
634           keys = [{} for _ in range(max(len(self.node["inputs"]), len(self.node["outputs"])))]
635   
636           usingOtputsPointPossesKeys = []
637   
638           for i, key in enumerate(self.node["inputs"]):
639               values[i].append(self.node["inputs"][key])
640               keys[i]["input"] = key
641   
642               if self.node["inputs"][key]["value"] is not None:
643                   finish = self.project.objects["main"]["function"]["objects"][str(self.node["inputs"][key]["value"]["id"])]
644   
645                   indexStart = list(self.node["inputs"].keys()).index(key) + 1
646                   indexFinish = list(finish["outputs"].keys()).index(self.node["inputs"][key]["value"]["name"]) + 1
647   
648                   usingOtputsPointPossesKeys.append(self.node["id"])
649   
650                   if self.node["id"] not in self.project.objects["main"]["liner"].cash["outputsPointPosses"]:
651                       self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]] = []
652   
653                   self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]].append({
654                       "start": self.node,
655                       "finish": finish,
656   
657                       "keys": keys,
658                       "key": key,
659   
660                       "connector": self.node["inputs"][key]["type"],
661   
662                       "pos": {
663                           "start": None,
664                           "finish": None
665                       }
666                   })
667   
668                   self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["pos"]["start"] = Vec2i(
669                       self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["start"]["x"] * CODE_GRID_CELL_SIZE + 5 - self.project.cash["file"][self.project.selectFile].x,
670                       (self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["start"]["y"] + indexStart) * CODE_GRID_CELL_SIZE + CODE_GRID_CELL_SIZE // 2 - self.project.cash["file"][self.project.selectFile].y - 3
671                   )
672   
673                   self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["pos"]["finish"] = Vec2i(
674                       (self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["finish"]["x"] + self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["finish"]["width"]) * CODE_GRID_CELL_SIZE - 5 - self.project.cash["file"][self.project.selectFile].x,
675                       (self.project.objects["main"]["liner"].cash["outputsPointPosses"][self.node["id"]][-1]["finish"]["y"] + indexFinish) * CODE_GRID_CELL_SIZE + CODE_GRID_CELL_SIZE // 2 - self.project.cash["file"][self.project.selectFile].y - 3
676                   )
677   
678           for i in range(max(len(self.node["inputs"]), len(self.node["outputs"]))):
679               if len(values[i]) == 0:
680                   values[i].append(None)
681   
682           for i, key in enumerate(self.node["outputs"]):
683               values[i].append(self.node["outputs"][key])
684               keys[i]["output"] = key
685   
686           for i in range(max(len(self.node["inputs"]), len(self.node["outputs"]))):
687               if len(values[i]) == 1:
688                   values[i].append(None)
689   
690           for i, connector in enumerate(values):
691               self.connectors[i] = CodeNodeConnector(self, self.project, self.node, self.node["id"], keys, i, *connector)
692   
693           # PIXMAP
694   
695           self.bg.setPixmap(qpixmap)
696   
697       def updateObjectGeometry(self) -> None:
698           self.move(
699               int((self.node["x"] * CODE_GRID_CELL_SIZE - self.project.cash["file"][self.project.selectFile].x) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE),
700               int((self.node["y"] * CODE_GRID_CELL_SIZE - self.project.cash["file"][self.project.selectFile].y - self.node["height"] - 1) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE + (self.node["height"] - 2))
701           )
702   
703           for key, connector in self.connectors.items():
704               connector.updateObjectGeometry()
705   
706   
707   class CodeLabel(QLabel):
708       def __init__(self, parent=None, pressFunction: typing.Callable = None, releasedFunction: typing.Callable = None) -> None:
709           QLabel.__init__(self, parent)
710   
711           self.pressFunction = pressFunction
712           self.releasedFunction = releasedFunction
713   
714           self.project = parent
715   
716           self.nowPoint = QPoint()
717           self.point = QPoint()
718   
719           self.position = None
720   
721           self.setMouseTracking(True)
722   
723           self.project.objects["main"]["code_timer"] = QTimer(self)
724           self.project.objects["main"]["code_timer"].timeout.connect(lambda: self.timerToolTip())
725           self.project.objects["main"]["code_timer"].start(1000 // 2)
726   
727           self.project.objects["main"]["code_timer_second"] = QTimer(self)
728           self.project.objects["main"]["code_timer_second"].timeout.connect(lambda: self.timerMoveScene())
729           self.project.objects["main"]["code_timer_second"].start(1000 // 40)
730   
731           self.stop = False
732   
733       def timerToolTip(self):
734           x = self.nowPoint.x()
735           y = self.nowPoint.y()
736   
737           try:
738               self.project.cash["file"][self.project.selectFile].lastToolTipPoses.append(Vec2i(x, y))
739   
740           except KeyError:
741               return
742   
743           if len(self.project.cash["file"][self.project.selectFile].lastToolTipPoses) > 2:
744               self.project.cash["file"][self.project.selectFile].lastToolTipPoses.pop(0)
745   
746           self.project.objects["main"]["code"].viewToolTip()
747   
748       def timerMoveScene(self):
749           # MOVE SCENE IF SELECT COLLECTOR
750   
751           if self.project.objects["main"]["liner"].start is not None:
752               if self.point.x() < 20:
753                   self.project.cash["file"][self.project.selectFile].x -= 8
754                   self.project.objects["main"]["liner"].start.x += 8
755   
756                   Code.update(self.project, call="move")
757   
758               if self.point.x() > self.project.objects["main"]["code"].width() - 20:
759                   self.project.cash["file"][self.project.selectFile].x += 8
760                   self.project.objects["main"]["liner"].start.x -= 8
761   
762                   Code.update(self.project, call="move")
763   
764               if self.point.y() < 20:
765                   self.project.cash["file"][self.project.selectFile].y -= 8
766                   self.project.objects["main"]["liner"].start.y += 8
767   
768                   Code.update(self.project, call="move")
769   
770               if self.point.y() > self.project.objects["main"]["code"].height() - 20:
771                   self.project.cash["file"][self.project.selectFile].y += 8
772                   self.project.objects["main"]["liner"].start.y -= 8
773   
774                   Code.update(self.project, call="move")
775   
776       def mousePressEvent(self, event) -> None:
777           # Code.update(self.project)
778   
779           flag = False
780   
781           for id, node in self.project.objects["main"]["function"]["objects"].items():
782               for index, connector in self.project.objects["main"]["nodes"][node["id"]].connectors.items():
783                   if connector.inputLeftText is not None:
784                       connector.inputLeftText.save()
785   
786                       flag = max(flag, connector.inputLeftText.use)
787   
788           if flag:
789               dump(self.project.objects["main"]["function"], open(self.project.selectFile, "w", encoding="utf-8"), indent=4)
790   
791           self.setFocus()
792   
793           x = event.pos().x()
794           y = event.pos().y()
795   
796           self.project.objects["main"]["liner"].start = None
797           self.project.objects["main"]["liner"].node = None
798   
799           find = None
800   
801           if event.button() != Qt.MidButton:
802               for element in self.project.objects["main"]["liner"].points["outputs"]:
803                   if abs(element[1].x - event.pos().x()) < CODE_POINT_PRECISION and abs(element[1].y - event.pos().y()) < CODE_POINT_PRECISION:
804                       find = element
805   
806                       find[0]["connector"] = element[0]["connector"]
807   
808                       break
809   
810               else:
811                   for elem in self.project.objects["main"]["liner"].cash["outputsPointPosses"].values():
812                       for element in elem:
813                           if abs(element["pos"]["start"].x - event.pos().x()) < CODE_POINT_PRECISION and abs(element["pos"]["start"].y - event.pos().y()) < CODE_POINT_PRECISION:
814                               var = element["start"]["inputs"][element["key"]]["value"]
815   
816                               if var is None:
817                                   continue
818   
819                               find = [
820                                   {
821                                       "id": element["finish"]["id"],
822                                       "connector": element["connector"],
823                                       "number": list(element["finish"]["outputs"].keys()).index(var["name"]),
824                                       "keys": [{"output": element} for element in self.project.objects["main"]["function"]["objects"][str(element["finish"]["id"])]["outputs"]]
825                                   },
826                                   element["pos"]["finish"]
827                               ]
828   
829                               self.project.objects["main"]["liner"].start = Vec2i(find[1].x, find[1].y)
830                               self.project.objects["main"]["liner"].node = find
831   
832                               self.project.objects["main"]["function"]["objects"][str(element["start"]["id"])]["inputs"][element["key"]]["value"] = None
833   
834                               with open(self.project.selectFile, "w", encoding="utf-8") as file:
835                                   dump(self.project.objects["main"]["function"], file, indent=4)
836   
837                               # self.stop = True
838   
839                               return
840   
841                       else:
842                           continue
843   
844                       break
845   
846               if find is not None:
847                   self.project.objects["main"]["liner"].start = Vec2i(find[1].x, find[1].y)
848                   self.project.objects["main"]["liner"].node = find
849   
850               else:
851                   self.project.objects["main"]["liner"].start = None
852   
853           if event.button() == Qt.LeftButton:
854               self.point = event.pos()
855   
856           else:
857               self.project.objects["main"]["liner"].start = None
858   
859           find = None
860           pos = None
861   
862           if event.buttons() == Qt.MidButton and self.project.objects["main"]["replacer"].node is None:
863               for id, node in self.project.objects["main"]["function"]["objects"].items():
864                   if node["x"] * CODE_GRID_CELL_SIZE < x + self.project.cash["file"][self.project.selectFile].x < (node["x"] + node["width"]) * CODE_GRID_CELL_SIZE and node["y"] * CODE_GRID_CELL_SIZE < y + self.project.cash["file"][self.project.selectFile].y < (node["y"] + node["height"]) * CODE_GRID_CELL_SIZE:
865                       find = {"id": id, "node": node}
866   
867                       break
868   
869               if find is not None:
870                   self.project.objects["main"]["replacer"].node = find["id"]
871   
872                   Code.selected(self.project)
873   
874           elif event.buttons() == Qt.MidButton and self.project.objects["main"]["replacer"].node is not None and (self.nowPoint.x() != 0 and self.nowPoint.y() != 0):
875               self.project.objects["main"]["function"]["objects"][str(self.project.objects["main"]["replacer"].node)]["x"] = (self.nowPoint.x() + self.project.cash["file"][self.project.selectFile].x) // CODE_GRID_CELL_SIZE
876               self.project.objects["main"]["function"]["objects"][str(self.project.objects["main"]["replacer"].node)]["y"] = (self.nowPoint.y() + self.project.cash["file"][self.project.selectFile].y) // CODE_GRID_CELL_SIZE
877   
878               with open(self.project.selectFile, "w", encoding="utf-8") as file:
879                   dump(self.project.objects["main"]["function"], file, indent=4)
880   
881               self.project.objects["main"]["replacer"].node = None
882   
883               self.project.init()
884   
885       def mouseReleaseEvent(self, event) -> None:
886           # Code.update(self.project)
887   
888           self.stop = False
889   
890           for element in self.project.objects["main"]["liner"].points["inputs"]:
891               if abs(element[1].x - event.pos().x()) < CODE_POINT_PRECISION and abs(element[1].y - event.pos().y()) < CODE_POINT_PRECISION:
892                   finish = element
893                   break
894   
895           else:
896               finish = None
897   
898           if finish is not None and self.project.objects["main"]["liner"].start is not None:
899               start = self.project.objects["main"]["liner"].node
900   
901               if abs(self.project.objects["main"]["liner"].start.x - event.pos().x()) < CODE_POINT_PRECISION and abs(self.project.objects["main"]["liner"].start.y - event.pos().y()) < CODE_POINT_PRECISION:
902                   pass
903   
904               elif start is not None:
905                   if self.project.objects["main"]["function"]["objects"][str(finish[0]["id"])]["inputs"][finish[0]["keys"][finish[0]["number"]]["input"]]["type"] in [self.project.objects["main"]["function"]["objects"][str(start[0]["id"])]["outputs"][start[0]["keys"][start[0]["number"]]["output"]]["type"]] + self.project.objects["main"]["config"]["infelicity"][self.project.objects["main"]["function"]["objects"][str(start[0]["id"])]["outputs"][start[0]["keys"][start[0]["number"]]["output"]]["type"]]:
906                       if start[0]["id"] != finish[0]["id"] and finish[0]["node"]["type"] != "event":
907                           path = self.project.objects["main"]["function"]["objects"][str(finish[0]["id"])]["inputs"][finish[0]["keys"][finish[0]["number"]]["input"]]["code"]
908   
909                           self.project.objects["main"]["function"]["objects"][str(finish[0]["id"])]["inputs"][path]["value"] = {
910                               "id": start[0]["id"],
911                               "name": start[0]["keys"][start[0]["number"]]["output"]
912                           }
913   
914                           with open(self.project.selectFile, "w", encoding="utf-8") as file:
915                               dump(self.project.objects["main"]["function"], file, indent=4)
916   
917               else:
918                   pass
919   
920           self.project.objects["main"]["liner"].start = None
921           self.project.objects["main"]["liner"].node = None
922   
923           if event.button() == Qt.LeftButton:
924               if self.releasedFunction is not None:
925                   self.releasedFunction(event.pos().x() - self.project.objects["main"]["code"].width() // 2, event.pos().y() - self.project.objects["main"]["code"].height() // 2)
926   
927       def mouseMoveEvent(self, event) -> None:
928           # MOVE SCENE
929   
930           self.nowPoint = event.pos()
931   
932           if event.buttons() == Qt.LeftButton:
933               x = event.pos().x() - self.point.x()
934               y = event.pos().y() - self.point.y()
935   
936               self.point = event.pos()
937   
938               if self.project.objects["main"]["liner"].start is None:
939                   self.project.cash["file"][self.project.selectFile].x -= x
940                   self.project.cash["file"][self.project.selectFile].y -= y
941   
942               Code.update(self.project, call="move")
943   
944           Code.selected(self.project)
945   
946       def viewToolTip(self):
947           pos = self.nowPoint
948   
949           find = None
950   
951           for id, node in self.project.objects["main"]["nodes"].items():
952               if find:
953                   break
954   
955               for key, connector in node.connectors.items():
956                   if connector.left is not None:
957                       x = node.x() + connector.x() + connector.left.x() + connector.left.width() // 2
958                       y = node.y() + connector.y() + connector.left.y() + connector.left.height() // 2
959   
960                       if abs(pos.x() - x) < CODE_POINT_PRECISION // 2 and abs(pos.y() - y) < CODE_POINT_PRECISION // 2:
961                           find = {"pos": Vec2i(x, y), "text": connector.leftText}
962   
963                           break
964   
965                   if connector.right is not None:
966                       x = node.x() + connector.x() + connector.right.x() + connector.right.width() // 2
967                       y = node.y() + connector.y() + connector.right.y() + connector.right.height() // 2
968   
969                       if abs(pos.x() - x) < CODE_POINT_PRECISION // 2 and abs(pos.y() - y) < CODE_POINT_PRECISION // 2:
970                           find = {"pos": Vec2i(x, y), "text": connector.rightText}
971   
972                           break
973   
974           if find is not None and (self.project.cash["file"][self.project.selectFile].lastToolTipPos is None or self.project.cash["file"][self.project.selectFile].lastToolTipPos != find["pos"]):
975               for pos in self.project.cash["file"][self.project.selectFile].lastToolTipPoses:
976                   if not (abs(pos.x - find["pos"].x) < CODE_POINT_PRECISION and abs(pos.y - find["pos"].y) < CODE_POINT_PRECISION):
977                       break
978   
979               else:
980                   QToolTip.showText(QPoint(find["pos"].x + self.x() + self.project.x(), find["pos"].y + self.y() + self.project.y() - 8), translate(f"{find['text']}"))
981   
982           else:
983               QToolTip.hideText()
984   
985   
986   class CodeAdditionsVarsType(QTreeWidget):
987       def __init__(self, parent, pos: Vec4i, name: str, path: str) -> None:
988           QTreeWidget.__init__(self, parent)
989   
990           self.style = f"background-color: rgba(0, 0, 0, 0); border: 1px solid #{'3f4042' if SETTINGS['theme'] == 'dark' else 'dadce0'}"
991   
992           with open("scr/code/config.json", "r", encoding="utf-8") as file:
993               self.config = load(file)
994   
995           self.project = parent
996   
997           self.pos = pos
998   
999           self.path = path
1000   
1001          self.setGeometry(self.pos.x, self.pos.y, self.pos.z, self.pos.w)
1002  
1003          self.setContextMenuPolicy(Qt.CustomContextMenu)
1004  
1005          self.setColumnCount(3)
1006  
1007          self.setColumnWidth(0, self.width() // 3 - 2)
1008          self.setColumnWidth(1, self.width() // 3 - 2)
1009          self.setColumnWidth(2, self.width() // 3 - 2)
1010  
1011          self.header().setMaximumHeight(25)
1012  
1013          self.setHeaderLabels([translate("Name"), translate("Type"), translate("Value")])
1014  
1015          self.plusButton = QPushButton(self)
1016          self.plusButton.setGeometry(6, self.height() - 30, self.width() - 13, 25)
1017          self.plusButton.setText(name)
1018          self.plusButton.show()
1019  
1020          with open(self.path, "r", encoding="utf-8") as file:
1021              self.variables = load(file)["variables"]
1022  
1023          self.setRootIsDecorated(False)
1024  
1025          self.menu = None
1026  
1027          self.plusButton.clicked.connect(lambda: self.new())
1028  
1029          self.init()
1030  
1031          self.show()
1032  
1033      def eventFilter(self, obj, event):
1034          if event.type() == event.ContextMenu:
1035              self.createMenu(self.mapFromGlobal(event.globalPos()))
1036  
1037              return True
1038  
1039          return super().eventFilter(obj, event)
1040  
1041      def createMenu(self, position) -> None:
1042          x = position.x()
1043          y = position.y()
1044  
1045          ox = x - self.project.objects["center_rama"].x() + self.x()
1046          oy = y - self.project.objects["center_rama"].y() + self.y()
1047  
1048          pos = QPoint(ox, oy)
1049  
1050          index = self.currentIndex().row()
1051  
1052          name = list(self.variables.keys())[index]
1053  
1054          self.menu = QMenu()
1055          # self.menu.setWindowFlags(self.menu.windowFlags() | Qt.Popup)
1056          # self.menu.raise_()
1057  
1058          delete_variable = QAction(translate("Remove"), self.project)
1059          delete_variable.triggered.connect(lambda empty=None, n=name: self.removeVariableFunction(n))
1060  
1061          self.menu.addAction(delete_variable)
1062  
1063          self.menu.popup(self.project.objects["main"]["code"].mapToGlobal(pos))
1064  
1065      def removeVariableFunction(self, name):
1066          with open(self.path, "r", encoding="utf-8") as file:
1067              text = load(file)
1068  
1069          self.variables.pop(name)
1070  
1071          text["variables"] = self.variables
1072  
1073          with open(self.path, "w", encoding="utf-8") as file:
1074              dump(text, file, indent=4)
1075  
1076          self.project.init()
1077  
1078      def init(self) -> None:
1079          for i, name in enumerate(self.variables):
1080              value = self.variables[name]
1081  
1082              item = QTreeWidgetItem()
1083  
1084              item.setSizeHint(0, QSize(0, 25))
1085  
1086              self.addTopLevelItem(item)
1087  
1088              self.project.objects["main"][f"additions_element_name_{name}"] = FocusLineEdit(releasedFocusFunction=lambda empty=None, n=name: self.functionName(n))
1089              self.project.objects["main"][f"additions_element_name_{name}"].setText(value["name"])
1090              self.project.objects["main"][f"additions_element_name_{name}"].setStyleSheet(self.style)
1091  
1092              self.setItemWidget(item, 0, self.project.objects["main"][f"additions_element_name_{name}"])
1093  
1094              self.project.objects["main"][f"additions_element_type_{name}"] = FocusComboBox()
1095              self.project.objects["main"][f"additions_element_type_{name}"].addItems(self.config["variablesTypes"])
1096              self.project.objects["main"][f"additions_element_type_{name}"].setCurrentIndex(self.config["variablesTypes"].index(value["type"]))
1097              self.project.objects["main"][f"additions_element_type_{name}"].currentIndexChanged.connect(lambda empty, n=name: self.functionType(n))
1098              self.project.objects["main"][f"additions_element_type_{name}"].setStyleSheet(self.style)
1099  
1100              self.setItemWidget(item, 1, self.project.objects["main"][f"additions_element_type_{name}"])
1101  
1102              self.project.objects["main"][f"additions_element_value_{name}"] = FocusLineEdit(releasedFocusFunction=lambda empty=None, n=name: self.functionValue(n))
1103              self.project.objects["main"][f"additions_element_value_{name}"].setText(str(value["value"]))
1104              self.project.objects["main"][f"additions_element_value_{name}"].setStyleSheet(self.style)
1105  
1106              self.setItemWidget(item, 2, self.project.objects["main"][f"additions_element_value_{name}"])
1107  
1108      def new(self) -> None:
1109          with open(self.path, "r", encoding="utf-8") as file:
1110              text = load(file)
1111  
1112          name = "undefined"
1113          plus = 0
1114  
1115          while (name if plus == 0 else f"{name} ({plus})") in text["variables"]:
1116              plus += 1
1117  
1118          name = name if plus == 0 else f"{name} ({plus})"
1119  
1120          text["variables"][name] = {
1121              "name": name,
1122              "type": "text",
1123              "value": self.config["standardVariablesTypes"]["text"]
1124          }
1125  
1126          with open(self.path, "w", encoding="utf-8") as file:
1127              dump(text, file, indent=4)
1128  
1129          self.project.init()
1130  
1131      def functionName(self, name: str) -> None:
1132          with open(self.path, "r", encoding="utf-8") as file:
1133              text = load(file)
1134  
1135          try:
1136              name = text["variables"][name]["name"]
1137  
1138          except KeyError:
1139              return 0
1140  
1141          new = self.project.objects["main"][f"additions_element_name_{name}"].text()
1142  
1143          if new == name or len(new) < 1 or new in list(text["variables"].keys()):
1144              self.project.objects["main"][f"additions_element_name_{name}"].setText(name)
1145  
1146              return
1147  
1148          text["variables"][new] = copy.deepcopy(text["variables"][name])
1149          text["variables"][new]["name"] = new
1150  
1151          text["variables"].pop(name)
1152  
1153          with open(self.path, "w", encoding="utf-8") as file:
1154              dump(text, file, indent=4)
1155  
1156          self.project.init()
1157  
1158      def functionType(self, name: str) -> None:
1159          with open(self.path, "r", encoding="utf-8") as file:
1160              text = load(file)
1161  
1162          index = self.project.objects["main"][f"additions_element_type_{name}"].currentIndex()
1163  
1164          new = self.config["variablesTypes"][index]
1165  
1166          text["variables"][name]["type"] = new
1167          text["variables"][name]["value"] = self.config["standardVariablesTypes"][new]
1168  
1169          with open(self.path, "w", encoding="utf-8") as file:
1170              dump(text, file, indent=4)
1171  
1172          self.project.init()
1173  
1174      def functionValue(self, name: str) -> None:
1175          with open(self.path, "r", encoding="utf-8") as file:
1176              text = load(file)
1177  
1178          value = self.project.objects["main"][f"additions_element_value_{name}"].text()
1179  
1180          if TypeCurrect.currect_(text["variables"][name]["type"], value):
1181              text["variables"][name]["value"] = TypeSet.set_(text["variables"][name]["type"], value)
1182  
1183          with open(self.path, "w", encoding="utf-8") as file:
1184              dump(text, file, indent=4)
1185  
1186          self.project.init()
1187  
1188  
1189  class CodeAdditions:
1190      @staticmethod
1191      def init(project) -> None:
1192          project.objects["main"]["variables"] = {}
1193  
1194          project.objects["main"]["variables"]["locals"] = CodeAdditionsVarsType(
1195              project,
1196              Vec4i(
1197                  project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
1198                  40,
1199                  project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
1200                  (project.height() - 80) // 2
1201              ),
1202              translate("Create local variable"),
1203              project.selectFile
1204          )
1205  
1206          project.objects["main"]["variables"]["globals"] = CodeAdditionsVarsType(
1207              project,
1208              Vec4i(
1209                  project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
1210                  40 + 10 + (project.height() - 80) // 2,
1211                  project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
1212                  (project.height() - 80) // 2
1213              ),
1214              translate("Create global variable"),
1215              f"projects/{project.selectProject}/project/project.cfg"
1216          )
1217  
1218      @staticmethod
1219      def update(project):
1220          CodeAdditions.remove(project)
1221  
1222          CodeAdditions.init(project)
1223  
1224      @staticmethod
1225      def remove(project):
1226          if "variables" in project.objects["main"]:
1227              for element in project.objects["main"]["variables"].values():
1228                  try:
1229                      element.hide()
1230  
1231                      element.deleteLater()
1232  
1233                  except RuntimeError:
1234                      pass
1235  
1236  
1237  class Code:
1238      @staticmethod
1239      def init(project) -> None:
1240          try:
1241              project.objects["main"]["code"] = CodeLabel(
1242                  parent=project,
1243                  releasedFunction=lambda x, y: Code.update(project)
1244              )
1245  
1246              project.objects["main"]["code"].setGeometry(project.objects["center_rama"].x() + 2, project.objects["center_rama"].y() + 2, project.objects["center_rama"].width() - 4, project.objects["center_rama"].height() - 4)
1247              project.objects["main"]["code"].show()
1248  
1249              project.objects["main"]["code"].setContextMenuPolicy(Qt.CustomContextMenu)
1250  
1251              project.objects["main"]["code"].customContextMenuRequested.connect(
1252                  lambda pos: Code.menu(project, pos)
1253              )
1254  
1255              if project.cash["file"][project.selectFile].lastToolTipPoses is None:
1256                  project.cash["file"][project.selectFile].lastToolTipPoses = []
1257  
1258              if "replacer" not in project.objects["main"]:
1259                  project.objects["main"]["replacer"] = CodeReplacer()
1260  
1261              project.objects["main"]["liner"] = CodeLiner()
1262  
1263              if project.objects["main"]["liner"].points is None:
1264                  project.objects["main"]["liner"].points = {"inputs": [], "outputs": []}
1265  
1266              project.objects["main"]["liner"].cash = {"outputsPointPosses": {}}
1267  
1268              if "nodes" not in project.objects["main"]:
1269                  project.objects["main"]["nodes"] = {}
1270  
1271              with open("scr/code/config.json", "r", encoding="utf-8") as file:
1272                  project.objects["main"]["config"] = load(file)
1273  
1274              CodeAdditions.init(project)
1275  
1276              Code.update(project)
1277  
1278          except BaseException:
1279              return
1280  
1281      @staticmethod
1282      def update(project, call: str = "") -> None:
1283          project.objects["main"]["liner"].cash["outputsPointPosses"] = {}
1284  
1285          project.objects["main"]["liner"].points = {"inputs": [], "outputs": []}
1286  
1287          pos = Vec2i(project.cash["file"][project.selectFile].x, project.cash["file"][project.selectFile].y)
1288  
1289          try:
1290              with open(project.selectFile, "r", encoding="utf-8") as file:
1291                  project.objects["main"]["function"] = load(file)
1292  
1293          except json.JSONDecodeError:
1294              return 0
1295  
1296          # GRID
1297  
1298          qpixmap = QPixmap(project.objects["center_rama"].width(), project.objects["center_rama"].height())
1299          qpixmap.fill(QColor(32, 33, 36) if SETTINGS["theme"] == "dark" else QColor(248, 249, 250))
1300  
1301          painter = QPainter(qpixmap)
1302          painter.setPen(QPen(QColor(63, 64, 66)if SETTINGS["theme"] == "dark" else QColor(218, 220, 224), 1))
1303  
1304          painter.setFont(SFONT)
1305  
1306          size = CODE_GRID_CELL_SIZE // project.cash["file"][project.selectFile].size
1307  
1308          for x in range(-size - pos.x % size, project.objects["center_rama"].width() + size, size):
1309              painter.drawLine(x, 0, x, project.objects["center_rama"].height())
1310              painter.drawLine(x + 1, 0, x + 1, project.objects["center_rama"].height())
1311  
1312          for y in range(-size - pos.y % size, project.objects["center_rama"].height() + size, size):
1313              painter.drawLine(0, y, project.objects["center_rama"].width(), y)
1314              painter.drawLine(0, y + 1, project.objects["center_rama"].width(), y + 1)
1315  
1316          # UI
1317  
1318          painter.setPen(QPen(QColor(255, 255, 255), 2))
1319  
1320          painter.setPen(QPen(QColor(255, 255, 255) if SETTINGS["theme"] == "dark" else QColor(70, 70, 70), 1))
1321  
1322          painter.drawText(
1323              5, project.objects["center_rama"].height() - 8, f"X, Y: {pos.x}  {pos.y}"
1324          )
1325  
1326          painter.setPen(QPen(QColor("#cecac9"), 2))
1327  
1328          # NODES
1329  
1330          Code.nodes(project, call != "move")
1331  
1332          # ALL CONNECTORS
1333  
1334          for id, node in project.objects["main"]["function"]["objects"].items():
1335              for i, name in enumerate(node["inputs"]):
1336                  connector = node["inputs"][name]
1337  
1338                  if connector["value"] is not None:
1339                      nd = project.objects["main"]["function"]["objects"][str(connector["value"]["id"])]["outputs"][connector["value"]["name"]]["type"]
1340  
1341                      painter.setPen(QPen(QColor(project.objects["main"]["config"]["connectors"]["colors"][nd]), 2))
1342  
1343                      start = {"node": node, "id": id, "name": name, "index": i + 1}
1344                      finish = {"node": project.objects["main"]["function"]["objects"][str(connector["value"]["id"])], "id": connector["value"]["id"], "name": connector["value"]["name"], "index": list(project.objects["main"]["function"]["objects"][str(connector["value"]["id"])]["outputs"].keys()).index(connector["value"]["name"]) + 1}
1345  
1346                      poses = {
1347                          "start": Vec2i(start["node"]["x"] * CODE_GRID_CELL_SIZE + 5 - project.cash["file"][project.selectFile].x, (start["node"]["y"] + start["index"]) * CODE_GRID_CELL_SIZE + CODE_GRID_CELL_SIZE // 2 - project.cash["file"][project.selectFile].y),
1348                          "finish": Vec2i((finish["node"]["x"] + finish["node"]["width"]) * CODE_GRID_CELL_SIZE - 5 - project.cash["file"][project.selectFile].x, (finish["node"]["y"] + finish["index"]) * CODE_GRID_CELL_SIZE + CODE_GRID_CELL_SIZE // 2 - project.cash["file"][project.selectFile].y)
1349                      }
1350  
1351                      poses = bezierCurveWidth(
1352                          poses["start"].x,
1353                          poses["start"].y + 1,
1354                          (poses["start"].x + poses["finish"].x) // 2,
1355                          poses["start"].y + 1,
1356                          (poses["start"].x + poses["finish"].x) // 2,
1357                          poses["finish"].y + 1,
1358                          poses["finish"].x,
1359                          poses["finish"].y + 1,
1360                          CODE_LINER_PRECISION
1361                      )
1362  
1363                      points = [QPoint(int(pos[0]), int(pos[1])) for pos in poses]
1364  
1365                      painter.drawPolyline(QPolygon(points))
1366  
1367          # CONNECTOR
1368  
1369          if project.objects["main"]["liner"].start is not None:
1370              connector = project.objects["main"]["liner"].node[0]["connector"]
1371  
1372              painter.setPen(QPen(QColor(project.objects["main"]["config"]["connectors"]["colors"][connector]), 2))
1373  
1374              poses = bezierCurveWidth(
1375                  project.objects["main"]["liner"].start.x,
1376                  project.objects["main"]["liner"].start.y + 3,
1377                  (project.objects["main"]["liner"].start.x + project.objects["main"]["code"].point.x()) // 2,
1378                  project.objects["main"]["liner"].start.y + 3,
1379                  (project.objects["main"]["liner"].start.x + project.objects["main"]["code"].point.x()) // 2,
1380                  project.objects["main"]["code"].point.y() + 3,
1381                  project.objects["main"]["code"].point.x(),
1382                  project.objects["main"]["code"].point.y() + 3,
1383                  CODE_LINER_PRECISION
1384              )
1385  
1386              points = [QPoint(math.ceil(pos[0]), math.ceil(pos[1])) for pos in poses]
1387  
1388              painter.drawPolyline(QPolygon(points))
1389  
1390          painter.setPen(QPen(QColor("#cecac9"), 2))
1391  
1392          # SELECTED
1393  
1394          Code.selected(project)
1395  
1396          # PIXMAP
1397  
1398          painter.end()
1399  
1400          project.objects["main"]["code"].setPixmap(qpixmap)
1401  
1402      @staticmethod
1403      def selected(project) -> None:
1404          try:
1405              project.objects["main"]["replacer_select"].deleteLater()
1406  
1407          except AttributeError:
1408              pass
1409  
1410          except RuntimeError:
1411              pass
1412  
1413          except KeyError:
1414              pass
1415  
1416          try:
1417              project.objects["main"]["replacer_pos"].deleteLater()
1418  
1419          except AttributeError:
1420              pass
1421  
1422          except RuntimeError:
1423              pass
1424  
1425          except KeyError:
1426              pass
1427  
1428          if project.objects["main"]["replacer"].node is None:
1429              return 0
1430  
1431          # SELECTED
1432  
1433          nodeObj = project.objects["main"]["nodes"][int(project.objects["main"]["replacer"].node)]
1434          nodeType = project.objects["main"]["function"]["objects"][str(project.objects["main"]["replacer"].node)]
1435  
1436          project.objects["main"]["replacer_select"] = CodeNodeStroke(project.objects["main"]["code"])
1437          project.objects["main"]["replacer_select"].setGeometry(nodeObj.x(), nodeObj.y(), nodeObj.width(), nodeObj.height())
1438          project.objects["main"]["replacer_select"].show()
1439  
1440          # POS
1441  
1442          if project.objects["main"]["code"].nowPoint.x() == 0 and project.objects["main"]["code"].nowPoint.y() == 0:
1443              return 0
1444  
1445          x = (project.objects["main"]["code"].nowPoint.x() + project.cash["file"][project.selectFile].x) // CODE_GRID_CELL_SIZE * CODE_GRID_CELL_SIZE
1446          y = (project.objects["main"]["code"].nowPoint.y() + project.cash["file"][project.selectFile].y) // CODE_GRID_CELL_SIZE * CODE_GRID_CELL_SIZE
1447  
1448          project.objects["main"]["replacer_pos"] = CodeNodeStroke(project.objects["main"]["code"])
1449          project.objects["main"]["replacer_pos"].setGeometry(
1450              (x - project.cash["file"][project.selectFile].x) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE,
1451              (y - project.cash["file"][project.selectFile].y - nodeType["height"] - 1) * CODE_GRID_CELL_SIZE // CODE_GRID_CELL_SIZE + (nodeType["height"] - 2),
1452              nodeObj.width(),
1453              nodeObj.height()
1454          )
1455  
1456          project.objects["main"]["replacer_pos"].show()
1457  
1458      @staticmethod
1459      def nodes(project, create: bool = True) -> None:
1460          if create:
1461              for node in project.objects["main"]["nodes"].values():
1462                  for connector in node.connectors.values():
1463                      if connector.inputLeftText is not None:
1464                          try:
1465                              # connector.inputLeftText.save()
1466  
1467                              connector.inputLeftText.deleteLater()
1468                              connector.inputLeftRama.deleteLater()
1469  
1470                          except RuntimeError:
1471                              pass
1472  
1473                  try:
1474                      node.hide()
1475  
1476                  except AttributeError:
1477                      pass
1478  
1479                  except RuntimeError:
1480                      continue
1481  
1482                  try:
1483                      node.deleteLater()
1484  
1485                  except AttributeError:
1486                      pass
1487  
1488              project.objects["main"]["nodes"] = {}
1489  
1490              for id, node in project.objects["main"]["function"]["objects"].items():
1491                  project.objects["main"]["nodes"][node["id"]] = CodeNode(project, node)
1492  
1493          else:
1494              for id, node in project.objects["main"]["function"]["objects"].items():
1495                  project.objects["main"]["nodes"][node["id"]].updateObjectGeometry()
1496  
1497      @staticmethod
1498      def menu(project, position) -> None:
1499          x = position.x()
1500          y = position.y()
1501  
1502          project.objects["main"]["code_menu"] = QMenu()
1503  
1504          project.objects["main"]["code_menu_new_node"] = QAction(translate("Create"), project)
1505          project.objects["main"]["code_menu_new_node"].triggered.connect(lambda: Code.createNode(project, position))
1506  
1507          project.objects["main"]["code_menu_copy_node"] = QAction(translate("Copy"), project)
1508          project.objects["main"]["code_menu_copy_node"].triggered.connect(lambda: Code.copyNode(project, position))
1509  
1510          project.objects["main"]["code_menu_paste_node"] = QAction(translate("Paste"), project)
1511          project.objects["main"]["code_menu_paste_node"].triggered.connect(lambda: Code.pasteNode(project, position))
1512  
1513          project.objects["main"]["code_menu_delete_node"] = QAction(translate("Delete"), project)
1514          project.objects["main"]["code_menu_delete_node"].triggered.connect(lambda: Code.deleteNode(project, position))
1515  
1516          project.objects["main"]["code_menu"].addAction(project.objects["main"]["code_menu_new_node"])
1517          project.objects["main"]["code_menu"].addSeparator()
1518          project.objects["main"]["code_menu"].addAction(project.objects["main"]["code_menu_copy_node"])
1519          project.objects["main"]["code_menu"].addAction(project.objects["main"]["code_menu_paste_node"])
1520          project.objects["main"]["code_menu"].addSeparator()
1521          project.objects["main"]["code_menu"].addAction(project.objects["main"]["code_menu_delete_node"])
1522  
1523          for id, node in project.objects["main"]["function"]["objects"].items():
1524              if node["x"] * CODE_GRID_CELL_SIZE < x + project.cash["file"][project.selectFile].x < (node["x"] + node["width"]) * CODE_GRID_CELL_SIZE and node["y"] * CODE_GRID_CELL_SIZE < y + project.cash["file"][project.selectFile].y < (node["y"] + node["height"]) * CODE_GRID_CELL_SIZE:
1525                  break
1526  
1527          else:
1528              project.objects["main"]["code_menu_copy_node"].setDisabled(True)
1529              project.objects["main"]["code_menu_delete_node"].setDisabled(True)
1530  
1531          project.objects["main"]["code_menu"].popup(project.objects["main"]["code"].mapToGlobal(position))
1532  
1533          project.objects["main"]["liner"].start = None
1534  
1535      @staticmethod
1536      def createNode(project, position) -> None:
1537          project.dialog = CreateNode(project, position, project)
1538          project.dialog.exec_()
1539  
1540      @staticmethod
1541      def copyNode(project, position) -> None:
1542          x = position.x()
1543          y = position.y()
1544  
1545          for id, node in project.objects["main"]["function"]["objects"].items():
1546              if node["x"] * CODE_GRID_CELL_SIZE < x + project.cash["file"][project.selectFile].x < (node["x"] + node["width"]) * CODE_GRID_CELL_SIZE and node["y"] * CODE_GRID_CELL_SIZE < y + project.cash["file"][project.selectFile].y < (node["y"] + node["height"]) * CODE_GRID_CELL_SIZE:
1547                  pyperclip.copy(dumps(node))
1548  
1549                  break
1550  
1551          project.init()
1552  
1553      @staticmethod
1554      def pasteNode(project, position) -> None:
1555          try:
1556              node = loads(pyperclip.paste())
1557  
1558          except BaseException:
1559              MessageBox.error(translate("This text is not node"))
1560  
1561              return 0
1562  
1563          if not isCurrectNode(node):
1564              MessageBox.error(translate("This file is not node"))
1565  
1566              return 0
1567  
1568          node["id"] = random.randint(1, 1000000000)
1569          node["x"] = (position.x() + project.cash["file"][project.selectFile].x) // CODE_GRID_CELL_SIZE
1570          node["y"] = (position.y() + project.cash["file"][project.selectFile].y) // CODE_GRID_CELL_SIZE
1571  
1572          for name, connector in node["inputs"].items():
1573              connector["value"] = None
1574  
1575          project.objects["main"]["function"]["objects"][node["id"]] = node
1576  
1577          with open(project.selectFile, "w", encoding="utf-8") as file:
1578              dump(project.objects["main"]["function"], file, indent=4)
1579  
1580          project.init()
1581  
1582      @staticmethod
1583      def deleteNode(project, position) -> None:
1584          x = position.x()
1585          y = position.y()
1586  
1587          for id, node in project.objects["main"]["function"]["objects"].items():
1588              if node["x"] * CODE_GRID_CELL_SIZE < x + project.cash["file"][project.selectFile].x < (node["x"] + node["width"]) * CODE_GRID_CELL_SIZE and node["y"] * CODE_GRID_CELL_SIZE < y + project.cash["file"][project.selectFile].y < (node["y"] + node["height"]) * CODE_GRID_CELL_SIZE:
1589                  select = node
1590  
1591                  break
1592  
1593          else:
1594              return 0
1595  
1596          for id, node in project.objects["main"]["function"]["objects"].items():
1597              for i, name in enumerate(node["inputs"]):
1598                  connector = node["inputs"][name]
1599  
1600                  if connector["value"] is not None and connector["value"]["id"] == select["id"]:
1601                      project.objects["main"]["function"]["objects"][id]["inputs"][name]["value"] = None
1602  
1603          project.objects["main"]["function"]["objects"].pop(str(select["id"]))
1604  
1605          with open(project.selectFile, "w", encoding="utf-8") as file:
1606              dump(project.objects["main"]["function"], file, indent=4)
1607  
1608          project.init()
1609  
##### scr\modules\functions\main\files\collision.py #####
1     from PyQt5.QtWidgets import QTreeWidget, QPushButton, QHeaderView, QAbstractItemView
2     from PyQt5.Qt import QPixmap, Qt
3     
4     from scr.modules.widgets.collisionTable import CollisionTable
5     from scr.modules.widgets import FocusLineEdit
6     
7     from scr.modules.functions.project import *
8     
9     from scr.variables import *
10     
11    import json
12    
13    
14    class CollisionAdditions:
15        style = f"background-color: rgba(0, 0, 0, 0); border: 1px solid #{'3f4042' if SETTINGS['theme'] == 'dark' else 'dadce0'};"
16    
17        @staticmethod
18        def init(project) -> None:
19            project.objects["main"]["create"] = QTreeWidget(project)
20            project.objects["main"]["create"].header().setMaximumHeight(25)
21            project.objects["main"]["create"].setHeaderLabels([translate("Name"), ""])
22    
23            project.objects["main"]["create"].setGeometry(
24                project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
25                40,
26                project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
27                project.height() - 70
28            )
29    
30            project.objects["main"]["create"].setColumnCount(2)
31    
32            header = project.objects["main"]["create"].header()
33            header.setSectionResizeMode(1, QHeaderView.Fixed)
34            header.setMinimumSectionSize(24)
35    
36            # header.setDefaultAlignment(Qt.AlignCenter)
37    
38            project.objects["main"]["create"].setSelectionMode(QAbstractItemView.NoSelection)
39    
40            project.objects["main"]["create"].setColumnWidth(0, project.objects["main"]["create"].width() - 24 - 4)
41            project.objects["main"]["create"].setColumnWidth(1, 24)
42    
43            project.objects["main"]["create"].setRootIsDecorated(False)
44    
45            project.objects["main"]["create"].show()
46    
47            for name in project.objects["main"]["adds"]:
48                item = QTreeWidgetItem()
49    
50                project.objects["main"]["create"].addTopLevelItem(item)
51    
52                project.objects["main"][f"additions_element_name_{name}"] = FocusLineEdit(releasedFocusFunction=lambda empty=None, n=name: CollisionAdditions.rename(project, n))
53                project.objects["main"][f"additions_element_name_{name}"].setText(name)
54                project.objects["main"][f"additions_element_name_{name}"].setStyleSheet(f"background-color: rgba(0, 0, 0, 0); border: 1px solid #{'3f4042' if SETTINGS['theme'] == 'dark' else 'dadce0'}")
55    
56                project.objects["main"]["create"].setItemWidget(item, 0, project.objects["main"][f"additions_element_name_{name}"])
57    
58                project.objects["main"][f"additions_element_remove_{name}"] = QPushButton()
59    
60                if SETTINGS["theme"] == "dark":
61                    project.objects["main"][f"additions_element_remove_{name}"].setIcon(QIcon(QPixmap("scr/files/sprites/remove.png")))
62    
63                else:
64                    project.objects["main"][f"additions_element_remove_{name}"].setIcon(QIcon(QPixmap("scr/files/sprites/remove-light.png")))
65    
66                # project.objects["main"][f"additions_element_remove_{name}"].setIconSize(QSize(16, 16))
67    
68                project.objects["main"][f"additions_element_remove_{name}"].released.connect(lambda empty=None, n=name: CollisionAdditions.remove(project, n))
69                project.objects["main"][f"additions_element_remove_{name}"].setStyleSheet(f"background-color: rgba(0, 0, 0, 0); border: 1px solid #{'3f4042' if SETTINGS['theme'] == 'dark' else 'dadce0'}")
70    
71                project.objects["main"]["create"].setItemWidget(item, 1, project.objects["main"][f"additions_element_remove_{name}"])
72    
73            project.objects["main"]["plus"] = QPushButton(project.objects["main"]["create"])
74            project.objects["main"]["plus"].setGeometry(6, project.objects["main"]["create"].height() - 30, project.objects["main"]["create"].width() - 12, 25)
75            project.objects["main"]["plus"].setText(translate("Create object group"))
76            project.objects["main"]["plus"].show()
77    
78            project.objects["main"]["plus"].clicked.connect(lambda: CollisionAdditions.plus(project))
79    
80        @staticmethod
81        def rename(project, name: str) -> None:
82            if len(project.objects["main"][f"additions_element_name_{name}"].text().split()) > 1:
83                return
84    
85            if project.objects["main"][f"additions_element_name_{name}"].text() in project.objects["main"]["adds"]:
86                return
87    
88            project.objects["main"]["adds"].insert(project.objects["main"]["adds"].index(name), project.objects["main"][f"additions_element_name_{name}"].text())
89    
90            CollisionAdditions.remove(project, name)
91    
92            project.init()
93    
94        @staticmethod
95        def remove(project, name: str) -> None:
96            if name in project.objects["main"]["adds"]:
97                project.objects["main"]["adds"].remove(name)
98    
99            CollisionAdditions.save(project)
100    
101           project.init()
102   
103       @staticmethod
104       def plus(project) -> None:
105           number = 1
106   
107           while str(number) in project.objects["main"]["adds"]:
108               number += 1
109   
110           project.objects["main"]["adds"].append(str(number))
111   
112           CollisionAdditions.save(project)
113   
114           project.init()
115   
116       @staticmethod
117       def save(project) -> None:
118           with open(project.selectFile, "r", encoding="utf-8") as file:
119               config = file.read()
120   
121           config = config.split("\n")
122           config = config[1:]
123   
124           symbol = "\""
125   
126           config = f"$[{', '.join([symbol + element + symbol for element in project.objects['main']['adds']])}]$" + "\n" + "\n".join(config)
127   
128           # print(config)
129   
130           with open(project.selectFile, "w", encoding="utf-8") as file:
131               file.write(config)
132   
133           project.init()
134   
135   
136   class Collision:
137       @staticmethod
138       def init(project) -> None:
139           with open(project.selectFile, "r", encoding="utf-8") as file:
140               text = file.read().split("\n")[0].replace("$", "").replace("$", "")
141   
142           project.objects["main"]["adds"] = eval(text)
143   
144           project.objects["main"]["groups"] = project.objects["main"]["adds"]
145   
146           for path in getAllProjectObjects(project, onlyFileName=False) + getAllProjectInterface(project, onlyFileName=False):
147               with open(path, "r", encoding="utf-8") as file:
148                   obj = load(file)
149   
150               queue = [obj["type"]["value"]]
151   
152               group = None
153   
154               while queue:
155                   element = queue.pop(0)
156   
157                   if element in obj and "group" in obj[element]:
158                       group = element
159   
160                       break
161   
162                   for value in obj["dependences"][element]:
163                       queue.append(value)
164   
165               if group is not None and obj[group]["group"]["value"] not in project.objects["main"]["groups"]:
166                   project.objects["main"]["groups"].append(obj[group]["group"]["value"])
167   
168           project.objects["main"]["table"] = CollisionTable(project, project.objects["main"]["groups"], Collision.function)
169           project.objects["main"]["table"].setGeometry(project.objects["center_rama"].x(), project.objects["center_rama"].y(), project.objects["center_rama"].width(), project.objects["center_rama"].height())
170           project.objects["main"]["table"].show()
171   
172           CollisionAdditions.init(project)
173   
174       @staticmethod
175       def function(project, x: int, y: int, state: bool) -> None:
176           with open(project.selectFile, "r", encoding="utf-8") as file:
177               config = file.read()
178   
179           first = project.objects["main"]["groups"][x]
180           second = project.objects["main"]["groups"][y]
181   
182           if state:
183               if len(config) != 0:
184                   config += f"\n{first} <-> {second} - collision"
185   
186               else:
187                   config += f"{first} <-> {second} - collision"
188   
189           else:
190               config = config.replace(f"\n{first} <-> {second} - collision", "")
191               config = config.replace(f"\n{second} <-> {first} - collision", "")
192   
193               config = config.replace(f"{first} <-> {second} - collision", "")
194               config = config.replace(f"{second} <-> {first} - collision", "")
195   
196           with open(project.selectFile, "w", encoding="utf-8") as file:
197               file.write(config)
198   
199           project.init()
200   
##### scr\modules\functions\main\files\config.py #####
1     from PyQt5.QtWidgets import QLabel, QCheckBox, QPushButton, QDialog, QComboBox, QTreeWidget
2     from PyQt5 import QtWidgets, QtCore
3     
4     from scr.modules.functions.main.files.code import CodeAdditionsVarsType as ConfigAdditionsVarsType
5     
6     from scr.modules.widgets import FocusLineEdit
7     
8     from scr.modules import functions
9     
10     from engine.vector.int import Vec4i
11    
12    from scr.variables import *
13    
14    import json
15    import os
16    import re
17    
18    
19    class ConfigButtonStartSceneFunctions:
20        @staticmethod
21        def create(project, dialog, event) -> None:
22            scenes = functions.project.getAllProjectScenes(project, False)
23    
24            if dialog.objects["choose_combobox"].currentText() == "":
25                project.init()
26    
27                dialog.close()
28    
29                return 0
30    
31            scene = scenes[dialog.objects["choose_combobox"].currentIndex()].replace(f"projects/{project.selectProject}/project/", "")
32    
33            with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
34                config = load(file)
35    
36            config["values"]["start_scene"]["value"] = scene
37    
38            with open(f"projects/{project.selectProject}/project/project.cfg", "w", encoding="utf-8") as file:
39                dump(config, file, indent=4)
40    
41            project.init()
42    
43            dialog.close()
44    
45    
46    class ConfigButtonStartScene(QDialog):
47        @staticmethod
48        def start(project, key, value) -> None:
49            project.dialog = ConfigButtonStartScene(project, key, value, parent=project)
50            project.dialog.exec_()
51    
52        def __init__(self, project, key, value, parent=None) -> None:
53            QDialog.__init__(self, parent)
54    
55            self.project = project
56    
57            self.key = key
58            self.value = value
59    
60            self.setWindowTitle(translate("Choose scene"))
61            self.setFixedSize(600, 400)
62    
63            desktop = QtWidgets.QApplication.desktop()
64            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
65    
66            self.objects = {}
67    
68            self.init()
69    
70        def init(self) -> None:
71            self.objects["empty"] = QPushButton(parent=self)
72            self.objects["empty"].setGeometry(0, 0, 0, 0)
73    
74            # ALL PROJECTS -> COMBOBOX
75    
76            self.objects["choose_label"] = QLabel(parent=self, text=translate("Scene") + ":")
77            self.objects["choose_label"].setGeometry(10, 10, 200, 25)
78            self.objects["choose_label"].setFont(FONT)
79            self.objects["choose_label"].show()
80    
81            self.objects["choose_combobox"] = QComboBox(parent=self)
82            self.objects["choose_combobox"].setGeometry(210, 10, 300, 25)
83            self.objects["choose_combobox"].setFont(FONT)
84            self.objects["choose_combobox"].show()
85    
86            self.objects["choose_combobox"].addItems(
87                [re.sub("%.*?%", "", element) for element in functions.project.getAllProjectScenes(self.project, True)]
88            )
89    
90            # OPEN
91    
92            self.objects["create_button"] = QPushButton(parent=self, text=translate("Choose"))
93            self.objects["create_button"].setStyleSheet(BUTTON_BLUE_STYLE)
94    
95            self.objects["create_button"].released.connect(lambda: self.objects["empty"].setFocus())
96    
97            self.objects["create_button"].setGeometry(150, 340, 300, 40)
98            self.objects["create_button"].setFont(FONT)
99            self.objects["create_button"].show()
100    
101           self.objects["create_button"].clicked.connect(lambda event: ConfigButtonStartSceneFunctions.create(self.project, self, event))
102   
103   
104   class Config:
105       @staticmethod
106       def test(project) -> None:
107           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
108               config = load(file)
109   
110           if os.path.exists(f"projects/{project.selectProject}/project/" + config["values"]["start_scene"]["value"]):
111               pass
112   
113           else:
114               config["values"]["start_scene"]["value"] = ""
115   
116           with open(f"projects/{project.selectProject}/project/project.cfg", "w", encoding="utf-8") as file:
117               dump(config, file, indent=4)
118   
119       @staticmethod
120       def get(file: dict) -> dict:
121           answer = {}
122   
123           for key, value in file["values"].items():
124               answer[key] = value["value"]
125   
126           return answer
127   
128       @staticmethod
129       def init(project) -> None:
130           with open(project.selectFile, "r", encoding="utf-8") as file:
131               config = load(file)
132   
133           project.objects["main"]["globals"] = ConfigAdditionsVarsType(
134               project,
135               Vec4i(
136                   project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
137                   40,
138                   project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
139                   project.height() - 70
140               ),
141               translate("Create global variable"),
142               f"projects/{project.selectProject}/project/project.cfg"
143           )
144   
145           x = (10 + 10 + Size.x(16) + 10) + 15
146           y = (40 + 30 + 10)
147   
148           for group in config["groups"]:
149               startY = y - 80
150               finishY = startY + (35 * len(group)) + 5
151   
152               y += 10
153   
154               project.objects["main"][f"{group}_rama"] = QTreeWidget(parent=project)
155               project.objects["main"][f"{group}_rama"].setGeometry(project.objects["center_rama"].x() + 10, project.objects["center_rama"].y() + startY + 10, project.objects["center_rama"].width() - 20, finishY - startY + 5)
156               project.objects["main"][f"{group}_rama"].setHeaderHidden(True)
157               project.objects["main"][f"{group}_rama"].show()
158   
159               for element in group:
160                   k = element
161                   v = config["values"][element]
162   
163                   if v["type"] == "none":
164                       continue
165   
166                   project.objects["main"][f"{k}_label"] = QLabel(parent=project, text=translate(v["name"]) + ":")
167                   project.objects["main"][f"{k}_label"].setGeometry(x, y, 200, 25)
168                   project.objects["main"][f"{k}_label"].setFont(FONT)
169                   project.objects["main"][f"{k}_label"].show()
170   
171                   if v["type"] == "str" or v["type"] == "int" or v["type"] == "path":
172                       project.objects["main"][f"{k}_entry"] = FocusLineEdit(parent=project, releasedFocusFunction=lambda empty=None, key=k, value=v: Config.function(project, f"{key}_entry", key, value))
173                       project.objects["main"][f"{k}_entry"].setGeometry(x + 200, y, project.objects["center_rama"].width() - (x + 400 + 20), 25)
174                       project.objects["main"][f"{k}_entry"].setFont(FONT)
175                       project.objects["main"][f"{k}_entry"].show()
176   
177                       project.objects["main"][f"{k}_entry"].setText(str(v["value"]))
178   
179                       project.objects["main"][f"{k}_entry"].saveAllValues = lambda self, proj, key=k, value=v, name=project.selectFile: Config.function(project, f"{key}_entry", key, value, name)
180   
181                   elif v["type"] == "bool":
182                       project.objects["main"][f"{k}_checkbox"] = QCheckBox(parent=project)
183                       project.objects["main"][f"{k}_checkbox"].setGeometry(x + 200, y, project.objects["center_rama"].width() - (x + 400 + 20), 25)
184                       project.objects["main"][f"{k}_checkbox"].setFont(FONT)
185                       project.objects["main"][f"{k}_checkbox"].show()
186   
187                       project.objects["main"][f"{k}_checkbox"].setChecked(v["value"])
188   
189                       project.objects["main"][f"{k}_checkbox"].clicked.connect(lambda empty=None, key=k, value=v: Config.function(project, f"{key}_checkbox", key, value))
190   
191                   elif v["type"] == "button-start-scene":
192                       project.objects["main"][f"{k}_button"] = QPushButton(parent=project)
193                       project.objects["main"][f"{k}_button"].setGeometry(x + 200, y, project.objects["center_rama"].width() - (x + 400 + 20), 25)
194                       project.objects["main"][f"{k}_button"].show()
195   
196                       project.objects["main"][f"{k}_button"].setText(re.sub("%.*?%", "", v["value"].replace(f"projects/{project.selectProject}/project/scenes/", "")) if v["value"] != "" else translate("Choose"))
197   
198                       project.objects["main"][f"{k}_button"].clicked.connect(lambda empty=None, key=k, value=v: ConfigButtonStartScene.start(project, key, value))
199   
200                   else:
201                       raise NameError(f"type {v['type']} is not defined")
202   
203                   y += 35
204   
205               y += 10
206   
207       @staticmethod
208       def save(project, key: str, value: dict, name: str = None) -> None:
209           if name is None:
210               name = project.selectFile
211   
212           try:
213               with open(name, "r", encoding="utf-8") as file:
214                   config = load(file)
215   
216               config["values"][key] = value
217   
218               with open(name, "w", encoding="utf-8") as file:
219                   dump(config, file, indent=4)
220   
221           except PermissionError:
222               pass
223   
224       @staticmethod
225       def function(project, obj: str, key: str, value: dict, name: str = None) -> None:
226           if obj == f"{key}_entry":
227               answer = ""
228   
229               try:
230                   if value["type"] == "str":
231                       answer = str(project.objects['main'][obj].text())
232   
233                   elif value["type"] == "path":
234                       if os.path.exists(f"projects/{project.selectProject}/project/{project.objects['main'][obj].text()}") and any([project.objects['main'][obj].text().endswith(element) for element in IMAGE_FORMATES]):
235                           answer = project.objects["main"][obj].text()
236   
237                       else:
238                           if project.objects["main"][obj].text() != "":
239                               MessageBox.error("The path does not exist or this isn't a image")
240   
241                           project.objects["main"][obj].setText(str(value["value"]))
242   
243                   elif value["type"] == "int":
244                       answer = int(project.objects['main'][obj].text())
245   
246                   else:
247                       answer = ""
248   
249               except BaseException:
250                   project.objects["main"][obj].setText(str(value["value"]))
251   
252               else:
253                   value["value"] = answer
254   
255                   Config.save(project, key, value, name)
256   
257           elif obj == f"{key}_checkbox":
258               value["value"] = project.objects["main"][obj].isChecked()
259   
260               Config.save(project, key, value, name)
261   
262           else:
263               pass
264   
##### scr\modules\functions\main\files\image.py #####
1     from PyQt5.QtWidgets import QLabel
2     from PyQt5.QtGui import QPixmap, QImage
3     
4     from PIL import Image as PImage
5     
6     from scr.variables import *
7     
8     import numpy
9     import math
10     import os
11    
12    
13    class Image:
14        @staticmethod
15        def replaceTransparentColor(image, color):
16            image = image.convert("RGBA")
17            data = numpy.array(image)
18    
19            r, g, b, a = data.T
20            transparent_areas = (a == 0)
21            data[..., :-1][transparent_areas.T] = color
22            data[..., -1][transparent_areas.T] = 255
23    
24            return PImage.fromarray(data)
25    
26        @staticmethod
27        def pillowToQImage(image):
28            data = image.tobytes("raw", "RGB")
29            qimage = QImage(data, image.width, image.height, QImage.Format_RGB888)
30    
31            return qimage
32    
33        @staticmethod
34        def getPixmap(project, maxWidth, maxHeight, file):
35            try:
36                image = PImage.open(file)
37    
38            except BaseException:
39                MessageBox.error(translate("Can not open this image"))
40    
41                project.objects["tab_file_bar"].pop(len(project.objects["tab_file_bar"].objects) - 1)
42    
43                return 0
44    
45            capacity = 1
46    
47            while image.width * capacity > maxWidth or image.height * capacity > maxHeight:
48                capacity /= 2
49    
50            while image.width * capacity * 2 < maxWidth and image.height * capacity * 2 < maxHeight:
51                capacity *= 2
52    
53            if capacity > project.engine.FLOAT_PRECISION:
54                image = image.resize((math.trunc(image.width * capacity) + (math.trunc(image.width * capacity) < 1), math.trunc(image.height * capacity) + (math.trunc(image.height * capacity) < 1)), resample=PImage.NEAREST)
55    
56            else:
57                return 0
58    
59            x = (maxWidth - image.width) // 2
60            y = (maxHeight - image.height) // 2
61    
62            image = Image.replaceTransparentColor(image, (32, 33, 36) if SETTINGS["theme"] == 'dark' else (248, 249, 250))
63            image.save("scr/files/cash/image.png")
64    
65            pixmap = QPixmap()
66            pixmap.load("scr/files/cash/image.png")
67    
68            return x, y, pixmap
69    
70        @staticmethod
71        def init(project) -> None:
72            if os.path.isdir(project.selectFile):
73                return 0
74    
75            if project.selectFile == "":
76                return 0
77    
78            maxWidth = project.objects["center_rama"].width()
79            maxHeight = project.objects["center_rama"].height()
80    
81            try:
82                image = PImage.open(project.selectFile)
83    
84            except BaseException:
85                MessageBox.error(translate("Can not open this image"))
86    
87                project.objects["tab_file_bar"].pop(len(project.objects["tab_file_bar"].objects) - 1)
88    
89                return 0
90    
91            capacity = 1
92    
93            while image.width * capacity > maxWidth or image.height * capacity > maxHeight:
94                capacity /= 2
95    
96            while image.width * capacity * 2 < maxWidth and image.height * capacity * 2 < maxHeight:
97                capacity *= 2
98    
99            if capacity > project.engine.FLOAT_PRECISION:
100                image = image.resize((math.trunc(image.width * capacity) + (math.trunc(image.width * capacity) < 1), math.trunc(image.height * capacity) + (math.trunc(image.height * capacity) < 1)), resample=PImage.NEAREST)
101   
102           else:
103               return 0
104   
105           x = (maxWidth - image.width) // 2
106           y = (maxHeight - image.height) // 2
107   
108           image = Image.replaceTransparentColor(image, (32, 33, 36) if SETTINGS["theme"] == 'dark' else (248, 249, 250))
109           image.save("scr/files/cash/image.png")
110   
111           pixmap = QPixmap()
112           pixmap.load("scr/files/cash/image.png")
113   
114           project.objects["main"]["image"] = QLabel(parent=project)
115           project.objects["main"]["image"].setGeometry(project.objects["center_rama"].x() + x, project.objects["center_rama"].y() + y, image.width, image.height)
116           project.objects["main"]["image"].setPixmap(pixmap)
117           project.objects["main"]["image"].show()
118   
##### scr\modules\functions\main\files\object.py #####
1     from PyQt5.QtWidgets import QLabel, QCheckBox, QTreeWidget, QTreeWidgetItem, QWidget, QHBoxLayout, QSizePolicy, QSpacerItem, QPushButton
2     
3     from scr.modules.widgets import FocusLineEdit, FocusComboBox
4     
5     from scr.modules.functions.main.files.code import CodeAdditionsVarsType
6     from scr.modules.dialogs import animatorCreateDialog
7     
8     from engine.vector.int import Vec4i
9     
10     from scr.variables import *
11    
12    import math
13    import json
14    import os
15    
16    SORTING_OBJECT_TYPES = {
17        "StaticObject": 1,
18        "DynamicObject": 2
19    }
20    
21    
22    class Object:
23        class ObjectTreeWidgetItem(QWidget):
24            def __init__(self, project, obj: dict, temp: dict, path: str, parent=None) -> None:
25                QWidget.__init__(self, parent)
26    
27                self.project = project
28    
29                self.complited = 0
30    
31                layout = QHBoxLayout()
32    
33                self.label = QLabel(translate(temp["name"]) + ":")
34                self.label.setFont(FONT)
35    
36                self.label.setFixedWidth(Size.x(20))
37    
38                save = project.selectFile
39    
40                if temp["type"] == "str" or temp["type"] == "path" or temp["type"] == "int":
41                    self.value = FocusLineEdit(project, releasedFocusFunction=lambda: Object.function(self.value, project, save, temp, path))
42                    self.value.setText(str(temp["value"]))
43    
44                    self.value.saveAllValues = lambda: Object.function(self.value, project, save, temp, path, init=False)
45    
46                elif temp["type"] == "bool":
47                    self.value = QCheckBox(project)
48                    self.value.setFixedHeight(20)
49                    self.value.setChecked(bool(temp["value"]))
50    
51                    self.value.clicked.connect(lambda: Object.function(self.value, project, save, temp, path, init=False))
52    
53                elif temp["type"] == "choose":
54                    self.value = FocusComboBox(releasedFocusFunction=lambda: Object.function(self.value, project, save, temp, path))
55                    self.value.currentIndexChanged.connect(lambda: self.value.clearFocus())
56                    self.value.addItems([translate(element) for element in temp["choose"]["input"]])
57                    self.value.setCurrentIndex([temp["value"] == element for i, element in enumerate(temp["choose"]["output"])].index(True))
58    
59                    self.value.saveAllValues = lambda: Object.function(self.value, project, save, temp, path, init=False)
60    
61                elif temp["type"] == "animator":
62                    self.value = QPushButton(self)
63                    self.value.setText(translate("Animation"))
64                    self.value.setFixedHeight(20)
65    
66                    self.value.clicked.connect(lambda: animatorCreateDialog(self.project))
67    
68                    self.value.saveAllValues = lambda: Object.function(self.value, project, save, temp, path, init=False)
69    
70                elif temp["type"] == "dict":
71                    project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
72                    project.objects["main"]["object_tree_objects"][path].setText(0, translate(temp["name"]))
73                    project.objects["main"]["object_tree_objects"][path].setExpanded(True)
74                    project.objects["main"]["object_tree_objects"][path].setFont(0, FONT)
75    
76                    self.complited = 2
77    
78                    return
79    
80                else:
81                    raise TypeError(f"type {temp['type']} is not defined")
82    
83                self.value.setFont(FONT)
84                self.value.setFixedWidth(Size.x(25))
85    
86                layout.addWidget(self.label)
87                layout.addSpacerItem(QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum))
88    
89                layout.addWidget(self.value)
90    
91                layout.setContentsMargins(0, 0, 10, 0)
92    
93                self.setLayout(layout)
94    
95                self.complited = 1
96    
97        @staticmethod
98        def get(obj, path) -> dict:
99            temp = obj
100    
101           for element in path.split("/"):
102               try:
103                   temp = temp[element]
104   
105               except KeyError:
106                   temp = temp["value"][element]
107   
108           return temp
109   
110       @staticmethod
111       def init(project, class_=ObjectTreeWidgetItem, file=None, pos=None, type: str = "object", variables: bool = True, bottom: bool = False) -> None:
112           def include(project, obj: dict, path: str, class_) -> None:
113               temp = Object.get(obj, path)
114   
115               try:
116                   widget = class_(project, obj, temp, path, project, type=type)
117   
118               except:
119                   widget = class_(project, obj, temp, path, project)
120   
121               if widget.complited == -1:
122                   return -1
123   
124               if widget.complited == 2:
125                   for key, value in temp["value"].items():
126                       include(project, obj, f"{path}/{key}", class_)
127   
128                   return 0
129   
130               else:
131                   project.objects["main"]["widgets"].append(widget)
132   
133               if path.count("/") == 0:
134                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
135   
136               else:
137                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
138   
139               project.objects["main"]["object_tree"].setItemWidget(
140                   project.objects["main"]["object_tree_objects"][path], 0, widget
141               )
142   
143           if file is None:
144               file = project.selectFile
145   
146           else:
147               pass
148   
149           try:
150               with open(file, "r", encoding="utf-8") as f:
151                   obj = load(f)
152   
153           except FileNotFoundError:
154               return 0
155   
156           if "object_variables" in project.objects["main"]:
157               try:
158                   project.objects["main"]["object_variables"].hide()
159   
160                   project.objects["main"]["object_variables"].deleteLater()
161   
162               except RuntimeError:
163                   pass
164   
165           project.objects["main"]["object_tree_objects"] = {}
166   
167           project.objects["main"]["object_tree"] = QTreeWidget(parent=project)
168   
169           if "variables" not in project.objects["main"]:
170               project.objects["main"]["variables"] = {}
171   
172           if variables:
173               if bottom:
174                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
175                       project,
176                       Vec4i(
177                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
178                           40 + 10 + (project.height() - 80) // 2,
179                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
180                           (project.height() - 80) // 2
181                       ),
182                       translate("Create object variable"),
183                       file
184                   )
185   
186               else:
187                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
188                       project,
189                       Vec4i(
190                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
191                           40,
192                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
193                           project.height() - 70
194                       ),
195                       translate("Create object variable"),
196                       file
197                   )
198   
199           project.objects["main"]["widgets"] = []
200   
201           if pos is None:
202               project.objects["main"]["object_tree"].setGeometry(project.objects["center_rama"].x(), project.objects["center_rama"].y(), project.objects["center_rama"].width(), project.objects["center_rama"].height())
203   
204           else:
205               project.objects["main"]["object_tree"].setGeometry(*pos)
206   
207           project.objects["main"]["object_tree"].header().hide()
208           project.objects["main"]["object_tree"].setFont(LFONT)
209           project.objects["main"]["object_tree"].show()
210   
211           project.objects["main"]["object_tree"].saveAllValues = lambda self, project: Object.saveAllValues(project)
212   
213           project.objects["main"]["object_tree_main"] = QTreeWidgetItem(project.objects["main"]["object_tree"])
214           project.objects["main"]["object_tree_main"].setText(0, file[file.rfind("/") + 1:])
215           project.objects["main"]["object_tree_main"].setExpanded(True)
216           project.objects["main"]["object_tree_main"].setFont(0, FONT)
217   
218           if include(project, obj, "type", class_) == -1:
219               pass
220   
221           obj = dict(sorted(obj.items(), key=lambda x: -1 if x[0] not in SORTING_OBJECT_TYPES else SORTING_OBJECT_TYPES[x[0]]))
222   
223           for key, value in obj.items():
224               if key == "type":
225                   continue
226   
227               if key not in obj["dependence"] + [obj["type"]["value"]]:
228                   continue
229   
230               project.objects["main"]["object_tree_objects"][key] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
231               project.objects["main"]["object_tree_objects"][key].setText(0, translate(key))
232               project.objects["main"]["object_tree_objects"][key].setExpanded(True)
233               project.objects["main"]["object_tree_objects"][key].setFont(0, FONT)
234   
235               for k1, v1 in value.items():
236                   include(project, obj, f"{key}/{k1}", class_)
237   
238       @staticmethod
239       def function(obj, project, save: str, last: dict, path: str, init: bool = True) -> None:
240           with open(f"engine/files/objects.json", "r", encoding="utf-8") as file:
241               objects = load(file)
242   
243           try:
244               with open(save, "r", encoding="utf-8") as f:
245                   file = load(f)
246   
247           except BaseException:
248               return 0
249   
250           if last["type"] == "bool":
251               text = obj.isChecked()
252   
253           else:
254               try:
255                   text = obj.text()
256   
257               except AttributeError:
258                   text = objects["specials"]["choose"][path[path.rfind("/") + 1:]]["output"][obj.currentIndex()]
259   
260           doing = False
261   
262           temp = Object.get(file, path)
263   
264           if last["type"] == "str":
265               temp["value"] = text
266   
267               doing = True
268   
269           if last["type"] == "bool":
270               temp["value"] = text
271   
272               doing = True
273   
274           if last["type"] == "path":
275               if text == "" or (os.path.exists(f"projects/{project.selectProject}/project/{text}") and any([text.endswith(element) for element in IMAGE_FORMATES])):
276                   temp["value"] = text
277   
278                   doing = True
279   
280               else:
281                   MessageBox.error("The path does not exist or this isn't a image")
282   
283           if last["type"] == "int":
284               try:
285                   float(text)
286   
287               except BaseException:
288                   pass
289   
290               else:
291                   doing = True
292   
293                   if abs(math.trunc(float(text)) - float(text)) < project.engine.FLOAT_PRECISION:
294                       temp["value"] = round(float(text))
295   
296                   else:
297                       temp["value"] = float(text)
298   
299           if last["type"] == "choose":
300               temp["value"] = text
301               file["dependence"] = file["dependences"][temp["value"]]
302   
303               doing = True
304   
305               for element in objects["dependences"][file["type"]["value"]] + [file["type"]["value"]]:
306                   for value in objects["objects"][element]:
307                       if element not in file:
308                           file[element] = {}
309   
310                       if value in file[element]:
311                           continue
312   
313                       if objects["type"] == "choose":
314                           file[element][value] = {
315                               "name": objects["name"][value],
316                               "value": objects["standard"][value],
317                               "type": objects["type"][value],
318                               "choose": objects["specials"]["choose"][value]
319                           }
320   
321                       else:
322                           file[element][value] = {
323                               "name": objects["name"][value],
324                               "value": objects["standard"][value],
325                               "type": objects["type"][value]
326                           }
327   
328           if not doing:
329               obj.setText(str(last["value"]))
330   
331           if doing and temp["value"] != last["value"]:
332               with open(save, "w", encoding="utf-8") as f:
333                   dump(file, f, indent=4)
334   
335               if init:
336                   project.init()
337   
338       @staticmethod
339       def saveAllValues(project):
340           for widget in project.objects["main"]["widgets"]:
341               if hasattr(widget, "value") and hasattr(widget.value, "saveAllValues"):
342                   widget.value.saveAllValues()
343   
##### scr\modules\functions\main\files\objtext.py #####
1     from PyQt5.QtWidgets import QLabel, QScrollBar, QColorDialog, QCheckBox, QComboBox, QTreeWidget, QDialog, QTreeWidgetItem, QWidget, QHBoxLayout, QSizePolicy, QSpacerItem, QPushButton
2     from PyQt5.QtCore import Qt
3     from PyQt5.QtGui import QColor, QPixmap, QImage
4     from PyQt5 import QtWidgets
5     
6     from scr.modules.widgets import FocusLineEdit, FocusComboBox
7     
8     from scr.modules.functions.main.files.code import CodeAdditionsVarsType
9     
10     from PIL import Image
11    
12    from engine.vector.int import Vec4i
13    
14    from scr.variables import *
15    
16    import math
17    import os
18    
19    SORTING_TEXT_TYPES = {
20        "Text": 1,
21        "Field": 2
22    }
23    
24    
25    def fontCreateDialog(project, widget, path: str = None, value: str = None):
26        project.dialog = ChooseFontDialog(project, project, path, value, widget)
27        project.dialog.exec_()
28    
29    
30    def colorCreateDialog(project, widget, path: str = None, value: str = None):
31        color = QColorDialog.getColor(QColor(value), None, translate("Color"))
32    
33        if color.isValid():
34            color = color.name()
35    
36            widget.out = color
37    
38            widget.saveAllValues()
39    
40            project.init()
41    
42    
43    class ChooseFontFunction:
44        @staticmethod
45        def choose(project, dialog, event, widget):
46            name = FONT_LIST[dialog.objects["choose_combobox"].currentIndex()]
47    
48            widget.setText(name)
49    
50            widget.saveAllValues()
51    
52            dialog.close()
53    
54            project.init()
55    
56    
57    class ChooseFontDialog(QDialog):
58        def __init__(self, project, parent, key, value, widget) -> None:
59            QDialog.__init__(self, parent)
60    
61            self.project = project
62    
63            self.key = key
64            self.value = value
65    
66            self.widget = widget
67    
68            self.setWindowTitle(translate("Choose font"))
69            self.setFixedSize(600, 400)
70    
71            desktop = QtWidgets.QApplication.desktop()
72            self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
73    
74            self.application = None
75    
76            self.objects = {}
77    
78            self.init()
79    
80        def init(self) -> None:
81            self.objects["empty"] = QPushButton(parent=self)
82            self.objects["empty"].setGeometry(0, 0, 0, 0)
83    
84            # ALL PROJECTS -> COMBOBOX
85    
86            self.objects["choose_label"] = QLabel(parent=self, text=translate("Font") + ":")
87            self.objects["choose_label"].setGeometry(10, 10, 200, 25)
88            self.objects["choose_label"].setFont(FONT)
89            self.objects["choose_label"].show()
90    
91            self.objects["choose_combobox"] = QComboBox(parent=self)
92            self.objects["choose_combobox"].setGeometry(210, 10, 300, 25)
93            self.objects["choose_combobox"].setFont(FONT)
94            self.objects["choose_combobox"].show()
95    
96            self.objects["choose_combobox"].addItems(FONT_LIST)
97            self.objects["choose_combobox"].setCurrentIndex(FONT_LIST.index(self.value))
98    
99            self.objects["choose_combobox"].currentIndexChanged.connect(lambda: self.fontVisiable())
100    
101           # CHOOSE
102   
103           self.objects["choose_button"] = QPushButton(parent=self, text=translate("Choose"))
104           self.objects["choose_button"].setStyleSheet(BUTTON_BLUE_STYLE)
105   
106           self.objects["choose_button"].released.connect(lambda: self.objects["empty"].setFocus())
107   
108           self.objects["choose_button"].setGeometry(150, 340, 300, 40)
109           self.objects["choose_button"].setFont(FONT)
110           self.objects["choose_button"].show()
111   
112           self.objects["choose_button"].clicked.connect(lambda event: ChooseFontFunction.choose(self.project, self, event, self.widget))
113   
114           # FONT
115   
116           self.objects["font"] = QLabel(self)
117           self.objects["font"].setGeometry(20, 50, 560, 280)
118           self.objects["font"].show()
119   
120           # APPLICATION
121   
122           self.application = self.project.engine.Application(autoUpdateScreen=False, visiable=False)
123           self.application.setSize(560, 280)
124   
125           self.application.setCamera(self.project.engine.camera.StaticCamera(self.application, 0, 0))
126   
127           self.fontVisiable()
128   
129       def fontVisiable(self):
130           self.application.objects.removeByGroup("font")
131   
132           self.application.objects.add(self.project.engine.objects.Text(self.application, (0, 0), (0, 0, 560, 280), group="font", font=FONT_LIST[self.objects["choose_combobox"].currentIndex()], message="Example", fontSize=60, fontColor="#000000", alignment=["center", "center"]))
133   
134           self.application.frame(screenFillColor=(248, 249, 250))
135   
136           qpixmap = QPixmap(ObjectText.getVisiableScreen(QImage(self.application.screen.get_buffer(), 560, 280, QImage.Format_RGB32), 560, 280))
137   
138           self.objects["font"].setPixmap(qpixmap)
139   
140   
141   class ObjectText:
142       class TextTreeWidgetItem(QWidget):
143           def __init__(self, project, obj: dict, temp: dict, path: str, parent=None) -> None:
144               QWidget.__init__(self, parent)
145   
146               self.project = project
147   
148               self.complited = 0
149   
150               layout = QHBoxLayout()
151   
152               self.label = QLabel(translate(temp["name"]) + ":")
153               self.label.setFont(FONT)
154   
155               self.label.setFixedWidth(Size.x(20))
156   
157               save = project.selectFile
158   
159               if temp["type"] == "str" or temp["type"] == "path" or temp["type"] == "int":
160                   self.value = FocusLineEdit(project, releasedFocusFunction=lambda: ObjectText.function(self.value, project, save, temp, path))
161                   self.value.setText(str(temp["value"]))
162   
163                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
164   
165               elif temp["type"] == "bool":
166                   self.value = QCheckBox(project)
167                   self.value.setFixedHeight(20)
168                   self.value.setChecked(bool(temp["value"]))
169   
170                   self.value.clicked.connect(lambda: ObjectText.function(self.value, project, save, temp, path, init=False))
171   
172               elif temp["type"] in ("choose", "choosing"):
173                   self.value = FocusComboBox(releasedFocusFunction=lambda: ObjectText.function(self.value, project, save, temp, path))
174                   self.value.currentIndexChanged.connect(lambda: self.value.clearFocus())
175                   self.value.addItems([translate(element) for element in temp["choose"]["input"]])
176                   self.value.setCurrentIndex([temp["value"] == element for i, element in enumerate(temp["choose"]["output"])].index(True))
177   
178                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
179   
180               elif temp["type"] == "font":
181                   self.value = QPushButton(self)
182                   self.value.setText(temp["value"])
183                   self.value.setFixedHeight(20)
184   
185                   self.value.clicked.connect(lambda: fontCreateDialog(self.project, self.value, path, temp["value"]))
186   
187                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
188   
189               elif temp["type"] == "color":
190                   self.value = QPushButton(self)
191                   self.value.setFixedHeight(20)
192                   self.value.setStyleSheet(f"background-color: {temp['value']};")
193   
194                   self.value.clicked.connect(lambda: colorCreateDialog(self.project, self.value, path, temp["value"]))
195   
196                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
197   
198               elif temp["type"] == "dict":
199                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
200                   project.objects["main"]["object_tree_objects"][path].setText(0, translate(temp["name"]))
201                   project.objects["main"]["object_tree_objects"][path].setExpanded(True)
202                   project.objects["main"]["object_tree_objects"][path].setFont(0, FONT)
203   
204                   self.complited = 2
205   
206                   return
207   
208               else:
209                   raise TypeError(f"type {temp['type']} is not defined")
210   
211               self.value.setFont(FONT)
212               self.value.setFixedWidth(Size.x(25))
213   
214               layout.addWidget(self.label)
215               layout.addSpacerItem(QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum))
216   
217               layout.addWidget(self.value)
218   
219               layout.setContentsMargins(0, 0, 10, 0)
220   
221               self.setLayout(layout)
222   
223               self.complited = 1
224   
225       @staticmethod
226       def get(obj, path) -> dict:
227           temp = obj
228   
229           for element in path.split("/"):
230               try:
231                   temp = temp[element]
232   
233               except KeyError:
234                   temp = temp["value"][element]
235   
236           return temp
237   
238       @staticmethod
239       def init(project, class_=TextTreeWidgetItem, file=None, pos=None, type: str = "object", variables: bool = True, bottom: bool = False) -> None:
240           def include(project, obj: dict, path: str, class_) -> None:
241               temp = ObjectText.get(obj, path)
242   
243               try:
244                   widget = class_(project, obj, temp, path, project, type=type)
245   
246               except:
247                   widget = class_(project, obj, temp, path, project)
248   
249               if widget.complited == -1:
250                   return -1
251   
252               if widget.complited == 2:
253                   for key, value in temp["value"].items():
254                       include(project, obj, f"{path}/{key}", class_)
255   
256                   return 0
257   
258               else:
259                   project.objects["main"]["widgets"].append(widget)
260   
261               if path.count("/") == 0:
262                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
263   
264               else:
265                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
266   
267               project.objects["main"]["object_tree"].setItemWidget(
268                   project.objects["main"]["object_tree_objects"][path], 0, widget
269               )
270   
271           if file is None:
272               file = project.selectFile
273   
274           else:
275               pass
276   
277           try:
278               with open(file, "r", encoding="utf-8") as f:
279                   obj = load(f)
280   
281           except FileNotFoundError:
282               return 0
283   
284           if "object_variables" in project.objects["main"]:
285               try:
286                   project.objects["main"]["object_variables"].hide()
287   
288                   project.objects["main"]["object_variables"].deleteLater()
289   
290               except RuntimeError:
291                   pass
292   
293           project.objects["main"]["object_tree_objects"] = {}
294   
295           project.objects["main"]["object_tree"] = QTreeWidget(parent=project)
296   
297           if "variables" not in project.objects["main"]:
298               project.objects["main"]["variables"] = {}
299   
300           if variables:
301               if bottom:
302                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
303                       project,
304                       Vec4i(
305                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
306                           40 + 10 + (project.height() - 80) // 2,
307                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
308                           (project.height() - 80) // 2
309                       ),
310                       translate("Create object variable"),
311                       file
312                   )
313   
314               else:
315                   project.objects["main"]["object_variables"] = CodeAdditionsVarsType(
316                       project,
317                       Vec4i(
318                           project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
319                           40,
320                           project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
321                           project.height() - 70
322                       ),
323                       translate("Create object variable"),
324                       file
325                   )
326   
327           project.objects["main"]["widgets"] = []
328   
329           if pos is None:
330               project.objects["main"]["object_tree"].setGeometry(project.objects["center_rama"].x(), project.objects["center_rama"].y(), project.objects["center_rama"].width(), project.objects["center_rama"].height())
331   
332           else:
333               project.objects["main"]["object_tree"].setGeometry(*pos)
334   
335           project.objects["main"]["object_tree"].header().hide()
336           project.objects["main"]["object_tree"].setFont(LFONT)
337           project.objects["main"]["object_tree"].show()
338   
339           project.objects["main"]["object_tree"].saveAllValues = lambda self, project: ObjectText.saveAllValues(project)
340   
341           project.objects["main"]["object_tree_main"] = QTreeWidgetItem(project.objects["main"]["object_tree"])
342           project.objects["main"]["object_tree_main"].setText(0, file[file.rfind("/") + 1:])
343           project.objects["main"]["object_tree_main"].setExpanded(True)
344           project.objects["main"]["object_tree_main"].setFont(0, FONT)
345   
346           if include(project, obj, "type", class_) == -1:
347               pass
348   
349           obj = dict(sorted(obj.items(), key=lambda x: -1 if x[0] not in SORTING_TEXT_TYPES else SORTING_TEXT_TYPES[x[0]]))
350   
351           for key, value in obj.items():
352               if key == "type":
353                   continue
354   
355               if key not in obj["dependence"] + [obj["type"]["value"]]:
356                   continue
357   
358               project.objects["main"]["object_tree_objects"][key] = QTreeWidgetItem(project.objects["main"]["object_tree_main"])
359               project.objects["main"]["object_tree_objects"][key].setText(0, translate(key))
360               project.objects["main"]["object_tree_objects"][key].setExpanded(True)
361               project.objects["main"]["object_tree_objects"][key].setFont(0, FONT)
362   
363               for k1, v1 in value.items():
364                   include(project, obj, f"{key}/{k1}", class_)
365   
366       @staticmethod
367       def function(obj, project, save: str, last: dict, path: str, init: bool = True) -> None:
368           with open(f"engine/files/text.json", "r", encoding="utf-8") as file:
369               objects = load(file)
370   
371           try:
372               with open(save, "r", encoding="utf-8") as f:
373                   file = load(f)
374   
375           except BaseException:
376               return 0
377   
378           if last["type"] == "font":
379               text = obj.text()
380   
381           if last["type"] == "scroll":
382               text = obj.value()
383   
384           elif last["type"] == "color":
385               if not hasattr(obj, "out"):
386                   return
387   
388               text = obj.out
389   
390           elif last["type"] == "bool":
391               text = obj.isChecked()
392   
393           else:
394               try:
395                   text = obj.text()
396   
397               except AttributeError:
398                   text = objects["specials"]["choose"][path[path.rfind("/") + 1:]]["output"][obj.currentIndex()]
399   
400           doing = False
401   
402           temp = ObjectText.get(file, path)
403   
404           if last["type"] == "str":
405               temp["value"] = text
406   
407               doing = True
408   
409           if last["type"] == "bool":
410               temp["value"] = text
411   
412               doing = True
413   
414           if last["type"] == "font":
415               temp["value"] = text
416   
417               doing = True
418   
419           if last["type"] == "color":
420               temp["value"] = text
421   
422               doing = True
423   
424           if last["type"] == "path":
425               if text == "" or (os.path.exists(f"projects/{project.selectProject}/project/{text}") and any([text.endswith(element) for element in IMAGE_FORMATES])):
426                   temp["value"] = text
427   
428                   doing = True
429   
430               else:
431                   MessageBox.error("The path does not exist or this isn't a image")
432   
433           if last["type"] == "int":
434               try:
435                   float(text)
436   
437               except BaseException:
438                   pass
439   
440               else:
441                   doing = True
442   
443                   if abs(math.trunc(float(text)) - float(text)) < project.engine.FLOAT_PRECISION:
444                       temp["value"] = round(float(text))
445   
446                   else:
447                       temp["value"] = float(text)
448   
449           if last["type"] == "choosing":
450               temp["value"] = text
451   
452               doing = True
453   
454           if last["type"] == "scroll":
455               temp["value"] = text
456   
457               doing = True
458   
459           if last["type"] == "choose":
460               temp["value"] = text
461               file["dependence"] = file["dependences"][temp["value"]]
462   
463               doing = True
464   
465               for element in objects["dependences"][file["type"]["value"]] + [file["type"]["value"]]:
466                   for value in objects["objects"][element]:
467                       if element not in file:
468                           file[element] = {}
469   
470                       if value in file[element]:
471                           continue
472   
473                       if objects["type"] == "choose":
474                           file[element][value] = {
475                               "name": objects["name"][value],
476                               "value": objects["standard"][value],
477                               "type": objects["type"][value],
478                               "choose": objects["specials"]["choose"][value]
479                           }
480   
481                       else:
482                           file[element][value] = {
483                               "name": objects["name"][value],
484                               "value": objects["standard"][value],
485                               "type": objects["type"][value]
486                           }
487   
488           if not doing:
489               obj.setText(str(last["value"]))
490   
491           if doing and temp["value"] != last["value"]:
492               with open(save, "w", encoding="utf-8") as f:
493                   dump(file, f, indent=4)
494   
495               if init:
496                   project.init()
497   
498       @staticmethod
499       def saveAllValues(project):
500           for widget in project.objects["main"]["widgets"]:
501               if hasattr(widget, "value") and hasattr(widget.value, "saveAllValues"):
502                   widget.value.saveAllValues()
503   
504       @staticmethod
505       def getVisiableScreen(image, width, height) -> Image.Image:
506           def center(image: QImage, newWidth: int, newHeight: int) -> QImage:
507               width = image.width()
508               height = image.height()
509   
510               left = (width - newWidth) // 2
511               top = (height - newHeight) // 2
512               right = left + newWidth
513               bottom = top + newHeight
514   
515               return image.copy(left, top, newWidth, newHeight)
516   
517           return center(image, width, height)
518   
##### scr\modules\functions\main\files\scene.py #####
1     from PyQt5.QtWidgets import QTreeWidget, QPushButton, QWidget, QSpacerItem, QSizePolicy, QHBoxLayout, QLabel, QTreeWidgetItem, QCheckBox, QMenu, QAction
2     from PyQt5.QtGui import QPixmap, QImage, QCursor, QPainter, QPen, QColor
3     from PyQt5.Qt import Qt, QTimer, QPoint
4     
5     from scr.modules.dialogs import CreateSceneObject, CreateInterfaceObject, animatorCreateDialog
6     
7     from scr.modules.functions.main.files.button import Button
8     from scr.modules.functions.main.files.objtext import ObjectText, fontCreateDialog, colorCreateDialog
9     
10     from scr.modules.dialogs.tree.create_object import CreateObjectFunctions
11    
12    from scr.modules.functions.main.files.object import Object as ObjectTypingClass
13    
14    from scr.modules.widgets import FocusLineEdit, FocusComboBox
15    
16    from scr.modules import functions
17    
18    from engine.vector.float import Vec2f
19    
20    from scr.variables import *
21    
22    from PIL import Image
23    
24    import dataclasses
25    import pyperclip
26    import shutil
27    import typing
28    import math
29    import re
30    
31    
32    def isCurrectText(obj: dict):
33        def func(obj, path):
34            if len(path) == 0:
35                return obj, []
36    
37            var = obj[path[0]]
38            path.pop(0)
39    
40            return var, path
41    
42        for element in TEXT_CURRECT_TEST:
43            try:
44                func(obj, element.split("/"))
45    
46            except BaseException:
47                return False
48    
49        return True
50    
51    
52    def isCurrectObject(obj: dict):
53        def func(obj, path):
54            if len(path) == 0:
55                return obj, []
56    
57            var = obj[path[0]]
58            path.pop(0)
59    
60            return var, path
61    
62        for element in OBJECT_CURRECT_TEST:
63            try:
64                func(obj, element.split("/"))
65    
66            except BaseException:
67                return False
68    
69        return True
70    
71    
72    @dataclasses.dataclass
73    class SceneHash:
74        type: str = "scene"
75    
76        screen: Image.Image = None
77        camera: typing.Any = None
78    
79        selectObject: str = None
80        selectLink: id = -1
81    
82        settings: str = ""
83    
84        size: int = 1
85    
86    
87    class SceneLabel(QLabel):
88        def __init__(self, parent=None, draggingFunction: typing.Callable = None, pressFunction: typing.Callable = None, releasedFunction: typing.Callable = None) -> None:
89            QLabel.__init__(self, parent)
90    
91            self.draggingFunction = draggingFunction
92    
93            self.pressFunction = pressFunction
94            self.releasedFunction = releasedFunction
95    
96            self.project = parent
97    
98            self.lastPoint = QPoint()
99    
100            self.position = None
101   
102           self.drawing = False
103   
104           self.pos = Vec2f()
105   
106           self.setMouseTracking(True)
107   
108           if "scene_timer" in self.project.objects["main"]:
109               try:
110                   self.project.objects["main"]["scene_timer"].stop()
111   
112               except RuntimeError:
113                   pass
114   
115           with open(self.project.cash["file"][self.project.selectFile].settings, "r", encoding="utf-8") as file:
116               self.sceneSettings = load(file)
117   
118       def updateCameraObject(self) -> None:
119           if self.x() < QCursor.pos().x() - self.project.x() < self.x() + self.width() and self.y() < QCursor.pos().y() - self.project.y() - 40 < self.y() + self.height():
120               self.position = Vec2f(QCursor.pos().x() - self.project.x() - self.x(), QCursor.pos().y() - self.project.y() - self.y() - 40)
121   
122           else:
123               self.position = None
124   
125           if self.draggingFunction is None:
126               return 0
127   
128           if self.sceneSettings["Scene"]["camera_acceleration"]["value"]:
129               speed = math.sqrt(self.pos.x ** 2 + self.pos.y ** 2) / 15
130   
131               pos = Vec2f(*self.pos.get())
132   
133               while abs(pos.x) > speed or abs(pos.y) > speed:
134                   pos /= 2
135   
136               pos.x = int(pos.x)
137               pos.y = int(pos.y)
138   
139               self.pos.x -= pos.x
140               self.pos.y -= pos.y
141   
142               self.draggingFunction(pos.x, pos.y)
143   
144           else:
145               self.draggingFunction(self.pos.x, self.pos.y)
146   
147               self.pos = Vec2f()
148   
149       def mousePressEvent(self, event) -> None:
150           if event.button() == Qt.LeftButton:
151               self.lastPoint = event.pos()
152   
153               self.pressFunction(event.pos().x() - self.project.objects["main"]["scene"].width() // 2, event.pos().y() - self.project.objects["main"]["scene"].height() // 2)
154   
155               self.drawing = True
156   
157           try:
158               self.setFocus()
159   
160           except RuntimeError:
161               pass
162   
163       def mouseReleaseEvent(self, event) -> None:
164           if event.button() == Qt.LeftButton:
165               if self.releasedFunction is not None:
166                   self.releasedFunction(event.pos().x() - self.project.objects["main"]["scene"].width() // 2, event.pos().y() - self.project.objects["main"]["scene"].height() // 2)
167   
168               self.drawing = False
169   
170       def mouseMoveEvent(self, event) -> None:
171           self.updateCameraObject()
172   
173           if event.buttons() & Qt.LeftButton and self.drawing:
174               x = event.pos().x() - self.lastPoint.x()
175               y = event.pos().y() - self.lastPoint.y()
176   
177               self.lastPoint = event.pos()
178   
179               if self.draggingFunction is not None:
180                   self.pos.x += x
181                   self.pos.y += y
182   
183               try:
184                   self.update()
185   
186               except RuntimeError:
187                   pass
188   
189   
190   class SceneAdditions:
191       class SceneAdditionWidgetItem(QWidget):
192           def __init__(self, project, obj: dict, temp: dict, path: str, file: str, type: str = "object", parent=None) -> None:
193               QWidget.__init__(self, parent)
194   
195               self.project = project
196   
197               self.complited = 0
198   
199               layout = QHBoxLayout()
200   
201               try:
202                   self.label = QLabel(translate(temp["name"]) + ":")
203                   self.label.setFont(FONT)
204   
205               except KeyError:
206                   self.complited = -1
207   
208                   return
209   
210               self.label.setFixedWidth(Size.x(8))
211   
212               if type == "object":
213                   save = project.cash["file"][project.selectFile].selectObject.variables["file"]
214   
215               else:
216                   save = project.cash["file"][project.selectFile].settings
217   
218               if temp["type"] == "str" or temp["type"] == "path" or temp["type"] == "int":
219                   self.value = FocusLineEdit(parent=project, releasedFocusFunction=lambda: self.focusOutLabel(project, save, temp, path))
220                   self.value.setText(str(temp["value"]))
221   
222                   self.value.saveAllValues = lambda: ObjectTypingClass.function(self.value, project, save, temp, path, init=False)
223   
224               elif temp["type"] == "choose":
225                   if obj["main"] == "StaticObject":
226                       self.value = FocusComboBox(releasedFocusFunction=lambda: ObjectTypingClass.function(self.value, project, save, temp, path))
227   
228                   elif obj["main"] == "Text":
229                       self.value = FocusComboBox(releasedFocusFunction=lambda: ObjectText.function(self.value, project, save, temp, path))
230   
231                   elif obj["main"] == "Button":
232                       self.value = FocusComboBox(releasedFocusFunction=lambda: Button.function(self.value, project, save, temp, path))
233   
234                   else:
235                       pass
236   
237                   self.value.currentIndexChanged.connect(lambda: self.value.clearFocus())
238                   self.value.addItems([translate(element) for element in temp["choose"]["input"]])
239                   self.value.setCurrentIndex([temp["value"] == element for i, element in enumerate(temp["choose"]["output"])].index(True))
240   
241               elif temp["type"] == "choosing":
242                   self.value = FocusComboBox(releasedFocusFunction=lambda: ObjectText.function(self.value, project, save, temp, path))
243                   self.value.currentIndexChanged.connect(lambda: self.value.clearFocus())
244                   self.value.addItems([translate(element) for element in temp["choose"]["input"]])
245                   self.value.setCurrentIndex([temp["value"] == element for i, element in enumerate(temp["choose"]["output"])].index(True))
246   
247                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
248   
249               elif temp["type"] == "dict":
250                   project.objects["main"]["object_tree_objects"][path] = QTreeWidgetItem(project.objects["main"]["object_tree_objects"][path[:path.rfind("/")]])
251                   project.objects["main"]["object_tree_objects"][path].setText(0, translate(temp["name"]))
252                   project.objects["main"]["object_tree_objects"][path].setExpanded(True)
253                   project.objects["main"]["object_tree_objects"][path].setFont(0, FONT)
254   
255                   self.complited = 2
256   
257                   return
258   
259               elif temp["type"] == "bool":
260                   self.value = QCheckBox(parent=project)
261                   self.value.setChecked(bool(temp["value"]))
262   
263                   self.value.stateChanged.connect(lambda: self.focusOutCheckBox(project, save, temp, path))
264   
265               elif temp["type"] == "animator":
266                   self.value = QPushButton(self)
267                   self.value.setText(translate("Animation"))
268                   self.value.setFixedHeight(20)
269   
270                   self.value.clicked.connect(lambda: animatorCreateDialog(self.project, save))
271   
272                   self.value.saveAllValues = lambda: ObjectTypingClass.function(self.value, project, save, temp, path, init=False)
273   
274               elif temp["type"] == "font":
275                   self.value = QPushButton(self)
276                   self.value.setText(temp["value"])
277                   self.value.setFixedHeight(20)
278   
279                   self.value.clicked.connect(lambda: fontCreateDialog(self.project, self.value, path, temp["value"]))
280   
281                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
282   
283               elif temp["type"] == "color":
284                   self.value = QPushButton(self)
285                   self.value.setFixedHeight(20)
286                   self.value.setStyleSheet(f"background-color: {temp['value']};")
287   
288                   self.value.clicked.connect(lambda: colorCreateDialog(self.project, self.value, path, temp["value"]))
289   
290                   self.value.saveAllValues = lambda: ObjectText.function(self.value, project, save, temp, path, init=False)
291   
292               elif temp["type"] == "none":
293                   pass
294   
295               else:
296                   raise TypeError(f"type {temp['type']} is not defined")
297   
298               if temp["type"] == "none":
299                   self.complited = -1
300   
301                   return
302   
303               self.value.setFont(FONT)
304               self.value.setFixedWidth(Size.x(3))
305   
306               layout.addWidget(self.label)
307               layout.addSpacerItem(QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum))
308   
309               layout.addWidget(self.value)
310   
311               layout.setContentsMargins(0, 0, 10, 0)
312   
313               self.setLayout(layout)
314   
315               self.complited = 1
316   
317           def focusOutLabel(self, project, save, temp, path) -> None:
318               ObjectTypingClass.function(self.value, project, save, temp, path)
319   
320               self.focusOut(project)
321   
322           def focusOutCheckBox(self, project, save, temp, path) -> None:
323               ObjectTypingClass.function(self.value, project, save, temp, path)
324   
325               self.focusOut(project)
326   
327           def focusOut(self, project) -> None:
328               try:
329                   select = project.application[project.selectFile].objects.getByGroup("__debug_select__")[0]
330   
331               except KeyError:
332                   return
333   
334               except IndexError:
335                   pass
336   
337               else:
338                   obj = project.cash["file"][project.selectFile].selectObject
339   
340                   select.hitbox = obj.hitbox
341                   select.pos = obj.pos
342   
343                   Scene.select(project, obj.pos.x + 1, obj.pos.y + 1)
344   
345       @staticmethod
346       def init(project) -> None:
347           try:
348               project.objects["main"]["settings"].hide()
349               project.objects["main"]["settings"].deleteLater()
350   
351               project.objects["main"]["object_tree"].hide()
352               project.objects["main"]["object_tree"].deleteLater()
353   
354           except BaseException:
355               pass
356   
357           project.objects["main"]["settings"] = QTreeWidget(parent=project)
358           project.objects["main"]["settings"].setGeometry(10 + 10 + Size.x(16) + Size.x(68) - 40 + 10, 40, Size.x(16), Size.y(100) - 70)
359           project.objects["main"]["settings"].setHeaderHidden(True)
360           project.objects["main"]["settings"].header().setFont(FONT)
361   
362           if project.cash["file"][project.selectFile].selectObject is not None:
363               file = project.cash["file"][project.selectFile].selectObject.variables["file"]
364   
365               ObjectTypingClass.init(
366                   project, SceneAdditions.SceneAdditionWidgetItem, file,
367                   (
368                       project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10,
369                       40,
370                       project.width() - (project.objects["center_rama"].x() + project.objects["center_rama"].width() + 10) - 10,
371                       (project.height() - 80) // 2
372                   ), type="object", bottom=True
373               )
374   
375               project.objects["main"]["settings"].hide()
376   
377           else:
378               file = project.cash["file"][project.selectFile].settings
379   
380               ObjectTypingClass.init(
381                   project, SceneAdditions.SceneAdditionWidgetItem, file,
382                   (
383                       project.objects["main"]["settings"].x(),
384                       project.objects["main"]["settings"].y(),
385                       project.objects["main"]["settings"].width(),
386                       project.objects["main"]["settings"].height()
387                   ), type="scene", variables=False
388               )
389   
390               project.objects["main"]["settings"].show()
391   
392   
393   class Scene:
394       updating = False
395   
396       @staticmethod
397       def init(project, call: str = "") -> None:
398           project.cash["file"][project.selectFile].settings = f"projects/{project.selectProject}/project/cash/{'-'.join(project.selectFile.split('/')[3:])}-setting.json"
399   
400           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
401               project.objects["main"]["project_settings"] = load(file)
402   
403           if not os.path.exists(project.cash["file"][project.selectFile].settings):
404               CreateObjectFunctions.create(project, None, None, "", False, "engine/files/scene.json", project.cash["file"][project.selectFile].settings)
405   
406           with open(project.cash["file"][project.selectFile].settings, "r", encoding="utf-8") as file:
407               project.objects["main"]["scene_settings"] = load(file)
408   
409           try:
410               if project.selectFile not in project.application:
411                   project.application[project.selectFile] = project.engine.Application(usingWidth=project.desktop.width(), usingHeight=project.desktop.height(), visiable=False, debug=False, autoUpdateScreen=False, forcedViewObject=True)
412   
413                   project.cash["file"][project.selectFile].camera = project.engine.objects.DynamicObject(project.application[project.selectFile], (0, 0), (0, 0, 1, 1), group="__mouse__", gravity=0, layer=int(1e9))
414   
415                   project.application[project.selectFile].objects.add(project.cash["file"][project.selectFile].camera)
416   
417                   project.application[project.selectFile].objects.add(project.engine.objects.StaticObject(project.application[project.selectFile], (0, -100000), (0, 0, 1, 200000), group="__debug__", layer=int(1e9)))
418                   project.application[project.selectFile].objects.add(project.engine.objects.StaticObject(project.application[project.selectFile], (-100000, 0), (0, 0, 200000, 1), group="__debug__", layer=int(1e9)))
419   
420                   project.application[project.selectFile].setCamera(project.engine.camera.FocusCamera(project.application[project.selectFile], project.cash["file"][project.selectFile].camera))
421   
422           except TypeError as e:
423               print(e)
424   
425           else:
426               try:
427                   if "scene" in project.objects["main"]:
428                       project.objects["main"]["scene"].deleteLater()
429   
430               except RuntimeError:
431                   pass
432   
433               project.objects["main"]["scene"] = SceneLabel(
434                   parent=project, draggingFunction=lambda x, y: Scene.move(project, x, y), pressFunction=lambda x, y: Scene.select(project, x, y), releasedFunction=lambda x, y: Scene.update(project)
435               )
436   
437               project.objects["main"]["scene"].setGeometry(project.objects["center_rama"].x() + 2, project.objects["center_rama"].y() + 2, project.objects["center_rama"].width() - 4, project.objects["center_rama"].height() - 4)
438               project.objects["main"]["scene"].show()
439   
440               project.objects["main"]["scene"].setContextMenuPolicy(Qt.CustomContextMenu)
441   
442               project.objects["main"]["scene"].customContextMenuRequested.connect(
443                   lambda pos: Scene.menu(project, pos)
444               )
445   
446               project.objects["main"]["scene"].saveAllValues = lambda self, project: Scene.saveAllValues(project)
447   
448               Scene.update(project)
449   
450           SceneAdditions.init(project)
451   
452           def update_():
453               try:
454                   Scene.update(project, call="auto")
455   
456               except AttributeError:
457                   pass
458   
459           # project.objects["main"]["timer"] = QTimer(project)
460           # project.objects["main"]["timer"].timeout.connect(lambda: update_())
461           # project.objects["main"]["timer"].start(1000 // 30)
462   
463       @staticmethod
464       def objects(project) -> None:
465           application = project.application[project.selectFile]
466   
467           for obj in application.objects.objects:
468               if not obj.group.startswith("__") or not obj.group.endswith("__"):
469                   application.objects.remove(obj)
470   
471           var = []
472   
473           for file in os.listdir(project.selectFile):
474               var.append(file)
475   
476           var.sort()
477   
478           id = 0
479   
480           for file in var:
481               with open(f"{project.selectFile}/{file}", "r") as f:
482                   type, variables = Scene.loadObjectFile(project, file[:file.rfind(".")][file.rfind("-") + 1:], load(f))
483   
484                   obj = getattr(project.engine.objects, type)(application, **variables, id=id, variables={"file": f"{project.selectFile}/{file}"})
485   
486                   if hasattr(obj, "gravity"):
487                       obj.gravity = 0
488   
489                   application.objects.add(obj)
490   
491               id += 1
492   
493           if application.objects.getById(project.cash["file"][project.selectFile].selectLink) is None and project.cash["file"][project.selectFile].selectObject is not None:
494               Scene.objectReleased(project)
495   
496       @staticmethod
497       def select(project, x, y) -> None:
498           application = project.application[project.selectFile]
499   
500           project.objects["main"]["scene"].setFocus()
501   
502           select = []
503   
504           if project.selectFile not in project.application:
505               return 0
506   
507           for obj in application.objects.objects:
508               if obj.group.startswith("__") and obj.group.endswith("__"):
509                   continue
510   
511               if obj.pos.x + obj.hitbox.x < x + project.cash["file"][project.selectFile].camera.pos.x < obj.pos.x + obj.hitbox.x + obj.hitbox.width and obj.pos.y + obj.hitbox.y < y + project.cash["file"][project.selectFile].camera.pos.y < obj.pos.y + obj.hitbox.y + obj.hitbox.height:
512                   select.append(obj)
513   
514           if len(select) > 0:
515               application.objects.removeByGroup("__debug_select__")
516   
517           else:
518               return 0
519   
520           # print(select)
521   
522           for obj in application.objects.objects:
523               if obj.group.find("debug") != -1 and obj.group.startswith("__") and obj.group.endswith("__"):
524                   continue
525   
526               if obj.pos.x + obj.hitbox.x < x + project.cash["file"][project.selectFile].camera.pos.x < obj.pos.x + obj.hitbox.x + obj.hitbox.width and obj.pos.y + obj.hitbox.y < y + project.cash["file"][project.selectFile].camera.pos.y < obj.pos.y + obj.hitbox.y + obj.hitbox.height:
527                   project.cash["file"][project.selectFile].selectObject = obj
528                   project.cash["file"][project.selectFile].selectLink = obj.id
529   
530                   application.objects.add(project.engine.objects.StaticObject(
531                       application, obj.pos, obj.hitbox, group="__debug_select__"
532                   ))
533   
534                   # print("create")
535   
536                   Scene.update(project)
537   
538                   break
539   
540       @staticmethod
541       def menu(project, position) -> None:
542           application = project.application[project.selectFile]
543   
544           x = position.x() - project.objects["main"]["scene"].width() // 2
545           y = position.y() - project.objects["main"]["scene"].height() // 2
546   
547           project.objects["main"]["scene_menu"] = QMenu()
548   
549           project.objects["main"]["scene_menu_new_action"] = QAction(translate("Create object"), project)
550           project.objects["main"]["scene_menu_new_action"].triggered.connect(lambda: Scene.createSceneObject(project, position))
551   
552           project.objects["main"]["scene_menu_new_interface_action"] = QAction(translate("Create interface object"), project)
553           project.objects["main"]["scene_menu_new_interface_action"].triggered.connect(lambda: Scene.createInterfaceObject(project, position))
554   
555           project.objects["main"]["scene_menu_copy_action"] = QAction(translate("Copy"), project)
556           project.objects["main"]["scene_menu_copy_action"].triggered.connect(lambda: Scene.copyObject(project))
557   
558           project.objects["main"]["scene_menu_paste_action"] = QAction(translate("Paste"), project)
559           project.objects["main"]["scene_menu_paste_action"].triggered.connect(lambda: Scene.pasteObject(project))
560   
561           project.objects["main"]["scene_menu_delete_action"] = QAction(translate("Delete"), project)
562           project.objects["main"]["scene_menu_delete_action"].triggered.connect(lambda: Scene.deleteSceneObject(project, position))
563   
564           for obj in application.objects.objects:
565               if obj.group.find("debug") != -1 and obj.group.startswith("__") and obj.group.endswith("__"):
566                   continue
567   
568               if obj.pos.x + obj.hitbox.x < x + project.cash["file"][project.selectFile].camera.pos.x < obj.pos.x + obj.hitbox.x + obj.hitbox.width and obj.pos.y + obj.hitbox.y < y + project.cash["file"][project.selectFile].camera.pos.y < obj.pos.y + obj.hitbox.y + obj.hitbox.height:
569                   break
570   
571           else:
572               project.objects["main"]["scene_menu_copy_action"].setDisabled(True)
573               project.objects["main"]["scene_menu_delete_action"].setDisabled(True)
574   
575           project.objects["main"]["scene_menu"].addAction(project.objects["main"]["scene_menu_new_action"])
576           project.objects["main"]["scene_menu"].addAction(project.objects["main"]["scene_menu_new_interface_action"])
577           project.objects["main"]["scene_menu"].addSeparator()
578           project.objects["main"]["scene_menu"].addAction(project.objects["main"]["scene_menu_copy_action"])
579           project.objects["main"]["scene_menu"].addAction(project.objects["main"]["scene_menu_paste_action"])
580           project.objects["main"]["scene_menu"].addSeparator()
581           project.objects["main"]["scene_menu"].addAction(project.objects["main"]["scene_menu_delete_action"])
582   
583           project.objects["main"]["scene_menu"].popup(project.objects["main"]["scene"].mapToGlobal(position))
584   
585       @staticmethod
586       def update(project, call: str = "") -> None:
587           try:
588               application = project.application[project.selectFile]
589   
590           except KeyError:
591               return 0
592   
593           if Scene.updating:
594               return 0
595   
596           Scene.updating = True
597   
598           Scene.objects(project)
599   
600           if call not in ("move", "auto"):
601               SceneAdditions.init(project)
602   
603           x = project.cash["file"][project.selectFile].camera.pos.x
604           y = project.cash["file"][project.selectFile].camera.pos.y
605   
606           # STATUS BAR
607   
608           if call not in ("auto", ):
609               if project.cash["file"][project.selectFile].selectObject is not None:
610                   project.objects["status_bar"].showMessage(project.cash["file"][project.selectFile].selectObject.variables["file"])
611   
612               else:
613                   project.objects["status_bar"].showMessage(project.selectFile)
614   
615           # GRID
616   
617           sceneSettings = project.objects["main"]["scene_settings"]
618   
619           gridWidth = sceneSettings["Scene"]["grid"]["value"]["x"]["value"]
620           gridHeight = sceneSettings["Scene"]["grid"]["value"]["y"]["value"]
621   
622           gridX = x // gridWidth * gridWidth
623           gridY = y // gridHeight * gridHeight
624   
625           lastDrawing = []
626   
627           if SETTINGS["theme"] == "light":
628               lastDrawing.append(["rect", [application.screen, (248, 249, 250), (0, 0, project.desktop.width(), project.desktop.height())]])
629   
630           if sceneSettings["Scene"]["visiable_grid"]["value"]:
631               for px in range(-project.objects["main"]["scene"].width() // 2 // gridWidth - 2, project.objects["main"]["scene"].width() // 2 // gridWidth + 2):
632                   for py in range(-project.objects["main"]["scene"].height() // 2 // gridHeight - 2, project.objects["main"]["scene"].height() // 2 // gridHeight + 2):
633                       lastDrawing.append(["rect", [application.screen, (63, 64, 66) if SETTINGS["theme"] == "dark" else (218, 220, 224), (
634                           (project.desktop.width() // 2 + gridX - (x - gridX) - (gridWidth * (gridX // gridWidth))) + px * gridWidth,
635                           (project.desktop.height() // 2 + gridY - (y - gridY) - (gridHeight * (gridY // gridHeight))) + py * gridHeight,
636                           gridWidth,
637                           gridHeight
638                       ), 1]])
639   
640           # CENTER RAMA
641   
642           application.objects.removeByGroup("__debug_center_rama__")
643   
644           projectSettings = project.objects["main"]["project_settings"]
645   
646           if sceneSettings["Scene"]["visiable_screen"]["value"]:
647               application.objects.add(project.engine.objects.StaticObject(
648                   application, [x - projectSettings["values"]["width"]["value"] // 2, y - projectSettings["values"]["height"]["value"] // 2],
649                   [0, 0, projectSettings["values"]["width"]["value"], projectSettings["values"]["height"]["value"]],
650                   group="__debug_center_rama__", layer=int(1e9 + 2)
651               ))
652   
653           # VISIABLE
654   
655           try:
656               project.cash["file"][project.selectFile].screen = application.frame(image=True, screenFillColor=(32, 33, 36), lastDrawing=lastDrawing)
657   
658           except KeyError:
659               project.objects["tab_file_bar"].updateSelectFile()
660   
661               print("error")
662   
663               return 0
664   
665           qpixmap = QPixmap(Scene.getVisiableScreen(QImage(project.application[project.selectFile].screen.get_buffer(), project.desktop.width(), project.desktop.height(), QImage.Format_RGB32), project.objects["center_rama"].width(), project.objects["center_rama"].height()))
666   
667           # UI
668   
669           painter = QPainter(qpixmap)
670           painter.setFont(SFONT)
671   
672           painter.setPen(QPen(QColor(255, 255, 255) if SETTINGS["theme"] == "dark" else QColor(70, 70, 70), 1))
673   
674           painter.drawText(
675               5, project.objects["center_rama"].height() - 8, f"X, Y: {int(project.cash['file'][project.selectFile].camera.pos.x)}  {int(project.cash['file'][project.selectFile].camera.pos.y)}"
676           )
677   
678           painter.end()
679   
680           project.objects["main"]["scene"].setPixmap(qpixmap)
681   
682           Scene.updating = False
683   
684       @staticmethod
685       def move(project, x, y) -> None:
686           if project.selectFile == "":
687               return 0
688   
689           project.cash["file"][project.selectFile].camera.pos.x -= x
690           project.cash["file"][project.selectFile].camera.pos.y -= y
691   
692           try:
693               Scene.update(project, "move")
694   
695           except BaseException:
696               pass
697   
698       @staticmethod
699       def test(project) -> None:
700           # FOCUS OBJECT
701   
702           for scene in functions.project.getAllProjectScenes(project, False):
703               path = f"projects/{project.selectProject}/project/cash/{'-'.join(scene.split('/')[3:])}-setting.json"
704   
705               if not os.path.exists(path):
706                   continue
707   
708               with open(path, "r") as file:
709                   sceneSettings = load(file)
710   
711               name = sceneSettings["Scene"]["focus"]["value"]
712   
713               if name == "":
714                   continue
715   
716               if not name.endswith(".objc"):
717                   name += ".objc"
718   
719               if name not in os.listdir(scene):
720                   if True:
721                       pass
722   
723                   else:
724                       name = ""
725   
726               sceneSettings["Scene"]["focus"]["value"] = name
727   
728               with open(path, "w") as file:
729                   dump(sceneSettings, file, indent=4)
730   
731       @staticmethod
732       def createInterfaceObject(project, position) -> None:
733           project.dialog = CreateInterfaceObject(project, position, parent=project)
734           project.dialog.exec_()
735   
736       @staticmethod
737       def createSceneObject(project, position) -> None:
738           project.dialog = CreateSceneObject(project, position, parent=project)
739           project.dialog.exec_()
740   
741       @staticmethod
742       def deleteSceneObject(project, position) -> None:
743           application = project.application[project.selectFile]
744   
745           x = position.x() - project.objects["main"]["scene"].width() // 2
746           y = position.y() - project.objects["main"]["scene"].height() // 2
747   
748           for obj in application.objects.objects:
749               if obj.group.find("debug") != -1 and obj.group.startswith("__") and obj.group.endswith("__"):
750                   continue
751   
752               if obj.pos.x + obj.hitbox.x < x + project.cash["file"][project.selectFile].camera.pos.x < obj.pos.x + obj.hitbox.x + obj.hitbox.width and obj.pos.y + obj.hitbox.y < y + project.cash["file"][project.selectFile].camera.pos.y < obj.pos.y + obj.hitbox.y + obj.hitbox.height:
753                   try:
754                       os.remove(obj.variables["file"])
755   
756                   except OSError:
757                       pass
758   
759                   project.init()
760   
761                   break
762   
763       @staticmethod
764       def copyObject(project) -> None:
765           if project.objects["main"]["scene"].position is None:
766               return 0
767   
768           if project.cash["file"][project.selectFile].selectObject is not None:
769               pyperclip.copy(project.cash["file"][project.selectFile].selectObject.variables["file"])
770   
771       @staticmethod
772       def pasteObject(project) -> None:
773           if project.objects["main"]["scene"].position is None:
774               return 0
775   
776           pos = Vec2f(
777               project.objects["main"]["scene"].position.x + project.cash["file"][project.selectFile].camera.pos.x,
778               project.objects["main"]["scene"].position.y + project.cash["file"][project.selectFile].camera.pos.y
779           )
780   
781           copyName = pyperclip.paste()
782   
783           name = copyName[copyName.rfind("/") + 1:]
784   
785           if bool(re.search(r"\d+$", name[:name.rfind(".")])):
786               ext = name[name.rfind(".") + 1:]
787               name = name.replace(f".{ext}", "")
788   
789               name = name.replace(name[name.rfind(" "):], "")
790               name = f"{name}.{ext}"
791   
792           index = 1
793   
794           while True:
795               newName = f"{index}.{name[name.rfind('.') + 1:]}"
796   
797               if os.path.exists(f"{project.selectFile}/{newName}"):
798                   index += 1
799   
800               else:
801                   break
802   
803           path = f"{copyName[:copyName.rfind('/')]}/{newName}"
804   
805           # TODO: проверять что файл являеться объектом
806   
807           try:
808               with open(copyName, "r") as file:
809                   obj = load(file)
810   
811           except FileNotFoundError or OSError:
812               MessageBox.error(translate("Path is not difined (object must was copyed on scene)"))
813   
814               return 0
815   
816           if not isCurrectObject(obj) and not isCurrectText(obj):
817               MessageBox.error(translate("This text is not object"))
818   
819               return 0
820   
821           shutil.copyfile(copyName, path)
822   
823           with open(path, "r") as file:
824               obj = load(file)
825   
826           width = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["x"]["value"]
827           height = project.objects["main"]["scene_settings"]["Scene"]["grid"]["value"]["y"]["value"]
828   
829           if project.objects["main"]["scene_settings"]["Scene"]["snap"]["value"]:
830               obj[obj["main"]]["pos"]["value"]["x"]["value"] = (pos.x - project.objects["main"]["scene"].width() // 2) // width * width
831               obj[obj["main"]]["pos"]["value"]["y"]["value"] = (pos.y - project.objects["main"]["scene"].height() // 2) // height * height
832   
833           else:
834               obj[obj["main"]]["pos"]["value"]["x"]["value"] = pos.x - project.objects["main"]["scene"].width() // 2
835               obj[obj["main"]]["pos"]["value"]["y"]["value"] = pos.y - project.objects["main"]["scene"].height() // 2
836   
837           with open(path, "w") as file:
838               dump(obj, file, indent=4)
839   
840           project.init()
841   
842       @staticmethod
843       def deleteObject(project) -> None:
844           if project.objects["main"]["scene"].position is None:
845               return 0
846   
847           if project.cash["file"][project.selectFile].selectObject is not None:
848               try:
849                   os.remove(project.cash["file"][project.selectFile].selectObject.variables["file"])
850   
851                   Scene.objectReleased(project)
852   
853               except FileNotFoundError:
854                   pass
855   
856           project.init()
857   
858       @staticmethod
859       def objectReleased(project) -> None:
860           if project.selectFile.find("%scene%") == -1:
861               return 0
862   
863           project.application[project.selectFile].objects.removeByGroup("__debug_select__")
864   
865           project.cash["file"][project.selectFile].selectObject = None
866           project.cash["file"][project.selectFile].selectLink = -1
867   
868           Scene.update(project)
869   
870       @staticmethod
871       def loadObjectFile(project, id: int, obj: dict) -> dict:
872           answer = {}
873   
874           for element in obj["dependence"] + [obj["type"]["value"]]:
875               if element not in obj:
876                   continue
877   
878               for key, value in obj[element].items():
879                   if value["type"] == "dict":
880                       answer[key] = [elem["value"] for elem in value["value"].values()]
881   
882                   else:
883                       answer[key] = value["value"]
884   
885           if "sprite" in answer and answer["sprite"] != "":
886               answer["sprite"][0] = f"projects/{project.selectProject}/project/{answer['sprite'][0]}"
887   
888           # print(answer["sprite"])
889   
890           return obj["type"]["value"], answer
891   
892       @staticmethod
893       def toObjectMove(project, direction) -> None:
894           application = project.application[project.selectFile]
895   
896           directions = {
897               "right": (1, 0),
898               "left": (-1, 0),
899               "up": (0, -1),
900               "down": (0, 1)
901           }
902   
903           if project.selectFile not in project.cash["file"]:
904               return 0
905   
906           if project.cash["file"][project.selectFile] is None or project.cash["file"][project.selectFile].type != "scene":
907               return 0
908   
909           if project.cash["file"][project.selectFile].selectObject is None:
910               return 0
911   
912           with open(project.cash["file"][project.selectFile].selectObject.variables["file"], "r") as file:
913               obj = load(file)
914   
915           obj["StaticObject"]["pos"]["value"]["x"]["value"] += directions[direction][0]
916           obj["StaticObject"]["pos"]["value"]["y"]["value"] += directions[direction][1]
917   
918           with open(project.cash["file"][project.selectFile].selectObject.variables["file"], "w") as file:
919               dump(obj, file, indent=4)
920   
921           select = project.application[project.selectFile].objects.getByGroup("__debug_select__")[0]
922   
923           obj = project.cash["file"][project.selectFile].selectObject
924   
925           select.hitbox = obj.hitbox
926   
927           select.pos = obj.pos
928   
929           for i in range(2):
930               Scene.select(project, obj.pos.x + obj.hitbox.width // 2, obj.pos.y + obj.hitbox.height // 2)
931   
932               Scene.update(project)
933   
934       @staticmethod
935       def saveAllValues(project) -> None:
936           pass
937   
938       @staticmethod
939       def getVisiableScreen(image, width, height) -> Image.Image:
940           def center(image: QImage, newWidth: int, newHeight: int) -> QImage:
941               width = image.width()
942               height = image.height()
943   
944               left = (width - newWidth) // 2
945               top = (height - newHeight) // 2
946               right = left + newWidth
947               bottom = top + newHeight
948   
949               return image.copy(left, top, newWidth, newHeight)
950   
951           return center(image, width, height)
952   
##### scr\modules\functions\main\files\text.py #####
1     from PyQt5.QtWidgets import QTextEdit
2     from PyQt5 import QtGui
3     
4     from scr.variables import *
5     
6     import os
7     
8     
9     class Text:
10         @staticmethod
11        def init(project) -> None:
12            if os.path.isdir(project.selectFile):
13                return 0
14    
15            if project.selectFile == "":
16                return 0
17    
18            with open(project.selectFile, "r") as file:
19                text = file.read()
20    
21            project.objects["main"]["editor_textedit"] = QTextEdit(parent=project)
22            project.objects["main"]["editor_textedit"].setGeometry(project.objects["center_rama"].x(), project.objects["center_rama"].y(), project.objects["center_rama"].width(), project.objects["center_rama"].height())
23            project.objects["main"]["editor_textedit"].setFont(LFONT)
24            project.objects["main"]["editor_textedit"].show()
25    
26            project.objects["main"]["editor_textedit"].setWordWrapMode(QtGui.QTextOption.NoWrap)
27    
28            project.objects["main"]["editor_textedit"].textChanged.connect(lambda: Text.function(project))
29    
30            project.objects["main"]["editor_textedit"].setText(text)
31    
32        @staticmethod
33        def function(project):
34            with open(project.selectFile, "w") as file:
35                file.write(project.objects["main"]["editor_textedit"].toPlainText())
36    
##### scr\modules\functions\main\files\__init__.py #####
1     from .config import Config
2     from .object import Object
3     
4     from .scene import Scene, SceneHash, SceneAdditions
5     from .code import Code, CodeHash
6     
7     from .text import Text
8     from .objtext import ObjectText
9     from .button import Button
10     
11    from .image import Image
12    
13    from .collision import Collision
14    
##### scr\modules\functions\main\__init__.py #####
1     from ..main import files
2     
##### scr\modules\functions\menu\compile.py #####
1     from PyQt5.QtWidgets import QDialog, QTableWidget, QPushButton, QTextEdit, QFileDialog, QLineEdit
2     from PyQt5.QtCore import pyqtSignal, QTimer, QSocketNotifier
3     from PyQt5 import QtWidgets, QtCore, Qt
4     
5     from scr.modules import functions
6     
7     from scr.variables import *
8     
9     import subprocess
10     import threading
11    import socket
12    import shutil
13    import typing
14    import json
15    import sys
16    import os
17    
18    PROGRAM = \
19    """# MADE BY GAME ENGINE %ENGINE_VERSION%
20    
21    import tkinter
22    import engine
23    import socket
24    import json
25    import sys
26    import os
27    
28    root = tkinter.Tk()
29    
30    width = root.winfo_screenwidth()
31    height = root.winfo_screenheight()
32    
33    root.destroy()
34    
35    SOCKET_ID = %SOCKET_ID%
36    SOCKET_GLOBAL_ID = %SOCKET_GLOBAL_ID%
37    
38    VARIABLES = {
39        "globals": %PROJECT_GLOBAL_VARIABLES%,
40        "locals": %PROJECT_LOCAL_VARIABLES%,
41        "objects": %PROJECT_OBJECTS_VARIABLES%
42    }
43    
44    SETTINGS = %PROJECT_SETTINGS%
45    PROGRAMS = %PROJECT_PROGRAMS%
46    OBJECTS = %PROJECT_OBJECTS%
47    SCENES = %PROJECT_SCENES%
48    
49    DEBUG = %DEBUG%
50    
51    %COMPILER%
52    
53    class Tps:
54        def __init__(self, maxTps: int = 20, function: typing.Callable = None):
55            self.maxTps = maxTps
56    
57            self.function = function
58    
59            self.start()
60    
61        def start(self):
62            clock = pygame.time.Clock()
63    
64            while True:
65                clock.tick(self.maxTps)
66    
67                self.function(round(clock.get_fps()))
68    
69    
70    class Game(engine.Application):
71        def __init__(self):
72            global width, height
73    
74            engine.Application.__init__(self)
75    
76            self.objects.collisions = engine.Collision("collision.cfg")
77    
78            self.setDebug(SETTINGS["debug"])
79    
80            self.setSize(SETTINGS["width"], SETTINGS["height"])
81    
82            if SETTINGS["full_screen_mode"]:
83                self.setDisplaySize(width, height)
84    
85            self.setName(SETTINGS["name"])
86            self.setIcon(SETTINGS["icon"])
87    
88            self.setFps(SETTINGS["fps"])
89            self.setTps(SETTINGS["tps"])
90    
91            self.setCamera(engine.camera.StaticCamera(self, 0, 0))
92    
93            self.objectIDByName = {}
94            self.objectNameByID = {}
95    
96            self.scene = None
97    
98            self.loadScene(SETTINGS["start_scene"])
99    
100            self.programs = {}
101   
102           self.allObjects = OBJECTS
103           self.linkEngine = engine
104   
105           self.settings = {"settings": SETTINGS, "programs": PROGRAMS, "scenes": SCENES, "variables": VARIABLES}
106   
107           try:
108               self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
109               self.socket.connect(("localhost", SOCKET_ID))
110   
111           except BaseException:
112               self.socket = None
113   
114           try:
115               self.global_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
116               self.global_socket.connect(("localhost", SOCKET_GLOBAL_ID))
117   
118           except BaseException:
119               self.global_socket = None
120   
121           for key, value in PROGRAMS.items():
122               self.programs[key] = Compiler(self, key, value, self.settings, DEBUG)
123   
124           self.counter = threading.Thread(target=lambda: self.tpsStart())
125           self.counter.daemon = True
126           self.counter.start()
127   
128           self.setMouseEvent(0, lambda: self.mouseLeftClick())
129           self.setMouseEvent(2, lambda: self.mouseRightClick())
130   
131           keys = {"click": [], "press": []}
132   
133           for name, program in PROGRAMS.items():
134               for id in self.programs[name].get("keyboardClick"):
135                   node = PROGRAMS[name]["objects"][id]
136   
137                   self.setKeyEvent(["KEYDOWN", node["inputs"]["key"]["standard"]], lambda temp=id: self.programs[name].start(temp))
138   
139           for name, program in PROGRAMS.items():
140               for id in self.programs[name].get("keyboardPress"):
141                   node = PROGRAMS[name]["objects"][id]
142   
143                   self.setKeyEvent(["PRESS", node["inputs"]["key"]["standard"]], lambda temp=id: self.programs[name].start(temp))
144   
145       def print(self, text: str) -> None:
146           if self.socket is not None:
147               self.socket.sendall(text.encode())
148   
149           else:
150               print(text)
151   
152       def update(self) -> None:
153           super().update()
154   
155           if self.global_socket is not None:
156               try:
157                   data = json.dumps(VARIABLES["globals"])
158                   self.global_socket.sendall(data.encode())
159   
160               except BaseException:
161                   pass
162   
163           for key, value in self.programs.items():
164               if self.programs[key].error:
165                   info = self.programs[key].information
166   
167                   self.print(f"FATAL ERROR: {info['message']}\\n")
168                   self.print(f"Name: {info['display']['name']}\\nX, Y: {info['pos'][0]}, {info['pos'][1]}\\n")
169                   self.print("Inputs:\\n")
170   
171                   text = ""
172   
173                   for code, ivalue in info["inputs"].items():
174                       line = f"{info['display']['text'][ivalue['name']]} = {ivalue['standard'] if ivalue['value'] is None else ivalue['value']}"
175   
176                       text = text + line + "\\n"
177   
178                   self.print(text)
179   
180                   exit(0)
181   
182               self.programs[key].update()
183   
184       def tpsStart(self):
185           def function(tps):
186               for key, value in PROGRAMS.items():
187                   self.programs[key].tps(tps)
188   
189           tps = Tps(SETTINGS["tps"], lambda tps: function(tps))
190   
191       def mouseLeftClick(self):
192           for key, value in PROGRAMS.items():
193               self.programs[key].event("mouseLeftClick")
194   
195       def mouseRightClick(self):
196           for key, value in PROGRAMS.items():
197               self.programs[key].event("mouseRightClick")
198   
199       def loadScene(self, scene):
200           self.objects.empty()
201   
202           self.scene = scene
203   
204           for key, value in SCENES[scene]["objects"].items():
205               type = value["type"]
206               variables = value["variables"]
207               
208               if "animation" in variables:
209                   variables["animator"] = engine.Animator(self, None, variables["animation"])
210   
211               obj = getattr(engine.objects, type)(self, **variables)
212               
213               if "animation" in variables:
214                   obj.animator.obj = obj
215       
216                   obj.animator.init()
217   
218               if scene not in self.objectIDByName:
219                   self.objectIDByName[scene] = {}
220   
221               if scene not in self.objectNameByID:
222                   self.objectNameByID[scene] = {}
223   
224               self.objectIDByName[scene][key] = obj.id
225               self.objectNameByID[scene][str(obj.id)] = key
226   
227               self.objects.add(obj)
228   
229               if SCENES[scene]["focus"] is not None and key == SCENES[scene]["focus"]:
230                   self.setCamera(engine.camera.FocusCamera(self, obj))
231   
232   
233   if __name__ == "__main__":
234       game = Game()
235       game.start()
236   """
237   
238   
239   class LoggerTextEdit(QTextEdit):
240       def __init__(self, project):
241           QTextEdit.__init__(self, project)
242   
243           self.project = project
244   
245       def focusInEvent(self, event):
246           self.project.objects["text"].clearFocus()
247   
248   
249   class SocketHandler(QtCore.QObject):
250       dataReceived = pyqtSignal(str)
251       connectionClosed = pyqtSignal()
252   
253       def __init__(self, port: int, parent=None):
254           QtCore.QObject.__init__(self, parent)
255   
256           self.port = port
257           self.host = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
258           self.host.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
259   
260           try:
261               self.host.bind(("localhost", port))
262               self.host.listen(1)
263               self.host.setblocking(False)
264   
265           except OSError:
266               print(f"ERROR: can't create socket on port {port}")
267   
268           self.accept_notifier = QSocketNotifier(self.host.fileno(), QSocketNotifier.Read, self)
269           self.accept_notifier.activated.connect(self.accept_connection)
270   
271           self.conn = None
272           self.addr = None
273   
274           self.notifier = None
275   
276       def accept_connection(self, fd):
277           try:
278               self.conn, self.addr = self.host.accept()
279   
280               self.conn.setblocking(False)
281   
282               self.notifier = QSocketNotifier(self.conn.fileno(), QSocketNotifier.Read, self)
283               self.notifier.activated.connect(self.read_from_connection)
284   
285               self.accept_notifier.setEnabled(False)
286   
287           except Exception as e:
288               print("Accept error:", e)
289   
290       def read_from_connection(self, fd):
291           try:
292               data = self.conn.recv(1024)
293   
294               if data:
295                   self.dataReceived.emit(data.decode().rstrip())
296   
297               else:
298                   self.notifier.setEnabled(False)
299   
300                   self.conn.close()
301   
302                   self.connectionClosed.emit()
303   
304                   print(f"Connection on port {self.port} closed")
305   
306           except Exception as e:
307               if hasattr(e, "errno") and e.errno == 10054:
308                   self.notifier.setEnabled(False)
309   
310                   self.conn.close()
311   
312                   self.connectionClosed.emit()
313   
314               else:
315                   print("LOG: error reading connection:", e)
316   
317       def close(self):
318           try:
319               if self.conn is not None:
320                   self.conn.close()
321   
322               if self.host is not None:
323                   self.host.close()
324   
325           except Exception as e:
326               print("Error closing socket:", e)
327   
328   
329   class GlobalsTable(QTableWidget):
330       def __init__(self, parent=None):
331           QTableWidget.__init__(self, parent)
332           self.setColumnCount(2)
333           self.setHorizontalHeaderLabels([translate("Name") + " ", translate("Value")])
334   
335           self.verticalHeader().setVisible(False)
336           self.verticalHeader().setDefaultSectionSize(20)
337           self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
338   
339       def set(self, data):
340           self.setRowCount(0)
341           self.setRowCount(len(data))
342   
343           for i, (name, value) in enumerate(data):
344               self.setItem(i, 0, QtWidgets.QTableWidgetItem(str(name)))
345               self.setItem(i, 1, QtWidgets.QTableWidgetItem(str(value)))
346   
347   
348   class Logger(QDialog):
349       logSignal = pyqtSignal(str)
350   
351       def __init__(self, project, name: str) -> None:
352           super().__init__(project)
353   
354           self.project = project
355           self.name = name
356   
357           self.setWindowTitle(translate(name))
358           self.setFixedSize(1000, 625)
359   
360           desktop = QtWidgets.QApplication.desktop()
361           self.move((desktop.width() - self.width()) // 2, (desktop.height() - self.height() - PLUS) // 2)
362   
363           self.objects = {}
364           self.init()
365   
366           self.logSocket = SocketHandler(SOCKET_ID, parent=self)
367           self.logSocket.dataReceived.connect(self.handleLogData)
368   
369           self.globalSocket = SocketHandler(SOCKET_GLOBAL_ID, parent=self)
370           self.globalSocket.dataReceived.connect(self.handleGlobalData)
371   
372           self.logSignal.connect(self.send)
373   
374       def init(self) -> None:
375           self.objects["empty"] = QtWidgets.QPushButton(parent=self)
376           self.objects["empty"].setGeometry(0, 0, 0, 0)
377   
378           self.objects["text"] = LoggerTextEdit(self)
379           self.objects["text"].setGeometry(10, 10, self.width() - 20 - 220, self.height() - 55)
380           self.objects["text"].setTextColor(QtCore.Qt.red)
381           self.objects["text"].setFont(FONT)
382           self.objects["text"].show()
383   
384           self.objects["entry"] = QLineEdit(self)
385           self.objects["entry"].setGeometry(10, self.height() - 37, self.width() - 20, 29)
386           self.objects["entry"].setStyleSheet(
387               f"background-color: #{'1c1d1f' if SETTINGS['theme'] == 'dark' else 'ffffff'};")
388           self.objects["entry"].setFont(FONT)
389           self.objects["entry"].show()
390   
391           self.objects["globals"] = GlobalsTable(self)
392           self.objects["globals"].setGeometry(10 + (self.width() - 20 - 220) + 10, 10, 210, self.height() - 55)
393           self.objects["globals"].setStyleSheet(
394               f"background-color: #{'1c1d1f' if SETTINGS['theme'] == 'dark' else 'ffffff'};")
395           self.objects["globals"].setFont(FONT)
396           self.objects["globals"].show()
397   
398       def handleLogData(self, text: str) -> None:
399           self.logSignal.emit(text)
400   
401       def handleGlobalData(self, text: str) -> None:
402           try:
403               data = json.loads(text)
404   
405           except json.JSONDecodeError:
406               return 0
407   
408           self.objects["globals"].set([[value["name"], value["value"]] for key, value in data.items()])
409   
410           # print(data)
411   
412       def send(self, text: typing.Union[typing.List, str]) -> None:
413           text = text.replace("FATAL ERROR", translate("FATAL ERROR"))
414           self.objects["text"].append(text)
415   
416       def closeEvent(self, event):
417           try:
418               self.logSocket.close()
419               self.globalSocket.close()
420   
421           except Exception as e:
422               print("Error closing sockets:", e)
423   
424           event.accept()
425   
426   
427   class Compile:
428       @staticmethod
429       def run(project) -> None:
430           project.compiling = False
431   
432           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
433               projectSettings = load(file)
434   
435           if Compile.compile(project, executable=False):
436               return 1
437   
438           with open(f"projects/{project.selectProject}/scr/{projectSettings['values']['name']['value']}.py", "r",
439                     encoding="utf-8") as file:
440               text = file.read()
441   
442           """
443           name = "game"
444           spec = importlib.util.spec_from_loader(name, loader=None)
445   
446           program = importlib.util.module_from_spec(spec)
447   
448           exec(text, program.__dict__)
449   
450           os.chdir(f"projects/{project.selectProject}/scr")
451   
452           game = program.Game()
453           game.start()
454           """
455   
456           # """
457           pathProject = f"projects/{project.selectProject}/scr"
458   
459           pathPython = os.path.abspath(os.path.abspath(sys.argv[0]))
460           pathPython = pathPython[:pathPython.rfind('\\')]
461           pathPython = f"{pathPython}/python/Scripts/python.exe"
462   
463           print(f"LOG: python path: {pathPython}")
464   
465           thr = threading.Thread(target=lambda: os.system(
466               f"cd \"{pathProject}\" && \"{pathPython}\" \"{projectSettings['values']['name']['value']}.py\""))
467           thr.daemon = True
468           thr.start()
469   
470           # """
471   
472           return 0
473   
474       @staticmethod
475       def compile(project, executable: bool = True) -> bool:
476           engine = f"projects/{project.selectProject}/scr/engine"
477   
478           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
479               projectSettings = load(file)
480   
481           names = {
482               "function": f"projects/{project.selectProject}/scr/functions",
483               "assets": f"projects/{project.selectProject}/scr/assets",
484               "files": f"projects/{project.selectProject}/scr/files",
485               "code": f"projects/{project.selectProject}/scr/code",
486               "build": f"projects/{project.selectProject}/scr/build",
487               "dist": f"projects/{project.selectProject}/scr/dict",
488               "collision": f"projects/{project.selectProject}/scr/collision.cfg",
489               "spec": f"projects/{project.selectProject}/scr/{projectSettings['values']['name']['value']}.spec"
490           }
491   
492           if os.path.exists(engine):
493               shutil.rmtree(engine)
494   
495           for name, path in names.items():
496               if os.path.exists(path):
497                   if os.path.isfile(path):
498                       os.remove(path)
499   
500                   else:
501                       shutil.rmtree(path)
502   
503           shutil.copytree("engine", engine)
504   
505           shutil.copytree(f"projects/{project.selectProject}/project/functions", names["function"])
506           shutil.copytree(f"projects/{project.selectProject}/project/assets", names["assets"])
507           shutil.copytree(f"projects/{project.selectProject}/project/files", names["files"])
508           shutil.copytree(f"scr/code", names["code"])
509   
510           shutil.copyfile(f"projects/{project.selectProject}/project/collision.cfg", names["collision"])
511   
512           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
513               projectSettingsCfg = load(file)
514   
515           if f"projects/{project.selectProject}/project/" + projectSettingsCfg["values"]["start_scene"]["value"] == "":
516               MessageBox.error("Project start scene is empty")
517   
518               project.compiling = False
519   
520               return 0
521   
522           output = f"projects/{project.selectProject}/scr/{projectSettingsCfg['values']['name']['value']}.py"
523   
524           # LOAD PROGRAMS AND LOCAL VARIABLES
525   
526           programs = {}
527           locals_variables = {}
528   
529           for program in functions.project.getAllProjectPrograms(project, False):
530               with open(program, "r", encoding="utf-8") as file:
531                   programs[program] = load(file)
532   
533                   locals_variables[program] = programs[program]["variables"]
534   
535           # LOAD SCENES
536   
537           scenes = {}
538           objects_variables = {}
539   
540           for scene in functions.project.getAllProjectScenes(project, False):
541               scenePath = f"projects/{project.selectProject}/project/cash/{'-'.join(scene.split('/')[3:])}-setting.json"
542   
543               objects = {}
544   
545               objects_variables[scene] = {}
546   
547               for element in os.listdir(scene):
548                   objectPath = f"{scene}/{element}"
549   
550                   type, variables = functions.main.files.Scene.loadObjectFile(project, objectPath[:objectPath.rfind(".")][objectPath.rfind("-") + 1:], load(open(objectPath, "r", encoding="utf-8")))
551   
552                   if "sprite" in variables:
553                       variables["sprite"][0] = variables["sprite"][0].replace(f"projects/{project.selectProject}/project/", "")
554   
555                   objects[element] = {
556                       "type": type,
557                       "variables": variables
558                   }
559   
560                   objects_variables[scene][element] = load(open(objectPath, "r", encoding="utf-8"))["variables"]
561   
562               if os.path.exists(scenePath):
563                   focus = load(open(scenePath, "r", encoding="utf-8"))["Scene"]["focus"]["value"]
564   
565               else:
566                   focus = None
567   
568               if focus is None or focus == "":
569                   project.dialog.send(
570                       translate("WARNING") + ": " + translate("Scene") + f" ({scene}) " + translate(
571                           "can not download:") + " " + translate("name focus object is not defined")
572                   )
573   
574               else:
575                   scenes[scene] = {
576                       "objects": objects,
577                       "focus": focus
578                   }
579   
580           # LOAD OBJECTS
581   
582           allObjects = {}
583   
584           for obj in functions.project.getAllProjectObjects(project, False) + functions.project.getAllProjectInterface(project, False):
585               if obj.endswith(".txt"):
586                   continue
587   
588               type, variables = functions.main.files.Scene.loadObjectFile(project, -1, load(open(obj, "r", encoding="utf-8")))
589   
590               if "sprite" in variables:
591                   variables["sprite"][0] = variables["sprite"][0].replace(f"projects/{project.selectProject}/project/", "")
592   
593               name = obj.replace(f"projects/{project.selectProject}/project/objects/", "")
594               name = obj.replace(f"projects/{project.selectProject}/project/ui/", "")
595   
596               allObjects[name] = {
597                   "type": type,
598                   "variables": variables
599               }
600   
601           # CAN RUN PROJECT
602   
603           projectSettingsStandard = projectSettings
604           projectSettings = functions.main.files.Config.get(projectSettings)
605   
606           if not any([scene == f"projects/{project.selectProject}/project/" + projectSettings["start_scene"] for scene in scenes.keys()]):
607               project.dialog.logSignal.emit(
608                   translate("ERROR") + ": " + translate("project start scene is not found") + "\n"
609               )
610   
611               project.dialog.logSignal.emit(
612                   translate("LOG") + ": " + translate("can not run project")
613               )
614   
615               project.compiling = False
616   
617               return 1
618   
619           # MAKE PROJECT
620   
621           useProjectSettings = dict(projectSettings)
622           useProjectSettings["start_scene"] = f"projects/{project.selectProject}/project/" + useProjectSettings["start_scene"]
623   
624           program = PROGRAM
625   
626           program = program.replace("%SOCKET_ID%", str(SOCKET_ID))
627           program = program.replace("%SOCKET_GLOBAL_ID%", str(SOCKET_GLOBAL_ID))
628   
629           program = program.replace("%PROJECT_GLOBAL_VARIABLES%", str(projectSettingsStandard["variables"]))
630           program = program.replace("%PROJECT_LOCAL_VARIABLES%", str(locals_variables))
631           program = program.replace("%PROJECT_OBJECTS_VARIABLES%", str(objects_variables))
632   
633           program = program.replace("%PROJECT_SETTINGS%", str(useProjectSettings))
634           program = program.replace("%PROJECT_PROGRAMS%", str(programs))
635           program = program.replace("%PROJECT_SCENES%", str(scenes))
636           program = program.replace("%PROJECT_OBJECTS%", str(allObjects))
637   
638           program = program.replace("%ENGINE_VERSION%", str(load(open("scr/files/version.json", encoding="utf-8"))["version"]))
639   
640           program = program.replace("%COMPILER%", str(open("scr/code/compiler.py", "r", encoding="utf-8").read()))
641   
642           program = program.replace("%DEBUG%", str(DIVELOP))
643   
644           with open(output, "w", encoding="utf-8") as file:
645               file.write(program)
646   
647           try:
648               project.dialog.logSignal.emit(
649                   translate("LOG") + ": " + translate("the project has been successfully created")
650               )
651   
652           except AttributeError:
653               pass
654   
655           if executable:
656               try:
657                   project.dialog.logSignal.emit(
658                       translate("LOG") + ": " + translate("compiling...")
659                   )
660   
661               except AttributeError:
662                   pass
663   
664               pathProject = f"projects/{project.selectProject}/scr"
665   
666               pathPython = os.path.abspath(os.path.abspath(sys.argv[0]))
667               pathPython = pathPython[:pathPython.rfind("\\")]
668   
669               pathPythonExecutable = f"{pathPython}/python/Scripts/python.exe"
670               pathPyInstaller = f"{pathPython}/python/Scripts/pyinstaller.exe"
671               pathProgram = os.path.abspath(sys.argv[0])
672   
673               pathProgram = pathProgram[:pathProgram.rfind("\\")]
674   
675               # os.system(f"cd \"{pathProject}\" && {pathPythonExecutable} {pathPyInstaller} -F -w -y \"{projectSettingsCfg['values']['name']['value']}.py\"")
676   
677               command = f"cd \"{pathProgram}\" && cd \"{pathProject}\" && \"{pathPythonExecutable}\" \"{pathPyInstaller}\" -F -w -y \"{projectSettingsCfg['values']['name']['value']}.py\""
678   
679               result = subprocess.run(command, shell=True, capture_output=True, check=True, text=True)
680   
681               project.dialog.logSignal.emit(result.stdout)
682               project.dialog.logSignal.emit(result.stderr)
683   
684               if os.path.exists(f"{pathProject}/{projectSettingsCfg['values']['name']['value']}.exe"):
685                   os.remove(f"{pathProject}/{projectSettingsCfg['values']['name']['value']}.exe")
686   
687               shutil.copy2(f"{pathProject}/dist/{projectSettingsCfg['values']['name']['value']}.exe",
688                            f"{pathProject}/{projectSettingsCfg['values']['name']['value']}.exe")
689   
690               try:
691                   project.dialog.logSignal.emit(
692                       translate("LOG") + ": " + translate("the project has been successfully compile")
693                   )
694   
695               except AttributeError:
696                   pass
697   
698           project.compiling = False
699   
700           return 0
701   
702       @staticmethod
703       def compileAndRun(project) -> None:
704           Compile.compile(project)
705   
706           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
707               projectSettings = load(file)
708   
709           path = f"projects/{project.selectProject}/scr"
710   
711           os.system(f"cd {path} && \"{projectSettings['values']['name']['value']}.exe\"")
712   
713           project.compiling = False
714   
715       @staticmethod
716       def saveProject(project) -> None:
717           Compile.compile(project, executable=False)
718   
719           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
720               projectSettings = load(file)
721   
722           path = f"projects/{project.selectProject}"
723   
724           folder = QFileDialog.getExistingDirectory(project, translate("Choose path"), "/home")
725   
726           name = projectSettings["values"]["name"]["value"]
727           index = None
728   
729           if not folder:
730               project.dialog.logSignal.emit(
731                   translate("LOG") + ": " + translate("the path to save the project is not selected")
732               )
733   
734               return 0
735   
736           while os.path.exists(f"{folder}/{name}" if index is None else f"{folder}/{name} ({index})"):
737               if index is None:
738                   index = 1
739   
740               index += 1
741   
742           shutil.copytree(path, f"{folder}/{name}" if index is None else f"{folder}/{name} ({index})")
743   
744           project.dialog.logSignal.emit(
745               translate("LOG") + ": " + translate(
746                   "project save") + " " + f"({name} ({index}))" if index is not None else f"({name})"
747           )
748   
749       @staticmethod
750       def saveExecutableProject(project) -> None:
751           Compile.compile(project)
752   
753           with open(f"projects/{project.selectProject}/project/project.cfg", "r", encoding="utf-8") as file:
754               projectSettings = json.load(file)
755   
756           path = f"projects/{project.selectProject}/scr"
757   
758           loads = ["functions", "assets", "engine", "files", "code", f"{projectSettings['values']['name']['value']}.py",
759                    f"{projectSettings['values']['name']['value']}.exe", "collision.cfg"]
760   
761           folder = QFileDialog.getExistingDirectory(project, translate("Choose path"), "/home")
762   
763           name = projectSettings["values"]["name"]["value"]
764           index = None
765   
766           if not folder:
767               project.dialog.logSignal.emit(
768                   translate("LOG") + ": " + translate("the path to save the project is not selected")
769               )
770   
771               return 0
772   
773           while os.path.exists(f"{folder}/{name}" if index is None else f"{folder}/{name} ({index})"):
774               if index is None:
775                   index = 1
776   
777               index += 1
778   
779           name = f"{folder}/{name}" if index is None else f"{folder}/{name} ({index})"
780   
781           os.mkdir(name)
782   
783           for load in loads:
784               var = f"{path}/{load}"
785   
786               if os.path.isfile(var):
787                   shutil.copyfile(var, f"{name}/{load}")
788   
789               else:
790                   shutil.copytree(var, f"{name}/{load}")
791   
792           project.dialog.logSignal.emit(
793               translate("LOG") + ": " + translate("project save")
794           )
795   
796   
797   def logger(project, name) -> None:
798       try:
799           project.dialog.close()
800   
801       except BaseException:
802           pass
803   
804       project.dialog = Logger(project, name)
805       project.dialog.show()
806   
807   
808   def run(project) -> None:
809       project.compiling = True
810   
811       logger(project, "Run")
812   
813       thr = threading.Thread(target=lambda: Compile.run(project))
814       thr.start()
815   
816   
817   def compile(project) -> None:
818       project.compiling = True
819   
820       logger(project, "Compiling")
821   
822       thr = threading.Thread(target=lambda: Compile.compile(project))
823       thr.start()
824   
825   
826   def compileAndRun(project) -> None:
827       project.compiling = True
828   
829       logger(project, "Compiling")
830   
831       thr = threading.Thread(target=lambda: Compile.compileAndRun(project))
832       thr.start()
833   
834   
835   def saveProject(project) -> None:
836       project.compiling = True
837   
838       logger(project, "Creating")
839   
840       thr = threading.Thread(target=lambda: Compile.saveProject(project))
841       thr.start()
842   
843   
844   def saveExecutableProject(project) -> None:
845       project.compiling = True
846   
847       logger(project, "Compiling")
848   
849       thr = threading.Thread(target=lambda: Compile.saveExecutableProject(project))
850       thr.start()
851   
##### scr\modules\functions\menu\file.py #####
1     from scr.modules.dialogs import CreateProject, CreateFromTemplateProject, OpenProject, Settings
2     
3     from scr.modules import functions
4     
5     
6     def create(project) -> None:
7         project.dialog = CreateProject(project, parent=project)
8         project.dialog.exec_()
9     
10     
11    def createFromTemplate(project) -> None:
12        project.dialog = CreateFromTemplateProject(project, parent=project)
13        project.dialog.exec_()
14    
15    
16    def open(project) -> None:
17        project.dialog = OpenProject(project, parent=project)
18        project.dialog.exec_()
19    
20    
21    def close(project) -> None:
22        for key, value in project.objects.items():
23            try:
24                value.hide()
25    
26            except BaseException:
27                pass
28    
29        if "main" in project.objects:
30            for key, value in project.objects["main"].items():
31                try:
32                    value.hide()
33    
34                except BaseException:
35                    pass
36    
37        else:
38            pass
39    
40        functions.project.projectClose(project)
41    
42        project.menues["project_menu"].setDisabled(True)
43    
44        project.initialization()
45    
46    
47    def settings(project) -> None:
48        project.dialog = Settings(project, parent=project)
49        project.dialog.exec_()
50    
##### scr\modules\functions\menu\help.py #####
1     from PyQt5.QtWidgets import QMessageBox
2     
3     from scr.modules.dialogs import About
4     
5     from scr.variables import *
6     
7     import webbrowser
8     import threading
9     
10     
11    def help_(project) -> None:
12        msg = QMessageBox()
13        msg.setIcon(QMessageBox.Information)
14        msg.setText(translate("Go to the project website?"))
15        msg.setWindowTitle(translate("Go to the site"))
16        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
17    
18        result = msg.exec_()
19    
20        if result == QMessageBox.Yes:
21            thr = threading.Thread(target=lambda: webbrowser.open("https://artyom7774.github.io"))
22            thr.daemon = True
23            thr.start()
24    
25    
26    def about(project) -> None:
27        project.dialog = About(project, parent=project)
28        project.dialog.exec_()
29    
##### scr\modules\functions\menu\__init__.py #####
1     from ..menu import file
2     from ..menu import help
3     from ..menu import compile
4     
##### scr\modules\functions\project.py #####
1     from PyQt5.Qt import QIcon, QTreeWidgetItem, QMenu, QAction
2     from PyQt5 import QtWidgets
3     
4     from scr.modules import functions
5     
6     from scr.variables import *
7     
8     import requests
9     import typing
10     import shutil
11    import os
12    import re
13    
14    
15    def getAllProjectInterface(project, onlyFileName: bool = False) -> typing.List[str]:
16        answer = []
17    
18        queue = os.listdir(f"projects/{project.selectProject}/project/ui/")
19    
20        while len(queue) > 0:
21            path = f"projects/{project.selectProject}/project/ui/{queue[0]}"
22    
23            if os.path.isfile(path):
24                if not path.endswith("EMPTY.txt"):
25                    answer.append(path)
26    
27            else:
28                for element in os.listdir(path):
29                    queue.append(queue[0] + "/" + element)
30    
31            queue.pop(0)
32    
33        return answer if not onlyFileName else [element[element.rfind("/") + 1:] for element in answer]
34    
35    
36    def getAllProjectObjects(project, onlyFileName: bool = False) -> typing.List[str]:
37        answer = []
38    
39        queue = os.listdir(f"projects/{project.selectProject}/project/objects/")
40    
41        while len(queue) > 0:
42            path = f"projects/{project.selectProject}/project/objects/{queue[0]}"
43    
44            if os.path.isfile(path):
45                if not path.endswith("EMPTY.txt"):
46                    answer.append(path)
47    
48            else:
49                for element in os.listdir(path):
50                    queue.append(queue[0] + "/" + element)
51    
52            queue.pop(0)
53    
54        return answer if not onlyFileName else [element[element.rfind("/") + 1:] for element in answer]
55    
56    
57    def getAllProjectScenes(project, onlyFileName: bool = False) -> typing.List[str]:
58        answer = []
59    
60        queue = os.listdir(f"projects/{project.selectProject}/project/scenes/")
61    
62        while len(queue) > 0:
63            path = f"projects/{project.selectProject}/project/scenes/{queue[0]}"
64    
65            if queue[0].endswith("EMPTY.txt"):
66                queue.pop(0)
67    
68                continue
69    
70            if path[path.rfind("/"):].find("%scene%") != -1:
71                answer.append(path)
72    
73            else:
74                for element in os.listdir(path):
75                    queue.append(queue[0] + "/" + element)
76    
77            queue.pop(0)
78    
79        return answer if not onlyFileName else [element[element.rfind("/") + 1:] for element in answer]
80    
81    
82    def getAllProjectPrograms(project, onlyFileName: bool = False) -> typing.List[str]:
83        answer = []
84    
85        queue = os.listdir(f"projects/{project.selectProject}/project/functions/")
86    
87        while len(queue) > 0:
88            path = f"projects/{project.selectProject}/project/functions/{queue[0]}"
89    
90            if os.path.isfile(path):
91                if not path.endswith("EMPTY.txt"):
92                    try:
93                        load(open(path, "r", encoding="utf-8"))
94    
95                    except BaseException:
96                        pass
97    
98                    else:
99                        answer.append(path)
100    
101           else:
102               for element in os.listdir(path):
103                   queue.append(queue[0] + "/" + element)
104   
105           queue.pop(0)
106   
107       return answer if not onlyFileName else [element[element.rfind("/") + 1:] for element in answer]
108   
109   
110   def createProjectDirecroryByTemplate(project, name: str, template: str) -> None:
111       shutil.copytree(f"scr/files/templates/{template}", f"projects/{name}/")
112   
113       shutil.copytree("engine/", f"projects/{name}/engine/")
114   
115       queue = os.listdir(f"projects/{name}/")
116   
117       while len(queue) > 0:
118           path = f"projects/{name}/{queue[0]}"
119   
120           if os.path.isfile(path):
121               if path.endswith("EMPTY.txt"):
122                   pass
123   
124           else:
125               for element in os.listdir(path):
126                   queue.append(queue[0] + "/" + element)
127   
128           queue.pop(0)
129   
130       project.selectProject = name
131   
132       project.init()
133   
134   
135   def createProjectDirectory(project, name: str) -> None:
136       shutil.copytree("scr/base/", f"projects/{name}/")
137   
138       shutil.copytree("engine/", f"projects/{name}/engine/")
139   
140       queue = os.listdir(f"projects/{name}/")
141   
142       while len(queue) > 0:
143           path = f"projects/{name}/{queue[0]}"
144   
145           if os.path.isfile(path):
146               if path.endswith("EMPTY.txt"):
147                   pass
148   
149           else:
150               for element in os.listdir(path):
151                   queue.append(queue[0] + "/" + element)
152   
153           queue.pop(0)
154   
155       project.selectProject = name
156   
157       project.init()
158   
159   
160   def haveInternet():
161       try:
162           response = requests.get('http://www.google.com', timeout=1)
163   
164       except:
165           return False
166   
167       return True
168   
169   
170   def projectTreeGetPath(obj, path: list = None, deep: int = 0) -> list:
171       if path is None:
172           path = []
173   
174       if obj.parent() is not None:
175           path = projectTreeGetPath(obj.parent(), path + [obj.parent().text(0)], deep + 1)
176   
177       if deep == 0:
178           path = path[::-1] + [obj.text(0)]
179   
180           answer = []
181   
182           for element in path:
183               if os.path.exists(projectTreeGetFilePath(answer + [element])):
184                   answer.append(element)
185   
186               else:
187                   for name in os.listdir(projectTreeGetFilePath(answer)):
188                       if re.sub("%.*?%", "", name) == element:
189                           answer.append(name)
190                           break
191   
192           return answer
193   
194       else:
195           return path
196   
197   
198   def projectTreeGetFilePath(path: list) -> str:
199       return "projects/" + path[0] + "/project/" + "/".join(path[1:])
200   
201   
202   def projectTreeOpenDir(project, obj) -> None:
203       path = projectTreeGetPath(obj)
204   
205       if len(path) == 1:
206           return 0
207   
208       project.objects["project_tree_file_opened"]["/".join(path[1:])] = True
209   
210   
211   def projectTreeCloseDir(project, obj) -> None:
212       path = projectTreeGetPath(obj)
213   
214       if len(path) == 1:
215           return 0
216   
217       project.objects["project_tree_file_opened"]["/".join(path[1:])] = False
218   
219   
220   def projectTreeProjectMenuInit(project) -> typing.Dict[str, bool]:
221       answer = {
222           "open": True,
223           "copy": True,
224           "paste": True,
225           "rename": True,
226           "remove": True
227       }
228   
229       if len(project.objects["tree_project"].selectedItems()) == 0:
230           for key, value in answer.items():
231               answer[key] = False
232   
233           return answer
234   
235       path = projectTreeGetPath(project.objects["tree_project"].selectedItems()[0])
236   
237       if os.path.isdir(projectTreeGetFilePath(path)):
238           answer["open"] = False
239   
240       if len(path) <= 1 or os.path.isfile(projectTreeGetFilePath(path)):
241           answer["paste"] = False
242   
243       if len(path) <= 2:
244           answer["rename"] = False
245           answer["remove"] = False
246   
247       return answer
248   
249   
250   def getColor(name: str) -> str:
251       return SPRITES[name] if ((SETTINGS["theme"] == "dark") or (f"{name}-light" not in SPRITES)) else SPRITES[f"{name}-light"]
252   
253   
254   def projectTreeProjectMenuOpen(project, position) -> None:
255       if len(project.objects["tree_project"].selectedItems()) > 0:
256           path = projectTreeGetPath(project.objects["tree_project"].selectedItems()[0])
257   
258           # CREATE MENU
259   
260           project.objects["tree_project_menu"] = QMenu()
261   
262           project.objects["tree_project_menu_new_menu"] = QMenu(translate("New"), project)
263   
264           if len(path) > 1:
265               project.objects["tree_project_menu_new_menu_dir_action"] = QAction(translate("Directory"), project)
266               project.objects["tree_project_menu_new_menu_dir_action"].setIcon(QIcon(getColor("dir")))
267               project.objects["tree_project_menu_new_menu_dir_action"].triggered.connect(lambda: functions.tree.createDir(project))
268               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_dir_action"])
269   
270               project.objects["tree_project_menu_new_menu"].addSeparator()
271   
272           if len(path) > 1 and path[1] == "scenes":
273               if "/".join(path).find("%scene%") == -1:
274                   project.objects["tree_project_menu_new_menu_scene_action"] = QAction(translate("Scene"), project)
275                   project.objects["tree_project_menu_new_menu_scene_action"].setIcon(QIcon(getColor("scene")))
276                   project.objects["tree_project_menu_new_menu_scene_action"].triggered.connect(lambda: functions.tree.createScene(project))
277                   project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_scene_action"])
278   
279           if len(path) > 1 and path[1] == "functions":
280               project.objects["tree_project_menu_new_menu_function_action"] = QAction(translate("Function"), project)
281               project.objects["tree_project_menu_new_menu_function_action"].setIcon(QIcon(getColor("func")))
282               project.objects["tree_project_menu_new_menu_function_action"].triggered.connect(lambda: functions.tree.createFunction(project))
283               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_function_action"])
284   
285           if len(path) > 1 and path[1] == "objects":
286               project.objects["tree_project_menu_new_menu_object_action"] = QAction(translate("Object"), project)
287               project.objects["tree_project_menu_new_menu_object_action"].setIcon(QIcon(getColor("obj")))
288               project.objects["tree_project_menu_new_menu_object_action"].triggered.connect(lambda: functions.tree.createObject(project))
289               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_object_action"])
290   
291           if len(path) > 1 and path[1] == "ui":
292               project.objects["tree_project_menu_new_menu_text_action"] = QAction(translate("Text"), project)
293               project.objects["tree_project_menu_new_menu_text_action"].setIcon(QIcon(getColor("text")))
294               project.objects["tree_project_menu_new_menu_text_action"].triggered.connect(lambda: functions.tree.createText(project))
295               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_text_action"])
296   
297               project.objects["tree_project_menu_new_menu_button_action"] = QAction(translate("Button"), project)
298               project.objects["tree_project_menu_new_menu_button_action"].setIcon(QIcon(getColor("btn")))
299               project.objects["tree_project_menu_new_menu_button_action"].triggered.connect(lambda: functions.tree.createButton(project))
300               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_button_action"])
301   
302           if len(path) > 1:
303               project.objects["tree_project_menu_new_menu_file_action"] = QAction(translate("File"), project)
304               project.objects["tree_project_menu_new_menu_file_action"].setIcon(QIcon(getColor("file")))
305               project.objects["tree_project_menu_new_menu_file_action"].triggered.connect(lambda: functions.tree.createFile(project))
306               project.objects["tree_project_menu_new_menu"].addAction(project.objects["tree_project_menu_new_menu_file_action"])
307   
308           if "/".join(path).find("%scene%") != -1:
309               project.objects["tree_project_menu_new_menu"].setDisabled(True)
310   
311           project.objects["tree_project_menu_open_action"] = QAction(translate("Open"), project)
312           project.objects["tree_project_menu_copy_action"] = QAction(translate("Copy"), project)
313           project.objects["tree_project_menu_paste_action"] = QAction(translate("Paste"), project)
314           project.objects["tree_project_menu_rename_action"] = QAction(translate("Rename"), project)
315           project.objects["tree_project_menu_remove_action"] = QAction(translate("Delete"), project)
316   
317           project.objects["tree_project_menu_open_action"].triggered.connect(lambda: functions.tree.open(project))
318           project.objects["tree_project_menu_copy_action"].triggered.connect(lambda: functions.tree.copy(project))
319           project.objects["tree_project_menu_paste_action"].triggered.connect(lambda: functions.tree.paste(project))
320           project.objects["tree_project_menu_rename_action"].triggered.connect(lambda: functions.tree.rename(project))
321           project.objects["tree_project_menu_remove_action"].triggered.connect(lambda: functions.tree.remove(project))
322   
323           project.objects["tree_project_menu"].addAction(project.objects["tree_project_menu_open_action"])
324           project.objects["tree_project_menu"].addAction(project.objects["tree_project_menu_copy_action"])
325           project.objects["tree_project_menu"].addAction(project.objects["tree_project_menu_paste_action"])
326           project.objects["tree_project_menu"].addSeparator()
327           project.objects["tree_project_menu"].addMenu(project.objects["tree_project_menu_new_menu"])
328           project.objects["tree_project_menu"].addSeparator()
329           project.objects["tree_project_menu"].addAction(project.objects["tree_project_menu_rename_action"])
330           project.objects["tree_project_menu"].addAction(project.objects["tree_project_menu_remove_action"])
331   
332           # DISABLE BUTTONS
333   
334           if len(path) <= 1 or ("/".join(path).find("%scene%") == -1 and not os.path.isdir(projectTreeGetFilePath(path))):
335               project.objects["tree_project_menu_new_menu"].setDisabled(True)
336   
337           if os.path.isdir(projectTreeGetFilePath(path)) and "/".join(path).find("%scene%") == -1:
338               project.objects["tree_project_menu_open_action"].setDisabled(True)
339   
340           if len(path) <= 1 or os.path.isfile(projectTreeGetFilePath(path)):
341               project.objects["tree_project_menu_paste_action"].setDisabled(True)
342   
343           if len(path) <= 2:
344               if not os.path.isdir(projectTreeGetFilePath(path)):
345                   project.objects["tree_project_menu_new_menu"].setDisabled(True)
346   
347               project.objects["tree_project_menu_rename_action"].setDisabled(True)
348               project.objects["tree_project_menu_remove_action"].setDisabled(True)
349   
350           project.cash["tree_menu_focus"] = project.objects["tree_project"].selectedItems()[0]
351           project.objects["tree_project_menu"].popup(project.objects["tree_project"].mapToGlobal(position)) if project.objects["tree_project"].selectedItems() else None
352   
353   
354   def SaveAllObjectsValues(project) -> None:
355       for key, value in project.objects["main"].items():
356           try:
357               if hasattr(value, "saveAllValues"):
358                   value.saveAllValues(value, project)
359   
360           except RuntimeError:
361               pass
362   
363   
364   def centerMenuInit(project, update: bool = False) -> None:
365       if "main" not in project.objects:
366           project.objects["main"] = {}
367   
368       try:
369           if "main" in project.objects and "object_variables" in project.objects["main"]:
370               try:
371                   project.objects["main"]["object_variables"].hide()
372   
373                   project.objects["main"]["object_variables"].deleteLater()
374   
375               except RuntimeError:
376                   pass
377   
378           if "main" in project.objects and "variables" in project.objects["main"]:
379               for element in project.objects["main"]["variables"].values():
380                   try:
381                       element.hide()
382   
383                       element.deleteLater()
384   
385                   except RuntimeError:
386                       pass
387   
388       except BaseException:
389           pass
390   
391       # if "main" in project.objects and "code" in project.objects["main"]:
392       #     project.objects["main"]["code"].hide()
393       #
394       #     project.objects["main"]["code"].deleteLater()
395   
396       if project.selectFile != "" or update:
397           SaveAllObjectsValues(project)
398   
399           for key, value in project.objects["main"].items():
400               if key.find("timer") != -1:
401                   try:
402                       value.stop()
403   
404                   except BaseException:
405                       pass
406   
407               try:
408                   value.deleteLater()
409   
410               except BaseException:
411                   pass
412   
413           """
414           rem = []
415   
416           for key, value in project.cash["file"].items():
417               if key == project.selectFile:
418                   continue
419   
420               else:
421   
422                   rem.append(key)
423   
424           for element in rem:
425               project.cash["file"].pop(element)
426           """
427   
428           if os.path.isdir(project.selectFile) and project.selectFile.find("%scene%") != -1:
429               if project.selectFile not in project.cash["file"]:
430                   project.cash["file"][project.selectFile] = functions.main.files.SceneHash()
431   
432           if project.selectFile.endswith(".func"):
433               if project.selectFile not in project.cash["file"]:
434                   project.cash["file"][project.selectFile] = functions.main.files.CodeHash()
435   
436           # TESTS
437   
438           functions.main.files.Config.test(project)
439           functions.main.files.Scene.test(project)
440   
441           # OPEN
442   
443           if project.selectFile.endswith(".cfg") and not project.selectFile.endswith("collision.cfg"):
444               functions.main.files.Config.init(project)
445   
446           elif project.selectFile.endswith("collision.cfg"):
447               functions.main.files.Collision.init(project)
448   
449           elif project.selectFile.endswith(".obj") or project.selectFile.endswith(".objc"):
450               functions.main.files.Object.init(project)
451   
452           elif project.selectFile.endswith(".text") or project.selectFile.endswith(".textc"):
453               functions.main.files.ObjectText.init(project)
454   
455           elif project.selectFile.endswith(".btn") or project.selectFile.endswith(".btnc"):
456               functions.main.files.Button.init(project)
457   
458           elif any([project.selectFile.endswith(element) for element in IMAGE_FORMATES]):
459               functions.main.files.Image.init(project)
460   
461           elif os.path.isdir(project.selectFile) and project.selectFile[project.selectFile.rfind("/"):].find("%scene%") != -1:
462               functions.main.files.Scene.init(project)
463   
464           elif project.selectFile.endswith(".func"):
465               functions.main.files.Code.init(project)
466   
467           else:
468               functions.main.files.Text.init(project)
469   
470   
471   def projectTreeInit(project) -> None:
472       project.objects["tree_project"].clear()
473   
474       project.objects["tree_project_main"] = QTreeWidgetItem(project.objects["tree_project"])
475       project.objects["tree_project_main"].setIcon(0, QIcon(getColor("dir")))
476       project.objects["tree_project_main"].setText(0, project.selectProject)
477       project.objects["tree_project_main"].setExpanded(True)
478   
479       project.objects["project_tree_file_objects"] = {}
480   
481       directory = "projects/" + project.selectProject + "/project/"
482   
483       queue = [[file, "file" if os.path.isfile(directory + file) else "dir"] for file in os.listdir(directory)]
484       queue.sort(key=lambda x: x[1] == "dir", reverse=True)
485   
486       while len(queue) > 0:
487           path = f"{queue[0][0].replace(directory, '')}"
488   
489           if not os.path.isfile(directory + queue[0][0]):
490               if queue[0][0] == "cash":
491                   queue.pop(0)
492   
493                   continue
494   
495               for file in os.listdir(directory + queue[0][0]):
496                   queue.append([queue[0][0] + "/" + file, "file" if os.path.isfile(directory + "/" + queue[0][0] + "/" + file) else "dir"])
497   
498               queue.pop(0)
499               queue.sort(key=lambda x: x[1] == "dir", reverse=True)
500   
501               if path not in project.objects["project_tree_file_opened"]:
502                   project.objects["project_tree_file_opened"][path] = False
503   
504               project.objects["project_tree_file_objects"][path] = QtWidgets.QTreeWidgetItem(project.objects["project_tree_file_objects"][path[:path.rfind("/")]] if project.objects["project_tree_file_objects"].get(path[:path.rfind("/")]) is not None else project.objects["tree_project_main"])
505               project.objects["project_tree_file_objects"][path].setFlags(project.objects["project_tree_file_objects"][path].flags())
506               project.objects["project_tree_file_objects"][path].setText(0, re.sub(r"%.*?%", "", path[path.rfind("/"):].replace("/", "") if path.find("/") != -1 else path))
507   
508               if path[path.rfind("/") + 1:].find("%scene%") != -1:
509                   project.objects["project_tree_file_objects"][path].setIcon(0, QIcon(getColor("scene")))
510   
511               else:
512                   project.objects["project_tree_file_objects"][path].setIcon(0, QIcon(getColor("dir")))
513   
514               project.objects["project_tree_file_objects"][path].setExpanded(project.objects["project_tree_file_opened"][path])
515   
516               project.objects["tree_project"].addTopLevelItem(project.objects["project_tree_file_objects"][path])
517   
518           else:
519               queue.pop(0)
520   
521               if path[path.rfind("/") + 1:] in ("NULL.txt", "NOTHING.txt", "EMPTY.txt"):
522                   continue
523   
524               if path not in project.objects["project_tree_file_opened"]:
525                   project.objects["project_tree_file_opened"][path] = False
526   
527               if path[:path.rfind("/")] not in project.objects["project_tree_file_objects"]:
528                   project.objects["project_tree_file_objects"][path] = QtWidgets.QTreeWidgetItem(project.objects["tree_project_main"])
529   
530               else:
531                   project.objects["project_tree_file_objects"][path] = QtWidgets.QTreeWidgetItem(project.objects["project_tree_file_objects"][path[:path.rfind('/')]])
532   
533               project.objects["project_tree_file_objects"][path].setFlags(project.objects["project_tree_file_objects"][path].flags())
534               project.objects["project_tree_file_objects"][path].setText(0, path.split("/")[-1])
535   
536               if path[path.rfind(".") + 1:] in SPRITES:
537                   project.objects["project_tree_file_objects"][path].setIcon(0, QIcon(getColor(path[path.rfind(".") + 1:])))
538   
539               else:
540                   project.objects["project_tree_file_objects"][path].setIcon(0, QIcon(getColor("file")))
541   
542               project.objects["project_tree_file_objects"][path].setExpanded(project.objects["project_tree_file_opened"][path])
543   
544               project.objects["tree_project"].addTopLevelItem(project.objects["project_tree_file_objects"][path])
545   
546   
547   def projectOpen(project) -> None:
548       project.menues["project_menu"].setDisabled(False)
549   
550       project.variables = {}
551       project.cash = {"file": {}}
552   
553       project.objects["tab_file_bar"].removeAll()
554   
555       project.application = {}
556   
557       project.engine = loader(f"engine/__init__.py")
558   
559   
560   def projectClose(project) -> None:
561       project.menues["project_menu"].setDisabled(True)
562   
563       project.initialization()
564   
565   
##### scr\modules\functions\tree.py #####
1     from PyQt5.Qt import QIcon
2     
3     from scr.modules.dialogs import CreateDir, CreateScene, CreateFunction, CreateFile, RenameObject, CreateObject, CreateText, CreateButton
4     
5     from scr.modules.functions.project import projectTreeGetPath, projectTreeGetFilePath, getColor
6     
7     from scr.variables import *
8     
9     try:
10         import win32clipboard
11    
12    except BaseException:
13        win32clipboard = None
14    
15    import subprocess
16    import shutil
17    import typing
18    import os
19    import re
20    
21    
22    def createDir(project) -> None:
23        project.dialog = CreateDir(project, parent=project)
24        project.dialog.exec_()
25    
26    
27    def createScene(project) -> None:
28        project.dialog = CreateScene(project, parent=project)
29        project.dialog.exec_()
30    
31    
32    def createFunction(project) -> None:
33        project.dialog = CreateFunction(project, parent=project)
34        project.dialog.exec_()
35    
36    
37    def createFile(project) -> None:
38        project.dialog = CreateFile(project, parent=project)
39        project.dialog.exec_()
40    
41    
42    def createObject(project) -> None:
43        project.dialog = CreateObject(project, parent=project)
44        project.dialog.exec_()
45    
46    
47    def createText(project) -> None:
48        project.dialog = CreateText(project, parent=project)
49        project.dialog.exec_()
50    
51    
52    def createButton(project) -> None:
53        project.dialog = CreateButton(project, parent=project)
54        project.dialog.exec_()
55    
56    
57    def open(project, path: str = None) -> None:
58        update = True
59    
60        if path is None:
61            path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
62    
63        else:
64            update = False
65    
66        if os.path.isdir(path) and path.find("%scene%") == -1:
67            return 0
68    
69        if any([path.endswith(element) for element in DONT_OPEN_FORMATES]):
70            MessageBox.imposiable("Can't open this file")
71    
72            return 0
73    
74        icon = (getColor("scene") if path.find("%scene%") != -1 else getColor("dir")) if os.path.isdir(path) else (getColor(path[path.rfind(".") + 1:]) if path[path.rfind(".") + 1:] in SPRITES else getColor("file"))
75    
76        if update:
77            project.objects["tab_file_bar"].add(path, re.sub("%.*?%", "", path[path.rfind("/") + 1:]), QIcon(icon))
78    
79        project.selectFile = path
80    
81        project.init()
82    
83    
84    def rename(project) -> None:
85        project.dialog = RenameObject(project, parent=project)
86        project.dialog.exec_()
87    
88    
89    def remove(project) -> None:
90        path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
91    
92        if path == project.selectFile:
93            project.selectFile = ""
94    
95        if any([element["name"] == path for element in project.objects["tab_file_bar"].objects]):
96            project.objects["tab_file_bar"].remove(path)
97    
98        # DELETE
99    
100        if os.path.isfile(path):
101           os.remove(path)
102   
103       else:
104           shutil.rmtree(path)
105   
106       project.init()
107   
108   
109   def copy(project) -> None:
110       path = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
111   
112       if SYSTEM == "Windows":
113           os.system(f"powershell -command \"Get-Item \"{os.getcwd()}/{path}\" | Set-Clipboard\"")
114   
115       elif SYSTEM == "Linux":
116           os.system(f"echo -n '{os.path.join(os.getcwd(), path)}' | xclip -selection clipboard")
117   
118       else:
119           print("ERROR: system (Unknown) not supported this operation")
120   
121   
122   def paste(project) -> None:
123       def WindowsGetPath() -> typing.Any:
124           try:
125               win32clipboard.OpenClipboard()
126   
127               if win32clipboard.IsClipboardFormatAvailable(win32clipboard.CF_HDROP):
128                   return win32clipboard.GetClipboardData(win32clipboard.CF_HDROP)[0]
129   
130               else:
131                   return None
132   
133           finally:
134               win32clipboard.CloseClipboard()
135   
136       def LinuxGetPath() -> typing.Any:
137           try:
138               result = subprocess.check_output("xclip -o -selection clipboard", shell=True).decode('utf-8').strip()
139   
140               if os.path.exists(result):
141                   return result
142   
143               else:
144                   return None
145   
146           except Exception as e:
147               print(f"ERROR: can't getting clipboard data: {e}")
148   
149               return None
150   
151       def createCopyFile(path) -> str:
152           index = 1
153   
154           name = path[:path.rfind(".")]
155           extension = path.replace(f"{name}.", "")
156   
157           while True:
158               if not os.path.exists(name + f" ({index})" + "." + extension):
159                   return name + f" ({index})" + "." + extension
160   
161               index += 1
162   
163       if SYSTEM == "Windows":
164           input = WindowsGetPath()
165   
166       elif SYSTEM == "Linux":
167           input = LinuxGetPath()
168   
169           print("ERROR: system (Linux) not supported this operation")
170           return 0
171   
172       else:
173           print("ERROR: system (Unknown) not supported this operation")
174           return 0
175   
176       output = projectTreeGetFilePath(projectTreeGetPath(project.objects["tree_project"].selectedItems()[0]))
177   
178       if input is None:
179           MessageBox.imposiable("copy is not found")
180   
181           return 0
182   
183       else:
184           pass
185   
186       path = output + "/" + input[input.rfind("\\") + 1:]
187   
188       if os.path.isfile(input):
189           try:
190               if not os.path.exists(path):
191                   shutil.copyfile(input, path)
192   
193               else:
194                   shutil.copyfile(input, createCopyFile(path))
195   
196           except shutil.SameFileError:
197               print(createCopyFile(path))
198   
199               shutil.copyfile(input, createCopyFile(path))
200   
201           except BaseException as e:
202               MessageBox.imposiable(e)
203   
204       else:
205           try:
206               if not os.path.exists(path):
207                   shutil.copytree(input, path)
208   
209               else:
210                   shutil.copytree(input, createCopyFile(path))
211   
212           except shutil.SameFileError:
213               shutil.copytree(input, createCopyFile(path))
214   
215           except RecursionError:
216               MessageBox.imposiable("The target directory is inside the source directory")
217   
218               shutil.rmtree(path)
219   
220           except BaseException as e:
221               MessageBox.imposiable(e)
222   
223       project.init()
224   
##### scr\modules\functions\__init__.py #####
1     from ..functions import project
2     from .project import *
3     
4     from .tree import *
5     
6     from .menu import *
7     from .main import *
8     
##### scr\modules\translate.py #####
1     import hjson
2     import os
3     
4     
5     class Translate:
6         def __init__(self, lang: str) -> None:
7             self.lang = lang
8     
9             self.out = {}
10     
11        def __call__(self, *args) -> None:
12            return self.translate(args[0])
13    
14        def update(self, lang: str) -> None:
15            self.lang = lang
16    
17        def translate(self, word: str) -> str:
18            if len(word) == 0:
19                return ""
20    
21            point = False
22    
23            if word[0] == "-":
24                word = word[1:]
25    
26                point = True
27    
28            spaces = 0
29    
30            while word[0] == " ":
31                word = word[1:]
32    
33                spaces += 1
34    
35            if not os.path.exists(f"scr/files/bundles/{self.lang.lower()}.hjson") and self.lang == "EN":
36                return word
37    
38            if self.lang not in self.out:
39                self.out[self.lang] = hjson.load(open(f"scr/files/bundles/{self.lang.lower()}.hjson", encoding="utf-8"))
40    
41            if " " * spaces + word in self.out[self.lang]:
42                return self.out[self.lang][" " * spaces + word]
43    
44            elif word in self.out[self.lang]:
45                answer = self.out[self.lang][word]
46    
47            else:
48                answer = word
49    
50            return ("•" if point else "") + " " * spaces + answer
51    
##### scr\modules\widgets\collisionTable.py #####
1     from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QCheckBox, QWidget, QVBoxLayout, QHeaderView, QLabel
2     from PyQt5.QtCore import Qt
3     from PyQt5.QtGui import QFontMetrics, QPixmap, QPainter, QPen, QColor
4     
5     from engine.functions.loads import loadCollisionFile
6     
7     from scr.variables import *
8     
9     import typing
10     
11    
12    class CollisionTable(QTableWidget):
13        def __init__(self, parent, groups: typing.List[str], function: typing.Callable) -> None:
14            QTableWidget.__init__(self, len(groups), len(groups), parent)
15    
16            self.project = parent
17    
18            var = loadCollisionFile(self.project.selectFile)
19    
20            collisions = {}
21    
22            for key, value in var.items():
23                collisions[key] = list(value.keys())
24    
25            self.setHorizontalHeaderLabels(groups)
26            self.setVerticalHeaderLabels(groups)
27    
28            header = self.horizontalHeader()
29            header.setSectionResizeMode(QHeaderView.Fixed)
30    
31            self.widths = {}
32    
33            metrics = QFontMetrics(self.font())
34    
35            width = 0
36    
37            for col, group in enumerate(groups):
38                width = max(width, metrics.width(group) + 40)
39    
40            for col, group in enumerate(groups):
41                self.setColumnWidth(col, width)
42    
43                self.widths[str(col)] = width
44    
45            for row in range(len(groups)):
46                for col in range(len(groups)):
47                    check = QCheckBox()
48    
49                    check.setChecked(groups[row] in collisions and groups[col] in collisions[groups[row]])
50    
51                    check.stateChanged.connect(lambda state="", empty=None, x=row, y=col: function(self.project, x, y, 0 if state == 0 else 1))
52    
53                    check.setMinimumSize(24, 24)
54                    check.setMaximumSize(24, 24)
55    
56                    widget = QWidget()
57    
58                    layout = QVBoxLayout()
59    
60                    if row == col and False:
61                        cross = QLabel()
62                        cross.setPixmap(CollisionTable.createСrossPixMap(self.widths[str(col)] - 1, 40 - 1))
63    
64                        layout.addWidget(cross)
65    
66                    else:
67                        layout.addWidget(check)
68    
69                    layout.setAlignment(Qt.AlignCenter)
70                    layout.setContentsMargins(0, 0, 0, 0)
71    
72                    widget.setLayout(layout)
73    
74                    self.setCellWidget(row, col, widget)
75    
76                    self.setItem(row, col, QTableWidgetItem())
77    
78            self.setStyleSheet(f"background-color: #{'202124' if SETTINGS['theme'] == 'dark' else 'f8f9fa'};")
79    
80        @staticmethod
81        def createСrossPixMap(width: int, height: int) -> QPixmap:
82            pixmap = QPixmap(width, height)
83            pixmap.fill(QColor(f"#{'202124' if SETTINGS['theme'] == 'dark' else 'f8f9fa'}"))
84    
85            # painter = QPainter(pixmap)
86            # pen = QPen(QColor("#3f4042"), 1)
87            # painter.setPen(pen)
88    
89            # painter.drawLine(-2, 0, width + 3, height)
90            # painter.drawLine(width, 0, -5, height)
91    
92            # painter.end()
93    
94            return pixmap
95    
##### scr\modules\widgets\focusComboBox.py #####
1     from PyQt5.QtWidgets import QComboBox
2     
3     import typing
4     
5     
6     class FocusComboBox(QComboBox):
7         def __init__(
8             self, parent=None, connectFocusFunction: typing.Callable = None, releasedFocusFunction: typing.Callable = None
9         ) -> None:
10             QComboBox.__init__(self, parent)
11    
12            self.connectFocusFunction = connectFocusFunction
13            self.releasedFocusFunction = releasedFocusFunction
14    
15        def focusOutEvent(self, event) -> None:
16            super().focusOutEvent(event)
17    
18            if self.releasedFocusFunction is not None:
19                self.releasedFocusFunction()
20    
21        def focusInEvent(self, event) -> None:
22            super().focusInEvent(event)
23    
24            if self.connectFocusFunction is not None:
25                self.connectFocusFunction()
26    
##### scr\modules\widgets\focusLineEdit.py #####
1     from PyQt5.QtWidgets import QLineEdit
2     
3     import typing
4     
5     
6     class FocusLineEdit(QLineEdit):
7         def __init__(
8             self, parent=None, connectFocusFunction: typing.Callable = None, releasedFocusFunction: typing.Callable = None
9         ) -> None:
10             QLineEdit.__init__(self, parent)
11    
12            self.connectFocusFunction = connectFocusFunction
13            self.releasedFocusFunction = releasedFocusFunction
14    
15        def focusOutEvent(self, event) -> None:
16            super().focusOutEvent(event)
17    
18            if self.releasedFocusFunction is not None:
19                self.releasedFocusFunction()
20    
21        def focusInEvent(self, event) -> None:
22            super().focusInEvent(event)
23    
24            if self.connectFocusFunction is not None:
25                self.connectFocusFunction()
26    
##### scr\modules\widgets\tabFileBar.py #####
1     from PyQt5.QtWidgets import QTabBar
2     from PyQt5.QtGui import QIcon
3     
4     from scr.modules import functions
5     
6     from scr.variables import *
7     
8     import typing
9     
10     
11    class TabFileBar(QTabBar):
12        def __init__(self, project, parent=None) -> None:
13            super().__init__(parent)
14    
15            self.project = project
16    
17            self.setTabsClosable(True)
18            self.setExpanding(False)
19    
20            self.setFont(FONT)
21    
22            self.objects = []
23    
24            self.tabCloseRequested.connect(self.pop)
25    
26        def get(self) -> typing.Dict[str, typing.Dict[str, typing.Union[int, str]]]:
27            return self.objects
28    
29        def getNameByIndex(self, index: int):
30            try:
31                return self.objects[index]["name"]
32    
33            except IndexError:
34                return -1
35    
36        def add(self, name: str, visiable: str, icon: QIcon = None) -> int:
37            if any([element["name"] == name for element in self.objects]):
38                self.setCurrentIndex([element["name"] == name for element in self.objects].index(True))
39    
40                return 0
41    
42            index = super().addTab(visiable)
43    
44            self.objects.append({
45                "name": name,
46                "visiable": visiable
47            })
48    
49            self.updateSelectFile()
50    
51            self.setTabIcon(index, icon if icon else QIcon())
52            self.setTabText(index, visiable)
53    
54            self.setCurrentIndex([element["name"] == name for element in self.objects].index(True))
55    
56            return index
57    
58        def remove(self, name: str) -> None:
59            for i, value in enumerate(self.objects):
60                if value["name"] == name:
61                    self.pop(i)
62    
63                    return 0
64    
65        def removeAll(self) -> None:
66            for _ in range(len(self.objects)):
67                self.pop(0)
68    
69        def updateSelectFile(self) -> None:
70            if self.count() == 0:
71                self.project.objects["status_bar"].showMessage("")
72    
73                self.project.selectFile = ""
74    
75            elif self.count() == 1:
76                self.project.selectFile = self.objects[0]["name"]
77    
78            else:
79                self.project.selectFile = self.objects[self.currentIndex()]["name"]
80    
81        def pop(self, index: int) -> None:
82            self.objects.pop(index)
83    
84            super().removeTab(index)
85    
86            # if self.currentIndex() + 1 >= index:
87            #     self.setCurrentIndex(index - 1)
88    
89            self.updateSelectFile()
90    
91            functions.project.centerMenuInit(self.project, True)
92    
##### scr\modules\widgets\treeProject.py #####
1     from PyQt5.QtWidgets import QTreeWidget, QTreeWidgetItem, QAbstractItemView
2     from PyQt5.QtCore import Qt, QMimeData, QByteArray, QDataStream, QIODevice, QPoint
3     from PyQt5.QtGui import QDrag, QDropEvent
4     
5     
6     class TreeProject(QTreeWidget):
7         def __init__(self, project, parent=None):
8             super().__init__(parent)
9             self.project = project
10     
11            self.setDragEnabled(True)
12            self.setAcceptDrops(True)
13            self.setSelectionMode(QTreeWidget.SingleSelection)
14            self.setDragDropMode(QTreeWidget.InternalMove)
15            self.setDefaultDropAction(Qt.MoveAction)
16    
17            # Включаем отслеживание положения при перетаскивании
18            self.setDropIndicatorShown(True)
19            self.setHeaderLabel("Project Structure")
20    
21        def startDrag(self, supportedActions):
22            # Получаем текущий элемент
23            drag_item = self.currentItem()
24            if not drag_item:
25                return
26    
27            # Создаем MIME данные для передачи
28            mime_data = QMimeData()
29            data = QByteArray()
30            stream = QDataStream(data, QIODevice.WriteOnly)
31    
32            # Сериализуем данные элемента (например, текст)
33            stream.writeQString(drag_item.text(0))
34            mime_data.setData("application/x-treeitem", data)
35    
36            # Настраиваем и запускаем перетаскивание
37            drag = QDrag(self)
38            drag.setMimeData(mime_data)
39            drag.exec_(Qt.MoveAction)
40    
41        def dragEnterEvent(self, event):
42            if event.source() == self:
43                event.acceptProposedAction()
44            else:
45                event.ignore()
46    
47        def dragMoveEvent(self, event):
48            if event.source() == self:
49                event.acceptProposedAction()
50            else:
51                event.ignore()
52    
53        def dropEvent(self, event: QDropEvent):
54            if event.source() != self:
55                return
56    
57            # Получаем элемент для перемещения
58            drag_item = self.currentItem()
59            if not drag_item:
60                return
61    
62            # Определяем позицию вставки
63            pos = event.pos()
64            drop_target = self.itemAt(pos)
65            parent = drop_target.parent() if drop_target else self.invisibleRootItem()
66    
67            # Определяем положение вставки относительно элементов
68            indicator = self.dropIndicatorPosition()
69            target_index = self.indexAt(pos)
70    
71            # Проверка на валидность целевой позиции
72            if not target_index.isValid():
73                # Вставка в конец корневого уровня
74                new_parent = self.invisibleRootItem()
75                new_parent.addChild(drag_item.clone())
76            else:
77                target_item = self.itemFromIndex(target_index)
78                target_parent = target_item.parent() or self.invisibleRootItem()
79    
80                # Проверяем, не пытаемся ли переместить элемент в самого себя
81                if self._is_ancestor(drag_item, target_item):
82                    event.ignore()
83                    return
84    
85                # Определяем позицию вставки
86                if indicator == QAbstractItemView.AboveItem:
87                    target_parent.insertChild(target_parent.indexOfChild(target_item), drag_item.clone())
88                elif indicator == QAbstractItemView.BelowItem:
89                    target_parent.insertChild(target_parent.indexOfChild(target_item) + 1, drag_item.clone())
90                elif indicator == QAbstractItemView.OnItem:
91                    target_item.addChild(drag_item.clone())
92                else:
93                    target_parent.addChild(drag_item.clone())
94    
95            (drag_item.parent() or self.invisibleRootItem()).removeChild(drag_item)
96            event.accept()
97    
98        def _is_ancestor(self, parent, child):
99            """Проверяет, является ли parent предком child"""
100            while child is not None:
101               child = child.parent()
102               if child == parent:
103                   return True
104           return False
105   
##### scr\modules\widgets\versionLogScrollArea.py #####
1     from PyQt5.QtWidgets import QWidget, QLabel, QScrollArea, QVBoxLayout, QFrame
2     
3     from scr.variables import *
4     
5     
6     class VersionLogScrollArea(QWidget):
7         def __init__(self, parent, information: dict):
8             QWidget.__init__(self, parent)
9     
10             self.information = information
11    
12            self.area = QScrollArea(parent)
13            self.area.setGeometry(10, 40, Size.x(100) - 20, Size.y(100) - 70)
14    
15            container = QFrame()
16            layout = QVBoxLayout(container)
17    
18            layout.setContentsMargins(0, 0, 0, 0)
19            layout.setSpacing(0)
20    
21            for version in information["sorted"][::-1]:
22                update = information["updates"][version]
23    
24                name = QLabel()
25                name.setStyleSheet("padding-bottom: 4px; padding-top: 4px;")
26                name.setFont(BIG_HELP_FONT)
27                name.setText(update["name"])
28    
29                layout.addWidget(name)
30    
31                text = QLabel()
32                text.setFont(HELP_FONT)
33                text.setContentsMargins(0, 4, 0, 4)
34                text.setMinimumWidth(Size.x(100) - 100)
35                text.setMinimumHeight(20)
36                text.setWordWrap(True)
37    
38                text.setText(update["text"])
39    
40                layout.addWidget(text)
41    
42            container.setLayout(layout)
43    
44            self.area.setWidget(container)
45            self.area.setStyleSheet("border: 0px")
46            # self.area.setWidgetResizable(True)
47    
48            self.area.show()
49    
50        def show(self):
51            self.area.setGeometry(10, 40, Size.x(100) - 20, Size.y(100) - 70)
52    
53            self.area.show()
54    
55        def hide(self):
56            self.area.hide()
57    
##### scr\modules\widgets\__init__.py #####
1     from .focusLineEdit import FocusLineEdit
2     from .focusComboBox import FocusComboBox
3     
4     from .tabFileBar import TabFileBar
5     
6     from .versionLogScrollArea import VersionLogScrollArea
7     
8     from .collisionTable import CollisionTable
9     
10     from .treeProject import TreeProject
11    
##### scr\modules\__init__.py #####
1     
##### scr\tests\1.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QTabBar, QWidget
3     
4     from PyQt5.QtGui import QIcon
5     import qdarktheme
6     
7     
8     class FileTabBar(QTabBar):
9         def __init__(self, parent=None) -> None:
10             super().__init__(parent)
11    
12            self.setTabsClosable(True)
13            self.setExpanding(False)
14    
15            self.objects = {}
16    
17            self.tabCloseRequested.connect(self.pop)
18    
19        def add(self, name: str, visiable: str, icon: QIcon = None) -> int:
20            index = super().addTab(visiable)
21    
22            self.objects[name] = {
23                "index": index,
24                "visiable": visiable
25            }
26    
27            self.setTabIcon(index, icon if icon else QIcon())
28            self.setTabText(index, visiable)
29    
30            return index
31    
32        def remove(self, name: str) -> None:
33            find = False
34    
35            for key, value in self.objects.items():
36                if key == name:
37                    self.objects.pop(key)
38                    find = True
39    
40                    super().removeTab(value["index"])
41    
42                    continue
43    
44                if find:
45                    value["index"] -= 1
46    
47        def pop(self, index: int) -> None:
48            find = False
49    
50            for key, value in self.objects.items():
51                if value["index"] == index:
52                    self.objects.pop(key)
53                    find = True
54    
55                    continue
56    
57                if find:
58                    value["index"] -= 1
59    
60            super().removeTab(index)
61    
62    
63    class MainWindow(QWidget):
64        def __init__(self):
65            super().__init__()
66            self.initUI()
67    
68            qdarktheme.setup_theme()
69    
70        def initUI(self):
71            self.tab_bar = FileTabBar(parent=self)
72    
73            self.addTab("Tab 1")
74            self.addTab("Tab 2")
75    
76            self.tab_bar.setGeometry(0, 0, 500, 500)
77            self.tab_bar.show()
78    
79        def addTab(self, text="New Tab"):
80            index = self.tab_bar.addTab(text)
81    
82        def removeTab(self, index):
83            self.tab_widget.removeTab(index)
84    
85    
86    if __name__ == "__main__":
87        app = QApplication(sys.argv)
88        window = MainWindow()
89        window.show()
90        sys.exit(app.exec_())
91    
##### scr\tests\10.py #####
1     import subprocess
2     
3     
4     def handle_output(output):
5         # Ваша функция для обработки вывода
6         print("Handling output:")
7         print(output)
8     
9     
10     commands = [
11        "echo Hello",
12        "echo World",
13        "ls -l"
14    ]
15    
16    for command in commands:
17        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
18    
19        # Проверка на ошибки
20        if result.returncode != 0:
21            print(f"Error executing {command}: {result.stderr}")
22        else:
23            handle_output(result.stdout)
24    
##### scr\tests\11.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QFileDialog, QVBoxLayout
3     
4     class FolderSelector(QWidget):
5         def __init__(self):
6             super().__init__()
7     
8             self.initUI()
9     
10         def initUI(self):
11            self.setWindowTitle('Выбор папки')
12    
13            layout = QVBoxLayout()
14    
15            self.button = QPushButton('Выбрать папку', self)
16            self.button.clicked.connect(self.showDialog)
17    
18            layout.addWidget(self.button)
19    
20            self.setLayout(layout)
21    
22        def showDialog(self):
23            folder = QFileDialog.getExistingDirectory(self, 'Выбрать папку', '/home')
24    
25            if folder:
26                print(f'Выбранная папка: {folder}')
27    
28    if __name__ == '__main__':
29        app = QApplication(sys.argv)
30        ex = FolderSelector()
31        ex.show()
32        sys.exit(app.exec_())
33    
##### scr\tests\12.py #####
1     from math import sqrt
2     
3     
4     def bezierСurve(x0, y0, x1, y1, x2, y2, x3, y3, d):
5         answer = []
6     
7         def function(x0, y0, x1, y1, x2, y2, x3, y3, d):
8             px = (x3 - x0) / 3
9             py = (y3 - y0) / 3
10             mx1 = x1 - x0 - px
11            my1 = y1 - y0 - py
12            mx2 = x2 - x3 + px
13            my2 = y2 - y3 + py
14            d1 = sqrt(mx1 ** 2 + my1 ** 2)
15            d2 = sqrt(mx2 ** 2 + my2 ** 2)
16            if d1 < d and d2 < d:
17                answer.append([x3, y3])
18    
19            else:
20                x01 = (x0 + x1) / 2
21                y01 = (y0 + y1) / 2
22                x12 = (x1 + x2) / 2
23                y12 = (y1 + y2) / 2
24                x23 = (x2 + x3) / 2
25                y23 = (y2 + y3) / 2
26                x012 = (x01 + x12) / 2
27                y012 = (y01 + y12) / 2
28                x123 = (x12 + x23) / 2
29                y123 = (y12 + y23) / 2
30                x0123 = (x012 + x123) / 2
31                y0123 = (y012 + y123) / 2
32                bezierСurve(x0, y0, x01, y01, x012, y012, x0123, y0123, d)
33                bezierСurve(x0123, y0123, x123, y123, x23, y23, x3, y3, d)
34    
35        function(x0, y0, x1, y1, x2, y2, x3, y3, d)
36    
37        return answer
38    
39    
40    # d - точность
41    print(bezierСurve(0, 200, 200, 200, 200, 0, 400, 0, 0.0001))
42    
##### scr\tests\13.py #####
1     
2     import sys
3     from PyQt5.QtWidgets import QApplication, QWidget, QToolTip
4     from PyQt5.QtCore import Qt
5     from PyQt5.QtGui import QFont
6     
7     
8     class Example(QWidget):
9         def __init__(self):
10             super().__init__()
11            self.initUI()
12    
13        def initUI(self):
14            # Устанавливаем шрифт для всплывающего текста
15    
16            self.setMouseTracking(True)
17    
18            QToolTip.setFont(QFont('SansSerif', 10))
19    
20            self.setGeometry(300, 300, 400, 300)
21            self.setWindowTitle('Всплывающий текст при наведении')
22            self.show()
23    
24        # Переопределяем событие движения мыши
25        def mouseMoveEvent(self, event):
26            x, y = event.x(), event.y()
27    
28            # Если курсор находится на заданных координатах, выводим всплывающую подсказку
29            if abs(x - 100) < 10 and abs(y - 100) < 10:
30                QToolTip.showText(event.globalPos(), 'Вы находитесь на (100, 100)')
31    
32            else:
33                QToolTip.hideText()
34    
35    
36    if __name__ == '__main__':
37        app = QApplication(sys.argv)
38        ex = Example()
39        sys.exit(app.exec_())
40    
41    
##### scr\tests\14.py #####
1     from PyQt5.QtWidgets import QApplication, QLineEdit
2     
3     app = QApplication([])
4     
5     # Создаем поле для ввода текста
6     line_edit = QLineEdit()
7     
8     # Устанавливаем фоновый цвет через стиль
9     line_edit.setStyleSheet("QLineEdit { background-color: yellow; }")
10     
11    line_edit.show()
12    app.exec_()
##### scr\tests\15.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QWidget, QToolTip, QPushButton
3     from PyQt5.QtGui import QFont, QPalette, QColor, QCursor
4     
5     
6     class Example(QWidget):
7         def __init__(self):
8             super().__init__()
9     
10             # Устанавливаем шрифт для QToolTip
11            QToolTip.setFont(QFont('SansSerif', 10))
12    
13            # Настройка палитры для QToolTip
14            palette = QPalette()
15            palette.setColor(QPalette.ToolTipBase, QColor('yellow'))  # Цвет фона
16            palette.setColor(QPalette.ToolTipText, QColor('black'))   # Цвет текста
17            QApplication.setPalette(palette)
18    
19            # Создаем кнопку
20            btn = QPushButton('Наведите на меня', self)
21            btn.resize(btn.sizeHint())
22            btn.move(100, 100)
23    
24            # Связываем событие нажатия с кастомной подсказкой
25            btn.clicked.connect(self.show_custom_tooltip)
26    
27            self.setGeometry(300, 300, 300, 200)
28            self.setWindowTitle('QToolTip.showText пример')
29    
30        def show_custom_tooltip(self):
31            # Показываем текст подсказки в точке под курсором
32            QToolTip.showText(QCursor.pos(), "Это кастомная подсказка")
33    
34    if __name__ == '__main__':
35        app = QApplication(sys.argv)
36        ex = Example()
37        ex.show()
38        sys.exit(app.exec_())
39    
##### scr\tests\16.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QScrollArea, QVBoxLayout, QFrame
3     
4     class ScrollableLabels(QWidget):
5         def __init__(self):
6             super().__init__()
7     
8             # Создаем QScrollArea
9             scroll_area = QScrollArea(self)
10             scroll_area.setGeometry(10, 10, 280, 380)  # Задаем размеры и позицию
11    
12            # Создаем фрейм, который будет содержать все QLabel
13            container_widget = QFrame()
14            layout = QVBoxLayout(container_widget)
15    
16            # Создаем 100 QLabel и добавляем их в layout
17            for i in range(100):
18                label = QLabel(f"Label {i + 1}", container_widget)
19                layout.addWidget(label)
20    
21            # Устанавливаем layout для контейнера
22            container_widget.setLayout(layout)
23    
24            # Устанавливаем контейнер в scroll area
25            scroll_area.setWidget(container_widget)
26            scroll_area.setWidgetResizable(True)
27    
28            # Устанавливаем заголовок и размеры окна
29            self.setWindowTitle("Scrollable QLabel Example")
30            self.setGeometry(100, 100, 300, 400)  # Задаем размеры основного окна
31    
32    if __name__ == "__main__":
33        app = QApplication(sys.argv)
34        window = ScrollableLabels()
35        window.show()
36        sys.exit(app.exec_())
##### scr\tests\2.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QWidget, QVBoxLayout, QLabel, QMessageBox
3     
4     
5     class MainWindow(QMainWindow):
6         def __init__(self):
7             super().__init__()
8     
9             self.setWindowTitle("QTabWidget Example")
10             self.setGeometry(100, 100, 600, 400)
11    
12            self.tab_widget = QTabWidget()
13            self.setCentralWidget(self.tab_widget)
14    
15            # Добавляем вкладки
16            for i in range(3):
17                self.add_tab(f"Tab {i + 1}")
18    
19            # Разрешаем закрытие вкладок
20            self.tab_widget.setTabsClosable(True)
21    
22            # Подключаем сигнал для обработки закрытия вкладок
23            self.tab_widget.tabCloseRequested.connect(self.handle_tab_close_requested)
24    
25        def add_tab(self, title):
26            tab = QWidget()
27            layout = QVBoxLayout()
28            label = QLabel(f"Content of {title}")
29            layout.addWidget(label)
30            tab.setLayout(layout)
31            self.tab_widget.addTab(tab, title)
32    
33        def handle_tab_close_requested(self, index):
34            # Логика для отмены закрытия
35            reply = QMessageBox.question(
36                self,
37                'Close Tab',
38                f"Are you sure you want to close {self.tab_widget.tabText(index)}?",
39                QMessageBox.Yes | QMessageBox.No,
40                QMessageBox.No
41            )
42    
43            if reply == QMessageBox.Yes:
44                self.tab_widget.removeTab(index)
45            else:
46                # Отмена закрытия, ничего не делаем
47                pass
48    
49    
50    if __name__ == "__main__":
51        app = QApplication(sys.argv)
52        main_window = MainWindow()
53        main_window.show()
54        sys.exit(app.exec_())
55    
##### scr\tests\3.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QTreeWidget, QTreeWidgetItem, QWidget, QHBoxLayout, QLabel, QLineEdit, \
3         QSpacerItem, QSizePolicy
4     
5     
6     class CustomWidget(QWidget):
7         def __init__(self, parent=None):
8             super(CustomWidget, self).__init__(parent)
9     
10             # Создаем горизонтальный layout
11            layout = QHBoxLayout()
12    
13            # Создаем QLabel с фиксированным размером
14            self.label = QLabel("Label:")
15            self.label.setFixedWidth(50)
16    
17            # Создаем QLineEdit с фиксированным размером
18            self.line_edit = QLineEdit()
19            self.line_edit.setFixedWidth(200)
20    
21            # Добавляем QLabel и SpacerItem
22            layout.addWidget(self.label)
23            layout.addSpacerItem(QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum))
24    
25            # Добавляем QLineEdit
26            layout.addWidget(self.line_edit)
27    
28            # Убираем внешние отступы
29            layout.setContentsMargins(0, 0, 0, 0)
30    
31            # Устанавливаем layout для виджета
32            self.setLayout(layout)
33    
34    
35    class TreeWidgetExample(QTreeWidget):
36        def __init__(self):
37            super(TreeWidgetExample, self).__init__()
38    
39            # Скрыть заголовок
40            self.header().hide()
41            self.show()
42    
43            # Создаем корневой элемент
44            root = QTreeWidgetItem(self)
45            root.setText(0, 'Root')
46    
47            # Создаем дочерний элемент
48            child = QTreeWidgetItem(root)
49    
50            # Создаем экземпляр кастомного виджета
51            custom_widget = CustomWidget()
52    
53            # Вставляем виджет в элемент дерева
54            self.setItemWidget(child, 0, custom_widget)
55    
56    
57    if __name__ == '__main__':
58        app = QApplication(sys.argv)
59        tree = TreeWidgetExample()
60        sys.exit(app.exec_())
61    
##### scr\tests\4.py #####
1     import sys
2     from PyQt5.QtWidgets import QApplication, QWidget
3     from PyQt5.QtCore import Qt, QPoint
4     from PyQt5.QtGui import QPainter, QPen
5     
6     class MyWidget(QWidget):
7         def __init__(self):
8             super().__init__()
9             self.initUI()
10             self.setMouseTracking(True)
11            self.drawing = False
12            self.lastPoint = QPoint()
13    
14        def initUI(self):
15            self.setGeometry(100, 100, 800, 600)
16            self.setWindowTitle('Mouse Drag Event Example')
17    
18        def mousePressEvent(self, event):
19            if event.button() == Qt.LeftButton:
20                self.drawing = True
21                self.lastPoint = event.pos()
22    
23        def mouseMoveEvent(self, event):
24            if event.buttons() & Qt.LeftButton and self.drawing:
25                painter = QPainter(self)
26                pen = QPen(Qt.black, 2, Qt.SolidLine)
27                painter.setPen(pen)
28                painter.drawLine(self.lastPoint, event.pos())
29                self.lastPoint = event.pos()
30    
31                print(self.lastPoint)
32    
33                self.update()
34    
35        def mouseReleaseEvent(self, event):
36            if event.button() == Qt.LeftButton:
37                self.drawing = False
38    
39        def paintEvent(self, event):
40            canvasPainter = QPainter(self)
41            canvasPainter.setPen(QPen(Qt.black, 2, Qt.SolidLine))
42    
43    if __name__ == '__main__':
44        app = QApplication(sys.argv)
45        ex = MyWidget()
46        ex.show()
47        sys.exit(app.exec_())
48    
##### scr\tests\5.py #####
1     import sys
2     from PyQt5.QtCore import QTimer
3     from PyQt5.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget
4     
5     
6     class MyWidget(QWidget):
7         def __init__(self):
8             super().__init__()
9     
10             self.initUI()
11    
12            # Создание таймера
13            self.timer = QTimer(self)
14            # Подключение таймера к функции обновления
15            self.timer.timeout.connect(self.updateLabel)
16            # Установка интервала таймера (в миллисекундах)
17            self.timer.start(1000)  # Интервал 1000 мс = 1 секунда
18    
19        def initUI(self):
20            self.layout = QVBoxLayout()
21    
22            self.label = QLabel('0', self)
23            self.layout.addWidget(self.label)
24    
25            self.setLayout(self.layout)
26    
27            self.counter = 0
28    
29        def updateLabel(self):
30            # Код, который будет выполняться постоянно
31            self.counter += 1
32            self.label.setText(str(self.counter))
33    
34    
35    if __name__ == '__main__':
36        app = QApplication(sys.argv)
37    
38        widget = MyWidget()
39        widget.show()
40    
41        sys.exit(app.exec_())
42    
##### scr\tests\6.py #####
1     import sys
2     import traceback
3     
4     # Открываем файл для записи вывода
5     with open('output.log', 'w') as log_file:
6         try:
7             # Перенаправляем стандартный вывод и стандартный поток ошибок в файл
8             sys.stderr = log_file
9     
10             # Ваш код здесь
11            print("This is a message to the log file.")
12            x = 1 / 0  # Пример ошибки
13    
14        except Exception as e:
15            # Записываем трассировку стека в файл
16            traceback.print_exc(file=log_file)
17    
18        finally:
19            # Восстанавливаем стандартные потоки
20            sys.stderr = sys.__stderr__
21    
22    print("Программа завершена.")
23    
##### scr\tests\7.py #####
1     from PIL import Image
2     
3     # Открываем изображение
4     image = Image.open('grass.png')
5     
6     # Устанавливаем новые размеры, кратные оригиналу (например, в два раза больше)
7     width, height = image.size
8     new_width = width * 2
9     new_height = height * 2
10     
11    # Используем метод resize с различными методами интерполяции
12    resized_image_nearest = image.resize((new_width, new_height), resample=Image.NEAREST)
13    resized_image_bilinear = image.resize((new_width, new_height), resample=Image.BILINEAR)
14    resized_image_bicubic = image.resize((new_width, new_height), resample=Image.BICUBIC)
15    resized_image_lanczos = image.resize((new_width, new_height), resample=Image.LANCZOS)
16    
17    # Сохраняем или отображаем результаты
18    resized_image_nearest.save('resized_image_nearest.png')
19    resized_image_bilinear.save('resized_image_bilinear.png')
20    resized_image_bicubic.save('resized_image_bicubic.png')
21    resized_image_lanczos.save('resized_image_lanczos.png')
22    
23    resized_image_nearest.show()
24    resized_image_bilinear.show()
25    resized_image_bicubic.show()
26    resized_image_lanczos.show()
27    
##### scr\tests\8.py #####
1     from PyQt5.QtCore import QPropertyAnimation, QRect
2     from PyQt5.QtGui import QPixmap
3     from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout
4     
5     
6     class AnimatedLabel(QWidget):
7         def __init__(self):
8             super().__init__()
9     
10             self.label = QLabel(self)
11            pixmap = QPixmap("image.png")
12            self.label.setPixmap(pixmap)
13            self.label.setGeometry(50, 50, pixmap.width(), pixmap.height())
14    
15            self.animation = QPropertyAnimation(self.label, b"geometry")
16            self.animation.setDuration(1000)  # Длительность анимации в миллисекундах
17            self.animation.setStartValue(QRect(50, 50, pixmap.width(), pixmap.height()))
18            self.animation.setEndValue(QRect(50, 50, pixmap.width() * 2, pixmap.height() * 2))
19            self.animation.start()
20    
21            layout = QVBoxLayout(self)
22            layout.addWidget(self.label)
23            self.setLayout(layout)
24    
25    
26    if __name__ == "__main__":
27        import sys
28    
29        app = QApplication(sys.argv)
30        window = AnimatedLabel()
31        window.show()
32        sys.exit(app.exec_())
33    
##### scr\tests\9.py #####
1     from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout
2     from PyQt5.QtCore import QPropertyAnimation, QSize
3     from PyQt5.QtGui import QPixmap
4     
5     
6     class ImageWidget(QWidget):
7         def __init__(self):
8             super().__init__()
9     
10             self.label = QLabel(self)
11            self.pixmap1 = QPixmap('air.png')
12            self.pixmap2 = QPixmap('fire.png')
13            self.label.setPixmap(self.pixmap1)
14    
15            self.animation = QPropertyAnimation(self.label, b"size")
16            self.animation.setDuration(1000)
17            self.animation.setStartValue(self.pixmap1.size())
18            self.animation.setEndValue(self.pixmap2.size())
19            self.animation.valueChanged.connect(self.on_value_changed)
20    
21            layout = QVBoxLayout(self)
22            layout.addWidget(self.label)
23    
24        def on_value_changed(self, size):
25            scaled_pixmap = self.pixmap1.scaled(size)
26            self.label.setPixmap(scaled_pixmap)
27    
28        def start_animation(self):
29            self.animation.start()
30    
31    
32    app = QApplication([])
33    window = ImageWidget()
34    window.show()
35    window.start_animation()
36    app.exec_()
37    
##### scr\tests\project\Main.py #####
1     import engine
2     import random
3     import pygame
4     
5     
6     class Functions:
7         @staticmethod
8         def reset(self):
9             self.objects.add(engine.objects.DynamicObject(self, [20 + random.randint(1, 200), 20 + random.randint(1, 200)], [0, 0, 80, 110], self.player_animation, "player", speed=5, gravity=300, jumpPower=10, slidingStep=1))
10     
11            self.player = self.objects.getByGroup("player")[0]
12    
13            self.focus = self.player.id
14    
15            self.camera.setFocus(self.player)
16            
17        @staticmethod
18        def test(game, dynamicObject=None, staticObject=None):
19            print("hello world!")
20    
21    
22    class Game(engine.Application):
23        def __init__(self):
24            engine.Application.__init__(self, "project/project.property")
25    
26            self.sprite = engine.Sprite(self, "project/sprite.png", [32, 32])
27    
28            self.particle_sprite = engine.Sprite(self, "project/particle.png")
29    
30            self.player_animation = engine.Animation(
31                self, "project/project.animation", {
32                    "move": ["project/player/player_run_1.png", "project/player/player_run_2.png"] * 2,
33                    "jump": ["project/player/player_jump.png"],
34                    "fall": ["project/player/player_fall.png"],
35                    "idle": ["project/player/player_idle.png"]
36                }
37            )
38    
39            self.objects.collisions = engine.Collision("project/project.collision")
40    
41            for i in range(100):
42                var = random.randint(1, 4)
43    
44                if i % var == 0 or i < 15 or True:
45                    self.objects.add(engine.objects.StaticObject(self, [0 + i * 32, 400], [0, 0, 32, 32], self.sprite, "block"))
46    
47            self.objects.add(engine.objects.DynamicObject(self, [20 + random.randint(1, 200), 20 + random.randint(1, 200)], [0, 0, 80, 110], self.player_animation, "player", speed=5, gravity=300, jumpPower=10, slidingStep=1))
48    
49            self.player = self.objects.getByGroup("player")[0]
50    
51            self.focus = self.player.id
52    
53            self.setCamera(engine.camera.FocusCamera(self, self.player))
54            self.setFunctionClass(Functions)
55    
56            self.setKeyEvent(["PRESS", "d"], lambda: self.player.typeMove("right"))
57            self.setKeyEvent(["PRESS", "a"], lambda: self.player.typeMove("left"))
58            self.setKeyEvent(["KEYDOWN", "SPACE"], lambda: self.player.typeMove("jump"))
59            self.setKeyEvent(["KEYDOWN", "r"], lambda: Functions.reset(self))
60    
61            self.sprites = [
62                engine.Sprite(self, "project/button/base.png"),
63                engine.Sprite(self, "project/button/mouse.png"),
64                engine.Sprite(self, "project/button/click.png")
65            ]
66    
67            self.button = engine.Button(
68                self, [300, 20, 200, 100], *self.sprites, None, engine.Label(self, [300, 20, 200, 100], "Hello world!"),
69                function=lambda: Functions.reset(self)
70            )
71    
72        def update(self) -> None:
73            super().update()
74    
75            for _ in range(5):
76                particle_function = engine.ParticleFunction(self, {
77                    "x": lambda variables, pos, step: pos.x + (step / 10) * variables["speed"],
78                    "y": lambda variables, pos, step: pos.y + (step / 1000) * variables["var"],
79    
80                    "resize": lambda variables, pos, step: (step > 50, 10 - ((step - 40) / 5), 10 - ((step - 40) / 5)),
81                    "death": lambda variables, pos, step: step > 75
82                }, variables={"var": random.randint(-10, 10), "speed": random.randint(10, 12) / 10})
83    
84                particle = engine.ImageParticle(self, [random.randint(0, 50), 100], self.particle_sprite, particle_function, "p1")
85    
86                self.particles.add(particle)
87    
88        def render(self) -> None:
89            super().render()
90    
91            self.button.draw()
92    
93    
94    if __name__ == "__main__":
95        game = Game()
96        game.start()
97    
##### scr\variables.py #####
1     from PyQt5.Qt import QMessageBox
2     from PyQt5.QtGui import QFont
3     
4     from scr.modules.translate import Translate
5     
6     from tkinter import font
7     
8     import importlib.util
9     import platform
10     import tkinter
11    import random
12    import pygame
13    import ujson
14    import json
15    import os
16    
17    DIVELOP = os.getenv("PYCHARM_HOSTED") == "1"
18    
19    print(f"LOG: divelop mode = {DIVELOP}")
20    
21    pygame.init()
22    
23    
24    with open("scr/files/settings/settings.json", "r", encoding="utf-8") as file:
25        SETTINGS = json.load(file)
26    
27    PLUS = 64 + 8 - 1
28    
29    # MINI FONT
30    
31    MFONT = QFont("scr/files/fonts/mini.ttf")
32    MFONT.setPointSize(9)
33    
34    # BASE FONT
35    
36    FONT = QFont()
37    FONT.setPointSize(9)
38    
39    # LARGE FONT
40    
41    LFONT = QFont()
42    LFONT.setPointSize(10)
43    
44    # LARGE BOLD FONT
45    
46    LBFONT = QFont()
47    LBFONT.setPointSize(8)
48    LBFONT.setBold(True)
49    
50    # BASE BIG FONT
51    
52    BBFONT = QFont()
53    BBFONT.setPointSize(18)
54    
55    # BIG FONT
56    
57    BFONT = QFont("Georgia")
58    BFONT.setPointSize(18)
59    
60    # SYSTEM FONT
61    
62    SFONT = QFont("Courier", weight=16)
63    SFONT.setPointSize(13)
64    
65    # BIG HELP FONT
66    
67    BIG_HELP_FONT = QFont("Consolas")
68    BIG_HELP_FONT.setPointSize(14)
69    
70    # HELP FONT
71    
72    HELP_FONT = QFont("Courier")
73    HELP_FONT.setPointSize(10)
74    
75    # TRANSLATE
76    
77    translate = Translate(SETTINGS["language"])
78    
79    
80    class MessageBox:
81        @staticmethod
82        def imposiable(detail):
83            title = translate.translate("Impossible operation")
84    
85            msg = QMessageBox()
86            msg.setIcon(QMessageBox.Information)
87            msg.setText(translate(str(detail)))
88            msg.setWindowTitle(title)
89            msg.setStandardButtons(QMessageBox.Ok)
90            msg.exec_()
91    
92        @staticmethod
93        def error(detail):
94            title = translate.translate("Error")
95    
96            msg = QMessageBox()
97            msg.setIcon(QMessageBox.Information)
98            msg.setText(translate(str(detail)))
99            msg.setWindowTitle(title)
100            msg.setStandardButtons(QMessageBox.Ok)
101           msg.exec_()
102   
103       @staticmethod
104       def special(name, detail):
105           title = translate.translate(name)
106   
107           msg = QMessageBox()
108           msg.setIcon(QMessageBox.Information)
109           msg.setText(translate(str(detail)))
110           msg.setWindowTitle(title)
111           msg.setStandardButtons(QMessageBox.Ok)
112           msg.exec_()
113   
114   
115   class Size:
116       @staticmethod
117       def x(var) -> int:
118           return round(size["width"] * (var / 100))
119   
120       @staticmethod
121       def y(var) -> int:
122           return round((size["height"] + PLUS) * (var / 100))
123   
124   
125   def load(fp, *args, **kwargs):
126       return ujson.loads(fp.read())
127   
128   
129   def loads(s, *args, **kwargs):
130       return ujson.loads(s)
131   
132   
133   def dump(obj, fp, *args, **kwargs):
134       fp.write(ujson.dumps(obj, *args, **kwargs))
135   
136   
137   def dumps(obj, *args, **kwargs):
138       return ujson.dumps(obj, *args, **kwargs)
139   
140   
141   def loader(path):
142       name = os.path.basename(path).split(".")[0]
143   
144       spec = importlib.util.spec_from_file_location(name, path)
145       module = importlib.util.module_from_spec(spec)
146       spec.loader.exec_module(module)
147   
148       return module
149   
150   
151   def invertColor(color):
152       stripped = color.lstrip('#')
153   
154       r = stripped[0:2]
155       g = stripped[2:4]
156       b = stripped[4:6]
157   
158       def invert(component):
159           value = 255 - int(component, 16)
160           return f"{value:02x}"
161   
162       return f"#{invert(r)}{invert(g)}{invert(b)}".upper()
163   
164   
165   size = {}
166   
167   FLAGS = {
168       "not-view-version-update": False
169   }
170   
171   SYSTEM = platform.system()
172   RELEASE = platform.release()
173   
174   IMAGE_FORMATES = "jpeg jpg jpe jfif png ico tiff tif eps svg".split()
175   BLOCKED_FORMATES = "cfg obj objc func".split()
176   
177   DONT_OPEN_FORMATES = ()
178   
179   CODE_GRID_CELL_SIZE = 25
180   CODE_GRID_CELL_SIZE_TWO = 26
181   
182   CODE_POINT_PRECISION = 6
183   CODE_LINER_PRECISION = 0.25
184   CODE_CONNECTOR_NO_HAVE_INPUT_TYPES = ["path"]
185   
186   OBJECT_CURRECT_TEST = ["type", "type/name", "type/value", "type/type", "StaticObject", "StaticObject/pos", "StaticObject/hitbox", "StaticObject/sprite", "StaticObject/group", "StaticObject/layer"]
187   TEXT_CURRECT_TEST = ["type", "type/name", "type/value", "type/type", "Text", "Text/pos", "Text/hitbox", "Text/group", "Text/layer"]
188   
189   NODE_CURRECT_TEST = ["display", "id", "width", "height", "x", "y", "name", "inputs", "outputs", "type"]
190   
191   FONT_LIST = "@MS Gothic | @MS PGothic | @MS UI Gothic | @Malgun Gothic | @Malgun Gothic Semilight | @Microsoft JhengHei | @Microsoft JhengHei Light | @Microsoft JhengHei UI | @Microsoft JhengHei UI Light | @Microsoft YaHei | @Microsoft YaHei Light | @Microsoft YaHei UI | @Microsoft YaHei UI Light | @MingLiU-ExtB | @MingLiU_HKSCS-ExtB | @NSimSun | @PMingLiU-ExtB | @SimSun | @SimSun-ExtB | @SimSun-ExtG | @Yu Gothic | @Yu Gothic Light | @Yu Gothic Medium | @Yu Gothic UI | @Yu Gothic UI Light | @Yu Gothic UI Semibold | @Yu Gothic UI Semilight | Arabic Transparent | Arial | Arial Baltic | Arial Black | Arial CE | Arial CYR | Arial Cyr | Arial Greek | Arial TUR | Bahnschrift | Bahnschrift Condensed | Bahnschrift Light | Bahnschrift Light Condensed | Bahnschrift Light SemiCondensed | Bahnschrift SemiBold | Bahnschrift SemiBold Condensed | Bahnschrift SemiBold SemiConden | Bahnschrift SemiCondensed | Bahnschrift SemiLight | Bahnschrift SemiLight Condensed | Bahnschrift SemiLight SemiConde | Calibri | Calibri Light | Cambria | Cambria Math | Candara | Candara Light | Cascadia Code | Cascadia Code ExtraLight | Cascadia Code Light | Cascadia Code SemiBold | Cascadia Code SemiLight | Cascadia Mono | Cascadia Mono ExtraLight | Cascadia Mono Light | Cascadia Mono SemiBold | Cascadia Mono SemiLight | Comic Sans MS | Consolas | Constantia | Corbel | Corbel Light | Courier | Courier | Courier New | Courier New Baltic | Courier New CE | Courier New CYR | Courier New Cyr | Courier New Greek | Courier New TUR | Ebrima | Fixedsys | Franklin Gothic Medium | Gabriola | Gadugi | Georgia | HoloLens MDL2 Assets | Impact | Ink Free | Javanese Text | Leelawadee UI | Leelawadee UI Semilight | Lucida Console | Lucida Sans Unicode | MS Gothic | MS PGothic | MS Sans Serif | MS Serif | MS UI Gothic | MV Boli | Malgun Gothic | Malgun Gothic Semilight | Marlett | Microsoft Himalaya | Microsoft JhengHei | Microsoft JhengHei Light | Microsoft JhengHei UI | Microsoft JhengHei UI Light | Microsoft New Tai Lue | Microsoft PhagsPa | Microsoft Sans Serif | Microsoft Tai Le | Microsoft YaHei | Microsoft YaHei Light | Microsoft YaHei UI | Microsoft YaHei UI Light | Microsoft Yi Baiti | MingLiU-ExtB | MingLiU_HKSCS-ExtB | Modern | Mongolian Baiti | Myanmar Text | NSimSun | Nirmala UI | Nirmala UI Semilight | PMingLiU-ExtB | Palatino Linotype | Roman | Script | Segoe MDL2 Assets | Segoe Print | Segoe Script | Segoe UI | Segoe UI Black | Segoe UI Emoji | Segoe UI Historic | Segoe UI Light | Segoe UI Semibold | Segoe UI Semilight | Segoe UI Symbol | SimSun | SimSun-ExtB | SimSun-ExtG | Sitka Banner | Sitka Display | Sitka Heading | Sitka Small | Sitka Subheading | Sitka Text | Small Fonts | Sylfaen | Symbol | System | Tahoma | Terminal | Times New Roman | Times New Roman Baltic | Times New Roman CE | Times New Roman CYR | Times New Roman Cyr | Times New Roman Greek | Times New Roman TUR | Trebuchet MS | Verdana | Webdings | Wingdings | Yu Gothic | Yu Gothic Light | Yu Gothic Medium | Yu Gothic UI | Yu Gothic UI Light | Yu Gothic UI Semibold | Yu Gothic UI Semilight".split(" | ")
192   
193   SOCKET_ID = random.randint(2**10, 2**16 - 2)
194   SOCKET_GLOBAL_ID = SOCKET_ID + 1
195   
196   SPRITES = {
197       "dir": "scr/files/sprites/dir.png",
198       "cfg": "scr/files/sprites/cfg.png",
199       "file": "scr/files/sprites/file.png",
200       "scene": "scr/files/sprites/scene.png",
201       "py": "scr/files/sprites/python.png",
202       "func": "scr/files/sprites/func.png",
203       "obj": "scr/files/sprites/obj.png",
204       "objc": "scr/files/sprites/obj.png",
205       "json": "scr/files/sprites/json.png",
206       "scene-light": "scr/files/sprites/scene-light.png",
207       "dir-light": "scr/files/sprites/dir-light.png",
208       "text": "scr/files/sprites/text.png",
209       "textc": "scr/files/sprites/text.png",
210       "btn": "scr/files/sprites/text.png",
211       "btnc": "scr/files/sprites/text.png"
212   }
213   
214   for element in IMAGE_FORMATES:
215       SPRITES[element] = "scr/files/sprites/image.png"
216   
217   for element in IMAGE_FORMATES:
218       SPRITES[f"{element}-light"] = "scr/files/sprites/image-light.png"
219   
220   BASE_SETTINGS = {
221       "language": "EN"
222   }
223   
224   LANGUAGES = {
225       "RU": "Русский",
226       "EN": "English"
227   }
228   
229   THEMES = {
230       "light": "Light",
231       "dark": "Dark"
232   }
233   
234   if SETTINGS["theme"] == "dark":
235       BUTTON_RED_STYLE = """
236       QPushButton {
237           color: red;
238       }
239       QPushButton:hover {
240           background-color: #3B2727;
241       }
242       QPushButton:pressed {
243           background-color: #F66060;
244           color: black;
245       }
246       """
247   
248       BUTTON_BLUE_STYLE = """
249       QPushButton {
250           color: #8ab4f7;
251       }
252       QPushButton:hover {
253           background-color: #272e3b;
254       }
255       QPushButton:pressed {
256           background-color: #5f9af4;
257           color: black;
258       }
259       """
260   
261   else:
262       BUTTON_RED_STYLE = """
263       QPushButton {
264           color: red;
265       }
266       QPushButton:hover {
267           background-color: #F0E0E0;
268       }
269       QPushButton:pressed {
270           background-color: #F66060;
271           color: black;
272       }
273       """
274   
275       BUTTON_BLUE_STYLE = """
276       QPushButton {
277           color: #1E90FF;
278       }
279       QPushButton:hover {
280           background-color: #E0E8F0;
281       }
282       QPushButton:pressed {
283           background-color: #ADD8E6;
284           color: black;
285       }
286       """
287   
##### Game Engine 3.py #####
1     from PyQt5.QtWidgets import QApplication
2     
3     from scr.main import Main
4     
5     from scr.variables import *
6     
7     import subprocess
8     import traceback
9     import sys
10     
11    
12    def application() -> None:
13        app = QApplication(sys.argv)
14        ex = Main(app)
15    
16        sys.exit(app.exec_())
17    
18    
19    def main() -> None:
20        with open("scr/files/logs/log.txt", "w+", encoding="utf-8", buffering=1) as file:
21            try:
22                if not DIVELOP:
23                    sys.stdout = file
24                    sys.stderr = file
25    
26                print(f"LOG: program runned on \"{SYSTEM} {RELEASE}\"")
27    
28                application()
29    
30            except Exception as e:
31                traceback.print_exc(file=file)
32    
33                if not DIVELOP:
34                    if SYSTEM == "Windows":
35                        subprocess.run(["notepad.exe", "scr/files/logs/log.txt"])
36    
37                    elif SYSTEM == "Linux":
38                        subprocess.run(["gedit", "scr/files/logs/log.txt"])
39    
40                    else:
41                        print("LOG: scr/files/logs/log.txt")
42    
43            finally:
44                sys.stdout = sys.__stdout__
45                sys.stderr = sys.__stderr__
46    
47    
48    if __name__ == "__main__":
49        main()
50    
51    